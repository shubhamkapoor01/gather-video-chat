{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class SlicePackedProgram {\n  constructor(destSize) {\n    this.variableNames = ['source'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{\n      name: 'start',\n      arrayIndex: this.rank,\n      type: 'int'\n    }];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n    const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n    const sourceLocSetup = this.rank <= 4 ? `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` : destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`).join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/slice_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,WAAR,QAA0B,gBAA1B;AACA,SAAQ,iBAAR,QAA6C,mBAA7C;AAEA,OAAM,MAAO,kBAAP,CAAyB;AAS7B,EAAA,WAAA,CAAY,QAAZ,EAA8B;AAR9B,SAAA,aAAA,GAAgB,CAAC,QAAD,CAAhB;AACA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AAOE,SAAK,WAAL,GAAmB,QAAnB;AACA,SAAK,IAAL,GAAY,QAAQ,CAAC,MAArB;AACA,SAAK,cAAL,GAAsB,CAAC;AAAC,MAAA,IAAI,EAAE,OAAP;AAAgB,MAAA,UAAU,EAAE,KAAK,IAAjC;AAAuC,MAAA,IAAI,EAAE;AAA7C,KAAD,CAAtB;AACA,UAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;AACA,UAAM,MAAM,GAAG,WAAW,CAAC,QAAD,EAAW,KAAK,IAAhB,CAA1B;AACA,UAAM,SAAS,GAAG,WAAW,CAAC,WAAD,EAAc,KAAK,IAAnB,CAA7B;AAEA,UAAM,SAAS,GACX,KAAK,IAAL,KAAc,CAAd,GAAkB,WAAlB,GAAgC,QAAQ,SAAS,CAAC,KAAV,CAAgB,CAAC,CAAjB,EAAoB,IAApB,EAA0B,GADtE;AAEA,UAAM,UAAU,GACZ,wBAAwB,SAAS,CAAC,IAAV,EAAgB,MAAM,SAAS,GAD3D;AAEA,UAAM,QAAQ,GAAG;mBACF,UAAU;cACf,MAAM,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe,MAAM,QAAQ,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;YACpD,SAAS,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;qBACf,UAAU;YACnB,SAAS,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;;AAE/B,KAPD;AAQA,UAAM,QAAQ,GAAG,KAAK,IAAL,KAAc,CAAd,GAAkB,EAAlB,GAAuB;UAClC,MAAM,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;cACjB,MAAM,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe,MAAM,QAAQ,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;YACpD,SAAS,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;qBACf,UAAU;gBACf,MAAM,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe,MAAM,QAAQ,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;cACpD,SAAS,CAAC,KAAK,IAAL,GAAY,CAAb,CAAe;uBACf,UAAU;;;AAG5B,KAVD;AAYA,UAAM,cAAc,GAAG,KAAK,IAAL,IAAa,CAAb,GACnB;cACM,KAAK,IAAI,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAD,EAAI,CAAJ,KAAU,SAAS,CAAC,GAAjC,EAAsC,IAAtC,EAA4C,IAFxC,GAGnB,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAD,EAAI,CAAJ,KAAU,GAAG,SAAS,CAAC,CAAD,CAAG,MAAM,MAAM,CAAC,CAAD,CAAG,YAAY,CAAC,IAAlE,EACK,IADL,CACU,IADV,CAHJ;AAKA,SAAK,QAAL,GAAgB;;UAEV,KAAK;UACL,KAAK;UACL,cAAc;;UAEd,QAAQ;UACR,QAAQ;;;AAGb,KAVD;AAWD;;AAzD4B","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}