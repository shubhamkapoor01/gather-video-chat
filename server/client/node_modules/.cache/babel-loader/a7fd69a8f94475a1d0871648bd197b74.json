{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer(f) {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads {\n  constructor(fileNamePrefix) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts) {\n    if (typeof document === 'undefined') {\n      throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n    }\n\n    const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n      type: 'application/octet-stream'\n    }));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const weightsManifest = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelJSON = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n      const modelJsonURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelJSON)], {\n        type: 'application/json'\n      })); // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n\n      const jsonAnchor = this.modelJsonAnchor == null ? document.createElement('a') : this.modelJsonAnchor;\n      jsonAnchor.download = this.modelJsonFileName;\n      jsonAnchor.href = modelJsonURL; // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n      };\n    }\n  }\n\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\n\nclass BrowserFiles {\n  constructor(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);\n    }\n\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n\n  async load() {\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n\n      jsonReader.onload = event => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse(event.target.result);\n        const modelTopology = modelJSON.modelTopology;\n\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));\n          return;\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));\n          return;\n        }\n\n        if (this.weightsFiles.length === 0) {\n          resolve({\n            modelTopology\n          });\n          return;\n        }\n\n        const modelArtifactsPromise = getModelArtifactsForJSON(modelJSON, weightsManifest => this.loadWeights(weightsManifest));\n        resolve(modelArtifactsPromise);\n      };\n\n      jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);\n\n      jsonReader.readAsText(this.jsonFile);\n    });\n  }\n\n  loadWeights(weightsManifest) {\n    const weightSpecs = [];\n    const paths = [];\n\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n\n    const pathToFile = this.checkManifestAndWeightFiles(weightsManifest);\n    const promises = paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n    return Promise.all(promises).then(buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n  }\n\n  loadWeightsFile(path, file) {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n\n      weightFileReader.onload = event => {\n        // tslint:disable-next-line:no-any\n        const weightData = event.target.result;\n        resolve(weightData);\n      };\n\n      weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n\n\n  checkManifestAndWeightFiles(manifest) {\n    const basenames = [];\n    const fileNames = this.weightsFiles.map(file => basename(file.name));\n    const pathToFile = {};\n\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);\n        }\n\n        basenames.push(pathBasename);\n\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${this.weightsFiles.length}).`);\n    }\n\n    return pathToFile;\n  }\n\n}\n\nexport const browserDownloadsRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserDownloads(fileNamePrefix = 'model') {\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/io/browser_files.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandlers related to files, such as browser-triggered file downloads,\n * user-selected files in browser.\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {basename, concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelJSON, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\n\nfunction defer<T>(f: () => T): Promise<T> {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\n\nexport class BrowserDownloads implements IOHandler {\n  private readonly modelJsonFileName: string;\n  private readonly weightDataFileName: string;\n  private readonly modelJsonAnchor: HTMLAnchorElement;\n  private readonly weightDataAnchor: HTMLAnchorElement;\n\n  static readonly URL_SCHEME = 'downloads://';\n\n  constructor(fileNamePrefix?: string) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error(\n          'browserDownloads() cannot proceed because the current environment ' +\n          'is not a browser.');\n    }\n\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n\n    this.modelJsonFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName =\n        fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (typeof (document) === 'undefined') {\n      throw new Error(\n          'Browser downloads are not supported in ' +\n          'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob(\n        [modelArtifacts.weightData], {type: 'application/octet-stream'}));\n\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserDownloads.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const weightsManifest: WeightsManifestConfig = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelJSON: ModelJSON =\n          getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n      const modelJsonURL = window.URL.createObjectURL(\n          new Blob([JSON.stringify(modelJSON)], {type: 'application/json'}));\n\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.modelJsonAnchor == null ?\n          document.createElement('a') :\n          this.modelJsonAnchor;\n      jsonAnchor.download = this.modelJsonFileName;\n      jsonAnchor.href = modelJsonURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ?\n            document.createElement('a') :\n            this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(\n            () => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n\n      return {modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)};\n    }\n  }\n}\n\nclass BrowserFiles implements IOHandler {\n  private readonly jsonFile: File;\n  private readonly weightsFiles: File[];\n\n  constructor(files: File[]) {\n    if (files == null || files.length < 1) {\n      throw new Error(\n          `When calling browserFiles, at least 1 file is required, ` +\n          `but received ${files}`);\n    }\n    this.jsonFile = files[0];\n    this.weightsFiles = files.slice(1);\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse((event.target as any).result) as ModelJSON;\n\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${\n              this.jsonFile.name}`));\n          return;\n        }\n\n        if (this.weightsFiles.length === 0) {\n          resolve({modelTopology});\n          return;\n        }\n\n        const modelArtifactsPromise = getModelArtifactsForJSON(\n            modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n        resolve(modelArtifactsPromise);\n      };\n\n      jsonReader.onerror = error => reject(\n          `Failed to read model topology and weights manifest JSON ` +\n          `from file '${this.jsonFile.name}'. BrowserFiles supports loading ` +\n          `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(this.jsonFile);\n    });\n  }\n\n  private loadWeights(weightsManifest: WeightsManifestConfig): Promise<[\n    /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n  ]> {\n    const weightSpecs: WeightsManifestEntry[] = [];\n    const paths: string[] = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n      paths.push(...entry.paths);\n    }\n\n    const pathToFile: {[path: string]: File} =\n        this.checkManifestAndWeightFiles(weightsManifest);\n\n    const promises: Array<Promise<ArrayBuffer>> =\n        paths.map(path => this.loadWeightsFile(path, pathToFile[path]));\n\n    return Promise.all(promises).then(\n        buffers => [weightSpecs, concatenateArrayBuffers(buffers)]);\n  }\n\n  private loadWeightsFile(path: string, file: File): Promise<ArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const weightFileReader = new FileReader();\n      weightFileReader.onload = (event: Event) => {\n        // tslint:disable-next-line:no-any\n        const weightData = (event.target as any).result as ArrayBuffer;\n        resolve(weightData);\n      };\n      weightFileReader.onerror = error =>\n          reject(`Failed to weights data from file of path '${path}'.`);\n      weightFileReader.readAsArrayBuffer(file);\n    });\n  }\n\n  /**\n   * Check the compatibility between weights manifest and weight files.\n   */\n  private checkManifestAndWeightFiles(manifest: WeightsManifestConfig):\n      {[path: string]: File} {\n    const basenames: string[] = [];\n    const fileNames = this.weightsFiles.map(file => basename(file.name));\n    const pathToFile: {[path: string]: File} = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(\n              `Duplicate file basename found in weights manifest: ` +\n              `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(\n              `Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = this.weightsFiles[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n\n    if (basenames.length !== this.weightsFiles.length) {\n      throw new Error(\n          `Mismatch in the number of files in weights manifest ` +\n          `(${basenames.length}) and the number of weight files provided ` +\n          `(${this.weightsFiles.length}).`);\n    }\n    return pathToFile;\n  }\n}\n\nexport const browserDownloadsRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n\n/**\n * Creates an IOHandler that triggers file downloads from the browser.\n *\n * The returned `IOHandler` instance can be used as model exporting methods such\n * as `tf.Model.save` and supports only saving.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * const saveResult = await model.save('downloads://mymodel');\n * // This will trigger downloading of two files:\n * //   'mymodel.json' and 'mymodel.weights.bin'.\n * console.log(saveResult);\n * ```\n *\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\n *   formats:\n *   1. `null` or `undefined`, in which case the default file\n *      names will be used:\n *      - 'model.json' for the JSON file containing the model topology and\n *        weights manifest.\n *      - 'model.weights.bin' for the binary file containing the binary weight\n *        values.\n *   2. A single string or an Array of a single string, as the file name prefix.\n *      For example, if `'foo'` is provided, the downloaded JSON\n *      file and binary weights file will be named 'foo.json' and\n *      'foo.weights.bin', respectively.\n * @param config Additional configuration for triggering downloads.\n * @returns An instance of `BrowserDownloads` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserDownloads(fileNamePrefix = 'model'): IOHandler {\n  return new BrowserDownloads(fileNamePrefix);\n}\n\n/**\n * Creates an IOHandler that loads model artifacts from user-selected files.\n *\n * This method can be used for loading from files such as user-selected files\n * in the browser.\n * When used in conjunction with `tf.loadLayersModel`, an instance of\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\n *\n * ```js\n * // Note: This code snippet won't run properly without the actual file input\n * //   elements in the HTML DOM.\n *\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\n * // elements.\n * const uploadJSONInput = document.getElementById('upload-json');\n * const uploadWeightsInput = document.getElementById('upload-weights');\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\n * ```\n *\n * @param files `File`s to load from. Currently, this function supports only\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\n *   which an `Array` of `File`s is expected (in that order):\n *   - A JSON file containing the model topology and weight manifest.\n *   - Optionally, One or more binary files containing the binary weights.\n *     These files must have names that match the paths in the `weightsManifest`\n *     contained by the aforementioned JSON file, or errors will be thrown\n *     during loading. These weights files have the same format as the ones\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\n *     Python PIP package. If no weights files are provided, only the model\n *     topology will be loaded from the JSON file above.\n * @returns An instance of `Files` `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function browserFiles(files: File[]): IOHandler {\n  return new BrowserFiles(files);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}