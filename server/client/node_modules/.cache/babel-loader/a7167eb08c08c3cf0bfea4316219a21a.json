{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { variableGrads } from '@tensorflow/tfjs-core';\nimport { getNextUniqueTensorId } from './backend/state';\nimport { getScopedTensorName, getUniqueTensorName } from './common';\nimport { NotImplementedError } from './errors';\nconst DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n/**\r\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\r\n * dtype and shape, but its value is mutable.  The value is itself represented\r\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\r\n * the `write()` method.\r\n */\n\nexport class LayerVariable {\n  /**\r\n   * Construct Variable from a `tf.Tensor`.\r\n   *\r\n   * If not explicitly named, the Variable will be given a name with the\r\n   * prefix 'Variable'. Variable names are unique. In the case of name\r\n   * collision, suffixies '_<num>' will be added to the name.\r\n   *\r\n   * @param val Initial value of the Variable.\r\n   * @param name Name of the variable. If `null` or `undefined` is provided, it\r\n   *   will default a name with the prefix 'Variable'.\r\n   * @param constraint Optional, projection function to be applied to the\r\n   * variable after optimize updates\r\n   * @throws ValueError if `name` is `null` or `undefined`.\r\n   */\n  constructor(val, dtype = 'float32', name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true, constraint = null) {\n    this.dtype = dtype == null ? 'float32' : dtype;\n    this.shape = val.shape;\n    this.id = getNextUniqueTensorId();\n    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n    this.originalName = getScopedTensorName(name);\n    this.name = getUniqueTensorName(this.originalName);\n    this.trainable_ = trainable;\n    this.constraint = constraint;\n    this.val = tfc.variable(val, this.trainable_, this.name, this.dtype);\n  }\n  /**\r\n   * Get a snapshot of the Variable's value.\r\n   *\r\n   * The returned value is a snapshot of the Variable's value at the time of\r\n   * the invocation. Future mutations in the value of the tensor will only\r\n   * be reflected by future calls to this method.\r\n   */\n\n\n  read() {\n    this.assertNotDisposed();\n    return this.val;\n  }\n  /**\r\n   * Update the value of the Variable.\r\n   *\r\n   * @param newVal: The new value to update to. Must be consistent with the\r\n   *   dtype and shape of the Variable.\r\n   * @return This Variable.\r\n   */\n\n\n  write(newVal) {\n    // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\n    this.assertNotDisposed();\n    checkShapesMatch(this.val, newVal); // Skip updating if this is the exact same tensor.\n\n    if (this.val.id !== newVal.id) {\n      this.val.assign(newVal);\n\n      if (this.constraint != null) {\n        this.val.assign(this.constraint.apply(this.val));\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * Dispose this LayersVariable instance from memory.\r\n   */\n\n\n  dispose() {\n    this.assertNotDisposed();\n    this.val.dispose();\n  }\n\n  assertNotDisposed() {\n    if (this.val.isDisposed) {\n      throw new Error(`LayersVariable ${this.name} is already disposed.`);\n    }\n  }\n\n  get trainable() {\n    return this.trainable_;\n  }\n\n  set trainable(trainable) {\n    this.trainable_ = trainable;\n    this.val.trainable = trainable;\n  }\n\n}\n\nfunction checkShapesMatch(x, y) {\n  if (x.shape.toString() !== y.shape.toString()) {\n    throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' + JSON.stringify(y.shape));\n  }\n}\n/**\r\n * Create a Variable.\r\n * @param x The initial value of the `Variable`.\r\n * @param dtype optional, the type of the variable.\r\n * @param name optional, the name of the variable, default provided by\r\n * Variable.\r\n * @param constraint optional, a constraint to be applied after every update.\r\n * @return The newly instantiated `Variable`.\r\n */\n\n\nexport function variable(x, dtype, name, constraint) {\n  return new LayerVariable(x, dtype, name, true, constraint);\n}\n/**\r\n * Instantiates an all-zeros Variable and returns it.\r\n *\r\n * @param shape Shape of the tensor.\r\n * @param dtype DType of the tensor.\r\n * @param name Name of the tensor.\r\n * @return An all-zero Variable.\r\n */\n\nexport function zerosVariable(shape, dtype, name) {\n  // TODO(cais): Implement logic for dtype.\n  return new LayerVariable(tfc.zeros(shape), dtype, name);\n}\n/**\r\n * Instantiates an all-zeros tensor of the same shape as another tensor.\r\n *\r\n * @param x The other tensor.\r\n * @param dtype DType of the tensor.\r\n * @param name Name of the tensor.\r\n * @return A newly instantiated Variable.\r\n */\n\nexport function zerosLike(x, dtype, name) {\n  return new LayerVariable(tfc.zerosLike(x), dtype, name);\n}\n/**\r\n * Instantiates an all-ones tensor and returns it.\r\n *\r\n * @param shape Shape of the tensor.\r\n * @param dtype DType of the tensor.\r\n * @param name Name of the tensor.\r\n * @return An all-ones Variable.\r\n */\n\nexport function onesVariable(shape, dtype, name) {\n  // TODO(cais): Implement logic for dtype.\n  const allocated = tfc.ones(shape);\n  return new LayerVariable(allocated, dtype, name);\n}\n/**\r\n * Instantiates an all-ones tensor of the same shape as another tensor.\r\n *\r\n * @param x The other tensor.\r\n * @param dtype DType of the tensor.\r\n * @param name Name of the tensor.\r\n * @return A newly instantiated Variable.\r\n */\n\nexport function onesLike(x, dtype, name) {\n  const allocated = tfc.onesLike(x);\n  return new LayerVariable(allocated, dtype, name);\n}\n/**\r\n * Instantiate an identity matrix and returns it, as a Variable\r\n *\r\n * @param size Number of rows/columns.\r\n * @param dtype Data type of returned Variable.\r\n * @param name Name of returned Variable.\r\n * @return A Variable, an identity matrix.\r\n */\n\nexport function eyeVariable(size, dtype, name) {\n  return new LayerVariable(tfc.eye(size), dtype, name);\n}\n/**\r\n * Get a Variable with uniform distribution of values.\r\n * @param shape Shape of the tensor.\r\n * @param minval Lower bound of the uniform distribution.\r\n * @param maxval Upper bound of the uniform distribution.\r\n * @param dtype\r\n * @param seed\r\n * @param name Optional name.\r\n * @return The uniform-random Variable.\r\n */\n\nexport function randomUniformVariable(shape, minval, maxval, dtype, seed, name = 'randomUniform') {\n  return new LayerVariable(tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\n}\n/**\r\n * Get a Variable with truncated-normal distribution of values.\r\n * @param shape Shape of the tensor.\r\n * @param mean mean value of the normal distribution.\r\n * @param stddev standard deviation of the normal distribution.\r\n * @param dtype\r\n * @param seed\r\n * @param name Optional name.\r\n * @return The truncated-normal-random Variable.\r\n */\n\nexport function truncatedNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = 'truncatedNormal') {\n  // TODO(cais): Implement logic for dtype and seed once they are supported\n  // by deeplearn.js.\n  dtype = dtype || 'float32';\n\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n  }\n\n  return new LayerVariable(tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\r\n * Get a Variable with normal distribution of values.\r\n * @param shape Shape of the tensor.\r\n * @param mean mean value of the normal distribution.\r\n * @param stddev standard deviation of the normal distribution.\r\n * @param dtype\r\n * @param seed\r\n * @param name Optional name.\r\n * @return The truncated-normal-random Variable.\r\n */\n\nexport function randomNormalVariable(shape, mean = 0.0, stddev = 1.0, dtype, seed, name = 'randomNormal') {\n  dtype = dtype || 'float32';\n\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(`randomNormalVariable does not support dType ${dtype}.`);\n  }\n\n  return new LayerVariable(tfc.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\r\n * Update the value of a Variable.\r\n * @param x The Variable to be updated.\r\n * @param xNew The new value to update to.\r\n * @return The Variable updated.\r\n */\n\nexport function update(x, xNew) {\n  return x.write(xNew);\n}\n/**\r\n * Update the value of a Variable by adding an increment.\r\n * @param x The Variable to be updated.\r\n * @param increment The incrment to add to `x`.\r\n * @return The Variable updated.\r\n */\n\nexport function updateAdd(x, increment) {\n  return x.write(tfc.add(x.read(), increment));\n}\n/**\r\n * Update the value of a Variable by subtracting a decrement.\r\n * @param x The Variable to be updated.\r\n * @param decrement The decrement to subtract from `x`.\r\n * @return The Variable updated.\r\n */\n\nexport function updateSub(x, decrement) {\n  return x.write(tfc.sub(x.read(), decrement));\n}\n/**\r\n * Get the values of an array of Variables.\r\n *\r\n * @param tensors An `Array` of `Variable`s to get the values of.\r\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\r\n */\n\nexport function batchGetValue(xs) {\n  return xs.map(x => x.read());\n}\n/**\r\n * Update the value of multiple Variables at once.\r\n *\r\n * @param variablesAndValues An `Array`, each element is of type\r\n *   [Variable, Tensor]. The first item is the\r\n *   `Variable` of which the value is to be updated. The second item\r\n *   carries the new value.\r\n */\n\nexport function batchSetValue(variablesAndValues) {\n  variablesAndValues.forEach(variableAndValue => {\n    const variable = variableAndValue[0];\n    variable.write(variableAndValue[1]);\n  });\n}\n/**\r\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\r\n * @param lossFn A function which returns a Scalar to be used as the function\r\n *   value (i.e., numerator) for differentiation.\r\n * @param variables List of variables to be used as the independent variables\r\n *   (i.e., denominator) for differentiation.\r\n * @returns An Array of gradients tensors.\r\n */\n\nexport function gradients(lossFn, variables) {\n  // TODO(cais): The return type signature can be simplified if deeplearn makes\n  //   the corresponding type public.\n  const variableList = variables.map(variable => variable.read());\n  const valudAndGrads = variableGrads(lossFn, variableList);\n  return variables.map(variable => valudAndGrads.grads[variable.name]);\n}","map":{"version":3,"sources":["../../../../../tfjs-layers/src/variables.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, Tensor, variableGrads} from '@tensorflow/tfjs-core';\n\nimport {getNextUniqueTensorId} from './backend/state';\nimport {getScopedTensorName, getUniqueTensorName} from './common';\nimport {Constraint} from './constraints';\nimport {NotImplementedError} from './errors';\nimport {Shape} from './keras_format/common';\nimport {HasShape} from './types';\n\nconst DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n\n/**\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\n * dtype and shape, but its value is mutable.  The value is itself represented\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\n * the `write()` method.\n */\nexport class LayerVariable {\n  readonly dtype: DataType;\n  readonly shape: Shape;\n\n  readonly id: number;\n  // The fully scoped name of this Variable, including a unique suffix if needed\n  readonly name: string;\n  // The originally requested fully scoped name of this Variable, not including\n  // any unique suffix.  This may be needed when restoring weights because this\n  // original name is used as a key.\n  readonly originalName: string;\n  private trainable_: boolean;\n\n  protected readonly val: tfc.Variable;\n  readonly constraint: Constraint;\n  /**\n   * Construct Variable from a `tf.Tensor`.\n   *\n   * If not explicitly named, the Variable will be given a name with the\n   * prefix 'Variable'. Variable names are unique. In the case of name\n   * collision, suffixies '_<num>' will be added to the name.\n   *\n   * @param val Initial value of the Variable.\n   * @param name Name of the variable. If `null` or `undefined` is provided, it\n   *   will default a name with the prefix 'Variable'.\n   * @param constraint Optional, projection function to be applied to the\n   * variable after optimize updates\n   * @throws ValueError if `name` is `null` or `undefined`.\n   */\n  constructor(\n      val: Tensor, dtype: DataType = 'float32',\n      name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true,\n      constraint: Constraint = null) {\n    this.dtype = dtype == null ? 'float32' : dtype;\n    this.shape = val.shape;\n    this.id = getNextUniqueTensorId();\n\n    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n    this.originalName = getScopedTensorName(name);\n    this.name = getUniqueTensorName(this.originalName);\n\n    this.trainable_ = trainable;\n    this.constraint = constraint;\n\n    this.val = tfc.variable(val, this.trainable_, this.name, this.dtype);\n  }\n\n  /**\n   * Get a snapshot of the Variable's value.\n   *\n   * The returned value is a snapshot of the Variable's value at the time of\n   * the invocation. Future mutations in the value of the tensor will only\n   * be reflected by future calls to this method.\n   */\n  read(): Tensor {\n    this.assertNotDisposed();\n    return this.val;\n  }\n\n  /**\n   * Update the value of the Variable.\n   *\n   * @param newVal: The new value to update to. Must be consistent with the\n   *   dtype and shape of the Variable.\n   * @return This Variable.\n   */\n  write(newVal: Tensor) {\n    // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\n    this.assertNotDisposed();\n    checkShapesMatch(this.val, newVal);\n    // Skip updating if this is the exact same tensor.\n    if (this.val.id !== newVal.id) {\n      this.val.assign(newVal);\n      if (this.constraint != null) {\n        this.val.assign(this.constraint.apply(this.val));\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Dispose this LayersVariable instance from memory.\n   */\n  dispose(): void {\n    this.assertNotDisposed();\n    this.val.dispose();\n  }\n\n  protected assertNotDisposed(): void {\n    if (this.val.isDisposed) {\n      throw new Error(`LayersVariable ${this.name} is already disposed.`);\n    }\n  }\n\n  get trainable(): boolean {\n    return this.trainable_;\n  }\n\n  set trainable(trainable: boolean) {\n    this.trainable_ = trainable;\n    this.val.trainable = trainable;\n  }\n}\n\nfunction checkShapesMatch(x: HasShape, y: HasShape): void {\n  if (x.shape.toString() !== y.shape.toString()) {\n    throw new Error(\n        'Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' +\n        JSON.stringify(y.shape));\n  }\n}\n\n/**\n * Create a Variable.\n * @param x The initial value of the `Variable`.\n * @param dtype optional, the type of the variable.\n * @param name optional, the name of the variable, default provided by\n * Variable.\n * @param constraint optional, a constraint to be applied after every update.\n * @return The newly instantiated `Variable`.\n */\nexport function variable(\n    x: Tensor, dtype?: DataType, name?: string,\n    constraint?: Constraint): LayerVariable {\n  return new LayerVariable(x, dtype, name, true, constraint);\n}\n\n/**\n * Instantiates an all-zeros Variable and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-zero Variable.\n */\nexport function zerosVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  return new LayerVariable(tfc.zeros(shape), dtype, name);\n}\n\n/**\n * Instantiates an all-zeros tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function zerosLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.zerosLike(x), dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-ones Variable.\n */\nexport function onesVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  const allocated = tfc.ones(shape);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function onesLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  const allocated = tfc.onesLike(x);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiate an identity matrix and returns it, as a Variable\n *\n * @param size Number of rows/columns.\n * @param dtype Data type of returned Variable.\n * @param name Name of returned Variable.\n * @return A Variable, an identity matrix.\n */\nexport function eyeVariable(\n    size: number, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.eye(size), dtype, name);\n}\n\n/**\n * Get a Variable with uniform distribution of values.\n * @param shape Shape of the tensor.\n * @param minval Lower bound of the uniform distribution.\n * @param maxval Upper bound of the uniform distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The uniform-random Variable.\n */\nexport function randomUniformVariable(\n    shape: Shape, minval: number, maxval: number, dtype?: DataType,\n    seed?: number, name = 'randomUniform'): LayerVariable {\n  return new LayerVariable(\n      tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\n}\n\n/**\n * Get a Variable with truncated-normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function truncatedNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'truncatedNormal'): LayerVariable {\n  // TODO(cais): Implement logic for dtype and seed once they are supported\n  // by deeplearn.js.\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormal does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Get a Variable with normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function randomNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'randomNormal'): LayerVariable {\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormalVariable does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n\n/**\n * Update the value of a Variable.\n * @param x The Variable to be updated.\n * @param xNew The new value to update to.\n * @return The Variable updated.\n */\nexport function update(x: LayerVariable, xNew: Tensor): LayerVariable {\n  return x.write(xNew);\n}\n\n/**\n * Update the value of a Variable by adding an increment.\n * @param x The Variable to be updated.\n * @param increment The incrment to add to `x`.\n * @return The Variable updated.\n */\nexport function updateAdd(x: LayerVariable, increment: Tensor): LayerVariable {\n  return x.write(tfc.add(x.read(), increment));\n}\n\n/**\n * Update the value of a Variable by subtracting a decrement.\n * @param x The Variable to be updated.\n * @param decrement The decrement to subtract from `x`.\n * @return The Variable updated.\n */\nexport function updateSub(x: LayerVariable, decrement: Tensor): LayerVariable {\n  return x.write(tfc.sub(x.read(), decrement));\n}\n\n/**\n * Get the values of an array of Variables.\n *\n * @param tensors An `Array` of `Variable`s to get the values of.\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\n */\nexport function batchGetValue(xs: LayerVariable[]): Tensor[] {\n  return xs.map(x => x.read());\n}\n\n/**\n * Update the value of multiple Variables at once.\n *\n * @param variablesAndValues An `Array`, each element is of type\n *   [Variable, Tensor]. The first item is the\n *   `Variable` of which the value is to be updated. The second item\n *   carries the new value.\n */\nexport function batchSetValue(\n    variablesAndValues: Array<[LayerVariable, Tensor]>): void {\n  variablesAndValues.forEach(variableAndValue => {\n    const variable: LayerVariable = variableAndValue[0];\n    variable.write(variableAndValue[1]);\n  });\n}\n\n/**\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\n * @param lossFn A function which returns a Scalar to be used as the function\n *   value (i.e., numerator) for differentiation.\n * @param variables List of variables to be used as the independent variables\n *   (i.e., denominator) for differentiation.\n * @returns An Array of gradients tensors.\n */\nexport function gradients(\n    lossFn: () => tfc.Scalar, variables: LayerVariable[]): Tensor[] {\n  // TODO(cais): The return type signature can be simplified if deeplearn makes\n  //   the corresponding type public.\n  const variableList =\n      variables.map(variable => variable.read() as tfc.Variable);\n  const valudAndGrads = variableGrads(lossFn, variableList);\n  return variables.map(variable => valudAndGrads.grads[variable.name]);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}