{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n  constructor(destSize) {\n    this.variableNames = ['source'];\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{\n      name: 'start',\n      arrayIndex: this.rank,\n      type: 'int'\n    }];\n    const sourceCoords = getCoords(this.rank);\n    let body;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/slice_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,iBAAR,QAA6C,mBAA7C;AAEA,OAAM,MAAO,YAAP,CAAmB;AAOvB,EAAA,WAAA,CAAY,QAAZ,EAA8B;AAN9B,SAAA,aAAA,GAAgB,CAAC,QAAD,CAAhB;AAOE,SAAK,WAAL,GAAmB,QAAnB;AACA,SAAK,IAAL,GAAY,QAAQ,CAAC,MAArB;AAEA,UAAM,KAAK,GAAG,iBAAiB,CAAC,KAAK,IAAN,CAA/B;AACA,SAAK,cAAL,GAAsB,CAAC;AAAC,MAAA,IAAI,EAAE,OAAP;AAAgB,MAAA,UAAU,EAAE,KAAK,IAAjC;AAAuC,MAAA,IAAI,EAAE;AAA7C,KAAD,CAAtB;AACA,UAAM,YAAY,GAAG,SAAS,CAAC,KAAK,IAAN,CAA9B;AAEA,QAAI,IAAJ;AACA,UAAM,QAAQ,GAAG,QAAQ,CAAC,GAAT,CAAa,CAAC,CAAD,EAAI,CAAJ,KAAS;AACrC,aAAO,aAAa,MAAM,CAAC,CAAD,CAAG,YAAY,CAAC,cAAc,MAAM,CAAC,CAAD,CAAG,GAAjE;AACD,KAFgB,CAAjB;AAGA,IAAA,IAAI,GAAG;UACD,KAAK;UACL,KAAK;UACL,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB;AACtB,OAJH;AAKA,SAAK,QAAL,GAAgB;;UAEV,IAAI;8BACgB,YAAY;;AAErC,KALD;AAMD;;AA9BsB;AAiCzB,MAAM,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAf;;AAEA,SAAS,SAAT,CAAmB,IAAnB,EAA+B;AAC7B,MAAI,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,WAAP;AACD,GAFD,MAEO,IAAI,IAAI,IAAI,CAAZ,EAAe;AACpB,WAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,IAAhB,EAAsB,GAAtB,CAA0B,CAAC,IAAI,eAAe,CAA9C,EAAiD,IAAjD,CAAsD,GAAtD,CAAP;AACD,GAFM,MAEA;AACL,UAAM,KAAK,CAAC,oBAAoB,IAAI,uBAAzB,CAAX;AACD;AACF","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}