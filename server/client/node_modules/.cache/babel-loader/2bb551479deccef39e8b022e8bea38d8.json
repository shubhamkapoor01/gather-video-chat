{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    equation\n  } = attrs;\n  const tensors = inputs;\n  const {\n    allDims,\n    summedDims,\n    idDims\n  } = backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {\n    path,\n    steps\n  } = backend_util.getEinsumComputePath(summedDims, idDims);\n  const nSteps = steps.length;\n  let out = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose = [];\n\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {\n        permutationIndices: perm,\n        expandDims: dimsToExpand\n      } = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x;\n\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({\n          inputs: {\n            x: tensors[idTerm]\n          },\n          backend,\n          attrs: {\n            perm\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n\n      const targetShape = x.shape.slice();\n\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({\n          inputs: {\n            x\n          },\n          backend,\n          attrs: {\n            shape: targetShape\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({\n          inputs: {\n            a: x,\n            b: out\n          },\n          backend\n        });\n        tensorsToDispose.push(out);\n      }\n    }\n\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {\n            x: out\n          },\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n\n      numDimsRemaining--;\n    }\n  } // Clean up intermediate tensors.\n\n\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\nexport const einsumConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Einsum.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}