{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n  constructor(outputShape, inputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'inputShape',\n      type: 'ivec3'\n    }];\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let mainLoop = ``;\n\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n\n}\n\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n  const coordsFromIndexSnippet = enableShapeUniforms ? shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') : shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/reshape_packed_gpu.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAsB,gBAAtB,QAA6C,cAA7C;AACA,OAAO,KAAK,WAAZ,MAA6B,wBAA7B;AAEA,OAAM,MAAO,oBAAP,CAA2B;AAS/B,EAAA,WAAA,CAAY,WAAZ,EAAmD,UAAnD,EAEC;AAVD,SAAA,aAAA,GAAgB,CAAC,GAAD,CAAhB;AACA,SAAA,YAAA,GAAe,IAAf;AACA,SAAA,YAAA,GAAe,IAAf;AAIA,SAAA,cAAA,GAAiB,CAAC;AAAC,MAAA,IAAI,EAAE,YAAP;AAAqB,MAAA,IAAI,EAAE;AAA3B,KAAD,CAAjB;AAKE,SAAK,WAAL,GAAmB,WAAnB;AACA,SAAK,mBAAL,GAA2B,gBAAgB,CAAC,KAAK,WAAL,CAAiB,MAAlB,CAA3C;AAEA,QAAI,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,CAApB,EAAuB,CAAC,EAAxB,EAA4B;AAC1B,UAAI,MAAM,GAAG,cAAb;;AACA,UAAI,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACf,QAAA,MAAM,IAAI,gBAAV;AACD;;AACD,UAAI,CAAC,GAAG,CAAR,EAAW;AACT,QAAA,MAAM,IAAI,gBAAV;AACD;;AAED,MAAA,QAAQ,IAAI;UACR,MAAM;UACN,CAAC,GAAG,CAAJ,GAAQ,yCAAR,GAAoD,EAAE;;;;;;mBAM7C,CAAC;;UAEV,CAAC,GAAG,CAAJ,GAAQ,GAAR,GAAc,EAAE;AACnB,OAXD;AAYD;;AAED,SAAK,QAAL,GAAgB;QACZ,sBAAsB,CAAC,UAAD,EAAa,KAAK,mBAAlB,CAAsC;QAE5D,KAAK,mBAAL,GAA2B,WAAW,CAAC,wBAAZ,EAA3B,GAC2B,WAAW,CAAC,kBAAZ,CAA+B,WAA/B,CAA2C;;;;;;;;qBAQzD,KAAK,mBAAL,GAA2B,aAA3B,GAA2C,WAAW,CAAC,CAAD,CAAG;qBACzD,KAAK,mBAAL,GAA2B,aAA3B,GAA2C,WAAW,CAAC,CAAD,CAAG;;UAEpE,QAAQ;;;;AAIb,KAnBD;AAoBD;;AA3D8B;;AA8DjC,SAAS,sBAAT,CACI,KADJ,EACqC,mBADrC,EACiE;AAC/D,QAAM,sBAAsB,GAAG,mBAAmB,GAC9C,WAAW,CAAC,2CAAZ,CACI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADJ,EACqB,YADrB,CAD8C,GAG9C,WAAW,CAAC,kCAAZ,CAA+C,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAA/C,EAAgE,KAAhE,CAHJ;AAKA,SAAO;;QAED,sBAAsB;;;AAG3B,GALD;AAMD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}