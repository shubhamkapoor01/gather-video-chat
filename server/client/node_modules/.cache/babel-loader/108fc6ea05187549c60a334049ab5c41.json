{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'ResizeBilinear':\n      {\n        const images = getParamValue('images', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n        const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n        return [tfOps.image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n      }\n\n    case 'ResizeNearestNeighbor':\n      {\n        const images = getParamValue('images', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n        const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n        return [tfOps.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n      }\n\n    case 'CropAndResize':\n      {\n        const image = getParamValue('image', node, tensorMap, context);\n        const boxes = getParamValue('boxes', node, tensorMap, context);\n        const boxInd = getParamValue('boxInd', node, tensorMap, context);\n        const cropSize = getParamValue('cropSize', node, tensorMap, context);\n        const method = getParamValue('method', node, tensorMap, context);\n        const extrapolationValue = getParamValue('extrapolationValue', node, tensorMap, context);\n        return [tfOps.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'image';","map":{"version":3,"sources":["../../../../../../../tfjs-converter/src/operations/executors/image_executor.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH;AACA,OAAO,KAAK,KAAZ,MAAuB,kDAAvB;AAMA,SAAQ,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAM,SAAS,GAClB,CAAC,IAAD,EAAa,SAAb,EACC,OADD,KACwC;AACtC,UAAQ,IAAI,CAAC,EAAb;AACE,SAAK,gBAAL;AAAuB;AACrB,cAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,IAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAGA,cAAM,gBAAgB,GAClB,aAAa,CAAC,kBAAD,EAAqB,IAArB,EAA2B,SAA3B,EAAsC,OAAtC,CADjB;AAGA,eAAO,CAAC,KAAK,CAAC,KAAN,CAAY,cAAZ,CACJ,MADI,EAC2B,CAAC,IAAI,CAAC,CAAD,CAAL,EAAU,IAAI,CAAC,CAAD,CAAd,CAD3B,EAC+C,YAD/C,EAEJ,gBAFI,CAAD,CAAP;AAGD;;AACD,SAAK,uBAAL;AAA8B;AAC5B,cAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,IAAI,GACN,aAAa,CAAC,MAAD,EAAS,IAAT,EAAe,SAAf,EAA0B,OAA1B,CADjB;AAEA,cAAM,YAAY,GACd,aAAa,CAAC,cAAD,EAAiB,IAAjB,EAAuB,SAAvB,EAAkC,OAAlC,CADjB;AAGA,cAAM,gBAAgB,GAClB,aAAa,CAAC,kBAAD,EAAqB,IAArB,EAA2B,SAA3B,EAAsC,OAAtC,CADjB;AAGA,eAAO,CAAC,KAAK,CAAC,KAAN,CAAY,qBAAZ,CACJ,MADI,EAC2B,CAAC,IAAI,CAAC,CAAD,CAAL,EAAU,IAAI,CAAC,CAAD,CAAd,CAD3B,EAC+C,YAD/C,EAEJ,gBAFI,CAAD,CAAP;AAGD;;AACD,SAAK,eAAL;AAAsB;AACpB,cAAM,KAAK,GACP,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;AAEA,cAAM,KAAK,GACP,aAAa,CAAC,OAAD,EAAU,IAAV,EAAgB,SAAhB,EAA2B,OAA3B,CADjB;AAEA,cAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,QAAQ,GACV,aAAa,CAAC,UAAD,EAAa,IAAb,EAAmB,SAAnB,EAA8B,OAA9B,CADjB;AAEA,cAAM,MAAM,GACR,aAAa,CAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EAA4B,OAA5B,CADjB;AAEA,cAAM,kBAAkB,GACpB,aAAa,CAAC,oBAAD,EAAuB,IAAvB,EAA6B,SAA7B,EAAwC,OAAxC,CADjB;AAGA,eAAO,CAAC,KAAK,CAAC,KAAN,CAAY,aAAZ,CACJ,KADI,EACe,KADf,EACkC,MADlC,EAEJ,QAFI,EAE0B,MAF1B,EAGJ,kBAHI,CAAD,CAAP;AAID;;AACD;AACE,YAAM,SAAS,CAAC,aAAa,IAAI,CAAC,EAAE,qBAArB,CAAf;AAnDJ;AAqDD,CAxDE;AA0DP,OAAO,MAAM,QAAQ,GAAG,OAAjB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ResizeBilinear': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeBilinear(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeNearestNeighbor(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n          const image =\n              getParamValue('image', node, tensorMap, context) as Tensor;\n          const boxes =\n              getParamValue('boxes', node, tensorMap, context) as Tensor;\n          const boxInd =\n              getParamValue('boxInd', node, tensorMap, context) as Tensor;\n          const cropSize =\n              getParamValue('cropSize', node, tensorMap, context) as number[];\n          const method =\n              getParamValue('method', node, tensorMap, context) as string;\n          const extrapolationValue =\n              getParamValue('extrapolationValue', node, tensorMap, context) as\n              number;\n          return [tfOps.image.cropAndResize(\n              image as Tensor4D, boxes as Tensor2D, boxInd as Tensor1D,\n              cropSize as [number, number], method as 'bilinear' | 'nearest',\n              extrapolationValue)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'image';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}