{"ast":null,"code":"import { reshape } from './reshape';\nexport function xAs4D(x) {\n  let x4D;\n\n  if (x.rank === 0 || x.rank === 1) {\n    x4D = reshape(x, [1, 1, 1, x.size]);\n  } else if (x.rank === 2) {\n    x4D = reshape(x, [1, 1, x.shape[0], x.shape[1]]);\n  } else if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  } else {\n    x4D = x;\n  }\n\n  return x4D;\n}","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/batchnorm_util.ts"],"names":[],"mappings":"AAkBA,SAAQ,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAU,KAAV,CAAgC,CAAhC,EAA4C;AAChD,MAAI,GAAJ;;AACA,MAAI,CAAC,CAAC,IAAF,KAAW,CAAX,IAAgB,CAAC,CAAC,IAAF,KAAW,CAA/B,EAAkC;AAChC,IAAA,GAAG,GAAG,OAAO,CAAC,CAAD,EAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAC,CAAC,IAAZ,CAAJ,CAAb;AACD,GAFD,MAEO,IAAI,CAAC,CAAC,IAAF,KAAW,CAAf,EAAkB;AACvB,IAAA,GAAG,GAAG,OAAO,CAAC,CAAD,EAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAP,EAAmB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAnB,CAAJ,CAAb;AACD,GAFM,MAEA,IAAI,CAAC,CAAC,IAAF,KAAW,CAAf,EAAkB;AACvB,IAAA,GAAG,GAAG,OAAO,CAAC,CAAD,EAAI,CAAC,CAAD,EAAI,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAJ,EAAgB,CAAC,CAAC,KAAF,CAAQ,CAAR,CAAhB,EAA4B,CAAC,CAAC,KAAF,CAAQ,CAAR,CAA5B,CAAJ,CAAb;AACD,GAFM,MAEA;AACL,IAAA,GAAG,GAAG,CAAN;AACD;;AAED,SAAO,GAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor, Tensor4D} from '../tensor';\nimport {Rank} from '../types';\nimport {reshape} from './reshape';\n\nexport function xAs4D<R extends Rank>(x: Tensor<R>) {\n  let x4D: Tensor4D;\n  if (x.rank === 0 || x.rank === 1) {\n    x4D = reshape(x, [1, 1, 1, x.size]);\n  } else if (x.rank === 2) {\n    x4D = reshape(x, [1, 1, x.shape[0], x.shape[1]]);\n  } else if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  } else {\n    x4D = x as Tensor4D;\n  }\n\n  return x4D;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}