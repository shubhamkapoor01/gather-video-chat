{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { matMul } from './mat_mul';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the outer product of two vectors, `v1` and `v2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([3, 4, 5]);\n *\n * tf.outerProduct(a, b).print();\n * ```\n * @param v1 The first vector in the outer product operation.\n * @param v2 The second vector in the outer product operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction outerProduct_(v1, v2) {\n  const $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n  const $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n  util.assert($v1.rank === 1 && $v2.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ` + `${$v1.rank} and ${$v2.rank}.`);\n  const v12D = reshape($v1, [-1, 1]);\n  const v22D = reshape($v2, [1, -1]);\n  return matMul(v12D, v22D);\n}\n\nexport const outerProduct = op({\n  outerProduct_\n});","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/outer_product.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,MAAR,QAAqB,WAArB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;AAaG;;AACH,SAAS,aAAT,CACI,EADJ,EAC6B,EAD7B,EACoD;AAClD,QAAM,GAAG,GAAG,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,cAAX,CAA3B;AACA,QAAM,GAAG,GAAG,eAAe,CAAC,EAAD,EAAK,IAAL,EAAW,cAAX,CAA3B;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,GAAG,CAAC,IAAJ,KAAa,CAAb,IAAkB,GAAG,CAAC,IAAJ,KAAa,CADnC,EAEI,MAAM,8DAAA,GACF,GAAG,GAAG,CAAC,IAAI,QAAQ,GAAG,CAAC,IAAI,GAHnC;AAKA,QAAM,IAAI,GAAG,OAAO,CAAC,GAAD,EAAM,CAAC,CAAC,CAAF,EAAK,CAAL,CAAN,CAApB;AACA,QAAM,IAAI,GAAG,OAAO,CAAC,GAAD,EAAM,CAAC,CAAD,EAAI,CAAC,CAAL,CAAN,CAApB;AACA,SAAO,MAAM,CAAC,IAAD,EAAO,IAAP,CAAb;AACD;;AAED,OAAO,MAAM,YAAY,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAvB","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {matMul} from './mat_mul';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the outer product of two vectors, `v1` and `v2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n * const b = tf.tensor1d([3, 4, 5]);\n *\n * tf.outerProduct(a, b).print();\n * ```\n * @param v1 The first vector in the outer product operation.\n * @param v2 The second vector in the outer product operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction outerProduct_(\n    v1: Tensor1D|TensorLike, v2: Tensor1D|TensorLike): Tensor2D {\n  const $v1 = convertToTensor(v1, 'v1', 'outerProduct');\n  const $v2 = convertToTensor(v2, 'v2', 'outerProduct');\n\n  util.assert(\n      $v1.rank === 1 && $v2.rank === 1,\n      () => `Error in outerProduct: inputs must be rank 1, but got ranks ` +\n          `${$v1.rank} and ${$v2.rank}.`);\n\n  const v12D = reshape($v1, [-1, 1]);\n  const v22D = reshape($v2, [1, -1]);\n  return matMul(v12D, v22D);\n}\n\nexport const outerProduct = op({outerProduct_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}