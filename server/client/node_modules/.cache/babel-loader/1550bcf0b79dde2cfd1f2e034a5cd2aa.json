{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long'; // tslint:disable-next-line\n\nconst Long = // tslint:disable-next-line\nLongExports.default || LongExports;\nexport function hexToLong(hex) {\n  return Long.fromString(hex, true, 16);\n} // Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\n\nconst k0 = hexToLong('c3a5c85c97cb3127'); // Hex 0xb492b66fbe98f273\n\nconst k1 = hexToLong('b492b66fbe98f273'); // Hex 0x9ae16a3b2f90404f\n\nconst k2 = hexToLong('9ae16a3b2f90404f');\n\nfunction shiftMix(val) {\n  return val.xor(val.shru(47));\n}\n\nfunction fetch(s, offset, numBytes) {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\n\nfunction fetch64(s, offset) {\n  return fetch(s, offset, 8);\n}\n\nfunction fetch32(s, offset) {\n  return fetch(s, offset, 4);\n}\n\nfunction rotate64(val, shift) {\n  // Avoid shifting by 64: doing so yields an undefined result.\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\n\nfunction hashLen16(u, v, mul = hexToLong('9ddfea08eb382d69')) {\n  // Murmur-inspired hashing.\n  let a = u.xor(v).mul(mul);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul);\n  return b;\n} // Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\n\n\nfunction weakHashLen32WithSeeds(w, x, y, z, a, b) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\n\nfunction weakHashLen32WithSeedsStr(s, offset, a, b) {\n  return weakHashLen32WithSeeds(fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16), fetch64(s, offset + 24), a, b);\n}\n\nfunction hashLen0to16(s, len = s.length) {\n  if (len >= 8) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul);\n    return hashLen16(c, d, mul);\n  }\n\n  if (len >= 4) {\n    const mul = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n  }\n\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n\n  return k2;\n}\n\nfunction hashLen17to32(s, len = s.length) {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d), a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\n\nfunction hashLen33to64(s, len = s.length) {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n  const e = fetch64(s, 16).mul(mul);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul);\n  const h = z.add(fetch64(s, len - 24)).mul(mul);\n  return hashLen16(rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h), e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\n\nexport function fingerPrint64(s, len = s.length) {\n  const seed = Long.fromNumber(81, true);\n\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  } // For strings over 64 bytes we loop.  Internal state consists of\n  // 56 bytes: v, w, x, y, and z.\n\n\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n  let offset = 0; // Set end so that after the loop we have 1 to 64 bytes left to process.\n\n  const end = (len - 1 >> 6) * 64;\n  const last64 = end + (len - 1 & 63) - 63;\n\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n\n  const mul = k1.add(z.and(0xff).shl(1)); // Point to the last 64 bytes of input.\n\n  offset = last64;\n  w[0] = w[0].add(len - 1 & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n  [z, x] = [x, z];\n  return hashLen16(hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z), hashLen16(v[1], w[1], mul).add(x), mul);\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/hash_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long';\n// tslint:disable-next-line\nconst Long: LongExports.LongConstructor =\n    // tslint:disable-next-line\n    (LongExports as any).default || LongExports;\n\nexport function hexToLong(hex: string): Long {\n  return Long.fromString(hex, true, 16);\n}\n\n// Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\nconst k0: Long = hexToLong('c3a5c85c97cb3127');\n// Hex 0xb492b66fbe98f273\nconst k1: Long = hexToLong('b492b66fbe98f273');\n// Hex 0x9ae16a3b2f90404f\nconst k2: Long = hexToLong('9ae16a3b2f90404f');\n\nfunction shiftMix(val: Long): Long {\n  return val.xor(val.shru(47));\n}\n\nfunction fetch(s: Uint8Array, offset: number, numBytes: number): Long {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\n\nfunction fetch64(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 8);\n}\n\nfunction fetch32(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 4);\n}\n\nfunction rotate64(val: Long, shift: number): Long {\n  // Avoid shifting by 64: doing so yields an undefined result.\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\n\nfunction hashLen16(u: Long, v: Long, mul = hexToLong('9ddfea08eb382d69')) {\n  // Murmur-inspired hashing.\n  let a = u.xor(v).mul(mul);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul);\n  return b;\n}\n\n// Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\nfunction weakHashLen32WithSeeds(\n    w: Long, x: Long, y: Long, z: Long, a: Long, b: Long) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\n\nfunction weakHashLen32WithSeedsStr(\n    s: Uint8Array, offset: number, a: Long, b: Long) {\n  return weakHashLen32WithSeeds(\n      fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16),\n      fetch64(s, offset + 24), a, b);\n}\n\nfunction hashLen0to16(s: Uint8Array, len = s.length): Long {\n  if (len >= 8) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul);\n    return hashLen16(c, d, mul);\n  }\n  if (len >= 4) {\n    const mul = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n  }\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n  return k2;\n}\n\nfunction hashLen17to32(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(\n      rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d),\n      a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\n\nfunction hashLen33to64(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n  const e = fetch64(s, 16).mul(mul);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul);\n  const h = z.add(fetch64(s, len - 24)).mul(mul);\n  return hashLen16(\n      rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h),\n      e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\n\nexport function fingerPrint64(s: Uint8Array, len = s.length): Long {\n  const seed: Long = Long.fromNumber(81, true);\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  }\n\n  // For strings over 64 bytes we loop.  Internal state consists of\n  // 56 bytes: v, w, x, y, and z.\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n\n  let offset = 0;\n  // Set end so that after the loop we have 1 to 64 bytes left to process.\n  const end = ((len - 1) >> 6) * 64;\n  const last64 = end + ((len - 1) & 63) - 63;\n\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(\n        s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n  const mul = k1.add(z.and(0xff).shl(1));\n  // Point to the last 64 bytes of input.\n  offset = last64;\n\n  w[0] = w[0].add((len - 1) & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(\n      s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n  [z, x] = [x, z];\n\n  return hashLen16(\n      hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z),\n      hashLen16(v[1], w[1], mul).add(x), mul);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}