{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\n// tslint:disable-next-line:max-line-length\nimport { MaxNorm, MinMaxNorm, NonNeg, UnitNorm } from './constraints';\n/**\r\n * MaxNorm weight constraint.\r\n *\r\n * Constrains the weights incident to each hidden unit\r\n * to have a norm less than or equal to a desired value.\r\n *\r\n * References\r\n *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\r\n * Srivastava, Hinton, et al.\r\n * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\r\n *\r\n * @doc {heading: 'Constraints',namespace: 'constraints'}\r\n */\n\nexport function maxNorm(args) {\n  return new MaxNorm(args);\n}\n/**\r\n * Constrains the weights incident to each hidden unit to have unit norm.\r\n *\r\n * @doc {heading: 'Constraints', namespace: 'constraints'}\r\n */\n\nexport function unitNorm(args) {\n  return new UnitNorm(args);\n}\n/**\r\n * Constains the weight to be non-negative.\r\n *\r\n * @doc {heading: 'Constraints', namespace: 'constraints'}\r\n */\n\nexport function nonNeg() {\n  return new NonNeg();\n}\n/** @doc {heading: 'Constraints', namespace: 'constraints'} */\n\nexport function minMaxNorm(config) {\n  return new MinMaxNorm(config);\n}","map":{"version":3,"sources":["../../../../../tfjs-layers/src/exports_constraints.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQG;AACH;AACA,SAAoB,OAApB,EAA0C,UAA1C,EAAsE,MAAtE,EAA8E,QAA9E,QAA2G,eAA3G;AAEA;;;;;;;;;;;;AAYG;;AACH,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAAmC;AACvC,SAAO,IAAI,OAAJ,CAAY,IAAZ,CAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,QAAV,CAAmB,IAAnB,EAAqC;AACzC,SAAO,IAAI,QAAJ,CAAa,IAAb,CAAP;AACD;AAED;;;;AAIG;;AACH,OAAM,SAAU,MAAV,GAAgB;AACpB,SAAO,IAAI,MAAJ,EAAP;AACD;AAED;;AACA,OAAM,SAAU,UAAV,CAAqB,MAArB,EAA2C;AAC/C,SAAO,IAAI,UAAJ,CAAe,MAAf,CAAP;AACD","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport {Constraint, MaxNorm, MaxNormArgs, MinMaxNorm, MinMaxNormArgs, NonNeg, UnitNorm, UnitNormArgs} from './constraints';\n\n/**\n * MaxNorm weight constraint.\n *\n * Constrains the weights incident to each hidden unit\n * to have a norm less than or equal to a desired value.\n *\n * References\n *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\n * Srivastava, Hinton, et al.\n * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\n *\n * @doc {heading: 'Constraints',namespace: 'constraints'}\n */\nexport function maxNorm(args: MaxNormArgs): Constraint {\n  return new MaxNorm(args);\n}\n\n/**\n * Constrains the weights incident to each hidden unit to have unit norm.\n *\n * @doc {heading: 'Constraints', namespace: 'constraints'}\n */\nexport function unitNorm(args: UnitNormArgs): Constraint {\n  return new UnitNorm(args);\n}\n\n/**\n * Constains the weight to be non-negative.\n *\n * @doc {heading: 'Constraints', namespace: 'constraints'}\n */\nexport function nonNeg(): Constraint {\n  return new NonNeg();\n}\n\n/** @doc {heading: 'Constraints', namespace: 'constraints'} */\nexport function minMaxNorm(config: MinMaxNormArgs): Constraint {\n  return new MinMaxNorm(config);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}