{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\r\n * This file contains WebGL-specific flag registrations.\r\n */\n\n/**\r\n * True if WebGL is supported.\r\n */\n\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\n\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n\n  return 0;\n});\n/** Whether to check for numerical representation problems. */\n\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\n\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\n\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\n\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\n\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\n\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\n\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack binary ops. */\n\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\n\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\n\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\n\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\n\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\n\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\n\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\n\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\n\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\r\n * The disjoint_query_timer extension version.\r\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\r\n * EXT_disjoint_timer_query_webgl2.\r\n * In Firefox with WebGL 2.0,\r\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\r\n * WebGL 1.0 extension.\r\n */\n\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\r\n * Whether the timer object from the disjoint_query_timer extension gives\r\n * timing information that is reliable.\r\n */\n\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !device_util.isMobile());\n/**\r\n * Whether the device is physically capable of rendering to float32 textures.\r\n */\n\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\r\n * Whether rendering to float32 textures is enabled. If disabled, renders to\r\n * float16 textures.\r\n */\n\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ? false : ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\r\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\r\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\r\n */\n\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\n\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\r\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\r\n */\n\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n/**\r\n * If the total number of bytes allocated on the GPU is greater than this\r\n * number, we will aggressively delete textures upon disposal with\r\n * gl.deleteMatrixTexture, rather than making them available for reuse.\r\n *\r\n * Default value -1 indicates that we will never aggressively delete textures.\r\n */\n\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n  return -1;\n}, threshold => {\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` + `delete) or at least 0, but got ${threshold}.`);\n  }\n});\n/**\r\n * Trigger a manual GL command flush if the threshold of time has passed since\r\n * previous Kernel execution. This can be useful for Andorid device where GL\r\n * command flush are delayed un til the end of javascript task. This value is\r\n * measured in millisecond. Typically you want to set this value to close to 1.\r\n *\r\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\r\n * we will not enforce manual flush and depend on system default flush schedule.\r\n */\n\nENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {\n  return device_util.isMobile() ? 1 : -1;\n}, threshold => {\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` + `manual flush) or at least 0, but got ${threshold}.`);\n  }\n});\n/**\r\n * Threshold for input tensor size that determines whether WebGL backend will\r\n * delegate computation to CPU.\r\n *\r\n * Default value is 128.\r\n */\n\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n/** Whether we will use shapes uniforms. */\n\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n/**\r\n * Threshold for last dimension of input tensor that determines whether\r\n * WebGL backend for the Top K op will delegate computation to CPU. If input\r\n * is smaller than threshold then CPU will be used\r\n *\r\n * Default value is 100000.\r\n */\n\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n/**\r\n * Threshold for K that determines whether\r\n * WebGL backend for the Top K op will delegate computation to CPU. If k\r\n * is larger than threshold then CPU will be used\r\n *\r\n * Default value is 128.\r\n */\n\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/flags_webgl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}