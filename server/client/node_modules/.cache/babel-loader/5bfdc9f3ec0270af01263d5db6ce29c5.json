{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 4D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\n\nfunction batchNorm4d_(x, mean, variance, offset, scale, varianceEpsilon) {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale;\n\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n\n  let $offset;\n\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n\n  util.assert($x.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ` + `${$x.rank}.`);\n  util.assert($mean.rank === 4 || $mean.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` + `got rank ${$mean.rank}.`);\n  util.assert($variance.rank === 4 || $variance.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` + `but got rank ${$variance.rank}.`);\n\n  if ($scale != null) {\n    util.assert($scale.rank === 4 || $scale.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` + `but got rank ${$scale.rank}.`);\n  }\n\n  if ($offset != null) {\n    util.assert($offset.rank === 4 || $offset.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` + `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm4d = op({\n  batchNorm4d_\n});","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/batchnorm4d.ts"],"names":[],"mappings":"AAiBA,SAAQ,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,SAAtB;AAEA,SAAQ,SAAR,QAAwB,aAAxB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;AAUG;;AACH,SAAS,YAAT,CACI,CADJ,EAC4B,IAD5B,EAEI,QAFJ,EAGI,MAHJ,EAG2C,KAH3C,EAII,eAJJ,EAI4B;AAC1B,QAAM,EAAE,GAAG,eAAe,CAAC,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;AACA,QAAM,KAAK,GAAG,eAAe,CAAC,IAAD,EAAO,MAAP,EAAe,WAAf,CAA7B;AACA,QAAM,SAAS,GAAG,eAAe,CAAC,QAAD,EAAW,UAAX,EAAuB,WAAvB,CAAjC;AACA,MAAI,MAAJ;;AACA,MAAI,KAAK,IAAI,IAAb,EAAmB;AACjB,IAAA,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,WAAjB,CAAxB;AACD;;AACD,MAAI,OAAJ;;AACA,MAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,IAAA,OAAO,GAAG,eAAe,CAAC,MAAD,EAAS,QAAT,EAAmB,WAAnB,CAAzB;AACD;;AACD,EAAA,IAAI,CAAC,MAAL,CACI,EAAE,CAAC,IAAH,KAAY,CADhB,EAEI,MAAM,sDAAA,GACF,GAAG,EAAE,CAAC,IAAI,GAHlB;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,KAAK,CAAC,IAAN,KAAe,CAAf,IAAoB,KAAK,CAAC,IAAN,KAAe,CADvC,EAEI,MAAM,0DAAA,GACF,YAAY,KAAK,CAAC,IAAI,GAH9B;AAIA,EAAA,IAAI,CAAC,MAAL,CACI,SAAS,CAAC,IAAV,KAAmB,CAAnB,IAAwB,SAAS,CAAC,IAAV,KAAmB,CAD/C,EAEI,MAAM,0DAAA,GACF,gBAAgB,SAAS,CAAC,IAAI,GAHtC;;AAIA,MAAI,MAAM,IAAI,IAAd,EAAoB;AAClB,IAAA,IAAI,CAAC,MAAL,CACI,MAAM,CAAC,IAAP,KAAgB,CAAhB,IAAqB,MAAM,CAAC,IAAP,KAAgB,CADzC,EAEI,MAAM,uDAAA,GACF,gBAAgB,MAAM,CAAC,IAAI,GAHnC;AAID;;AACD,MAAI,OAAO,IAAI,IAAf,EAAqB;AACnB,IAAA,IAAI,CAAC,MAAL,CACI,OAAO,CAAC,IAAR,KAAiB,CAAjB,IAAsB,OAAO,CAAC,IAAR,KAAiB,CAD3C,EAEI,MAAM,wDAAA,GACF,gBAAgB,OAAO,CAAC,IAAI,GAHpC;AAID;;AACD,SAAO,SAAS,CAAC,EAAD,EAAK,KAAL,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,MAAhC,EAAwC,eAAxC,CAAhB;AACD;;AAED,OAAO,MAAM,WAAW,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAtB","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {batchNorm} from './batchnorm';\nimport {op} from './operation';\n\n/**\n * Batch normalization, strictly for 4D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm4d_(\n    x: Tensor4D|TensorLike, mean: Tensor4D|Tensor1D|TensorLike,\n    variance: Tensor4D|Tensor1D|TensorLike,\n    offset?: Tensor4D|Tensor1D|TensorLike, scale?: Tensor4D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor4D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor4D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor4D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 4,\n      () => `Error in batchNorm4D: x must be rank 4 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 4 || $mean.rank === 1,\n      () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 4 || $variance.rank === 1,\n      () => `Error in batchNorm4D: variance must be rank 4 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 4 || $scale.rank === 1,\n        () => `Error in batchNorm4D: scale must be rank 4 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 4 || $offset.rank === 1,\n        () => `Error in batchNorm4D: offset must be rank 4 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm4d = op({batchNorm4d_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}