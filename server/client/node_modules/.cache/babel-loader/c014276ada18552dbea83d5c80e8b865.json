{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\n\n/**\r\n * Normalization layers.\r\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { moments, reshape, serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\r\n * Applies batch normalization on x given mean, var, beta and gamma.\r\n *\r\n * I.e. returns:\r\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\r\n *\r\n * @param x Input tensor.\r\n * @param mean Mean of batch.\r\n * @param variance Variance of batch.\r\n * @param beta Tensor with which to center the input.\r\n * @param gamma Tensor by which to scale the input.\r\n * @param epsilon Fuzz factor.\r\n * @returns The result of the batch normalization.\r\n */\n\nexport function batchNormalization(x, mean, variance, beta, gamma, epsilon = 1e-3) {\n  let out;\n\n  if (x.rank === 2) {\n    out = tfc.batchNorm2d(x, mean, variance, beta, gamma, epsilon);\n  } else if (x.rank === 3) {\n    // TODO(cais): Check rank; give proper error message.\n    out = tfc.batchNorm3d(x, mean, variance, beta, gamma, epsilon);\n  } else if (x.rank === 4) {\n    out = tfc.batchNorm4d(x, mean, variance, beta, gamma, epsilon);\n  } else {\n    throw new NotImplementedError(`batchNormalization is not implemented for array of rank ${x.rank} ` + `yet`);\n  }\n\n  return out;\n}\n/**\r\n * Non-broadcasting batch normalization for use in training (not inference).\r\n *\r\n * The input is normalized to zero mean and unit variance along the\r\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\r\n * The result of that is returned as the first element\r\n * of the returned `Array`. The other two elements are the mean and variance,\r\n * respectively.\r\n *\r\n * @param x Input tensor to be normalized.\r\n * @param gamma Tensor by which to scale the input.\r\n * @param beta Tensor by which to center the input.\r\n * @param reductionAxes Axes over which to normalize.\r\n * @param epsilon Fuzz factor.\r\n * @returns An `Array` of three `Tensors`:\r\n *   [normalized tensor, mean of input, variance of input].\r\n */\n\nfunction regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n  return tidy(() => {\n    const meanAndVariance = tfc.moments(x, reductionAxes);\n    const mean = meanAndVariance.mean;\n    const variance = meanAndVariance.variance;\n    const normed = batchNormalization(x, mean, variance, beta, gamma, epsilon);\n    return [normed, mean, variance];\n  });\n}\n/**\r\n * Broadcasting batch normalization for use in training (not inference).\r\n *\r\n * The input is normalized to zero mean and unit variance along the\r\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\r\n * The result of that is returned as the first element\r\n * of the returned `Array`. The other two elements are the mean and variance,\r\n * respectively.\r\n *\r\n * @param x Input tensor to be normalized.\r\n * @param gamma Tensor by which to scale the input.\r\n * @param beta Tensor by which to center the input.\r\n * @param reductionAxes Axes over which to normalize.\r\n * @param epsilon Fuzz factor.\r\n * @returns An `Array` of three `Tensors`:\r\n *   [normalized tensor, mean of input, variance of input].\r\n */\n\n\nfunction broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n  return tidy(() => {\n    const meanAndVariance = tfc.moments(x, reductionAxes);\n    const mean = meanAndVariance.mean;\n    const variance = meanAndVariance.variance;\n    const targetShape = [];\n\n    for (const axis of math_utils.range(0, x.rank)) {\n      if (reductionAxes.indexOf(axis) !== -1) {\n        targetShape.push(1);\n      } else {\n        targetShape.push(x.shape[axis]);\n      }\n    }\n\n    const broadcastMean = reshape(mean, targetShape);\n    const broadcastVariance = reshape(variance, targetShape);\n    const broadcastGamma = gamma == null ? null : reshape(gamma, targetShape);\n    const broadcastBeta = beta == null ? null : reshape(beta, targetShape);\n    const normed = batchNormalization(x, broadcastMean, broadcastVariance, broadcastBeta, broadcastGamma, epsilon);\n    return [normed, mean, variance];\n  });\n}\n/**\r\n * Batch normalization for use in training (not inference).\r\n *\r\n * @param x Input tensor to be normalized.\r\n * @param gamma Tensor by which to scale the input.\r\n * @param beta Tensor by which to center the input.\r\n * @param reductionAxes Axes over which to normalize.\r\n * @param epsilon Fuzz factor.\r\n * @returns An `Array` of three `Tensors`:\r\n *   [normalized tensor, mean of input, variance of input].\r\n */\n\n\nexport function normalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon = 1e-3) {\n  if (util.arraysEqual(reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n  } else {\n    return broadcastNormalizeBatchInTraining(x, gamma, beta, reductionAxes, epsilon);\n  }\n}\nexport class BatchNormalization extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n\n    super(args);\n    this.supportsMasking = true;\n    this.axis = args.axis == null ? -1 : args.axis;\n    this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.movingMeanInitializer = getInitializer(args.movingMeanInitializer || 'zeros');\n    this.movingVarianceInitializer = getInitializer(args.movingVarianceInitializer || 'ones');\n    this.betaConstraint = getConstraint(args.betaConstraint);\n    this.gammaConstraint = getConstraint(args.gammaConstraint);\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const axis = this.axis >= 0 ? this.axis : this.axis + inputShape.length;\n    const dim = inputShape[axis];\n\n    if (dim == null) {\n      throw new ValueError(`Axis ${axis} of input tensor should have a defined dimension but ` + `the layer received an input with shape ` + `${JSON.stringify(inputShape)}.`);\n    }\n\n    this.inputSpec = [new InputSpec({\n      ndim: inputShape.length,\n      axes: {\n        [axis]: dim\n      }\n    })];\n    const shape = [dim];\n\n    if (this.scale) {\n      this.gamma = this.addWeight('gamma', shape, null, this.gammaInitializer, this.gammaRegularizer, true, this.gammaConstraint);\n    }\n\n    if (this.center) {\n      this.beta = this.addWeight('beta', shape, null, this.betaInitializer, this.betaRegularizer, true, this.betaConstraint);\n    }\n\n    this.movingMean = this.addWeight('moving_mean', shape, null, this.movingMeanInitializer, null, false);\n    this.movingVariance = this.addWeight('moving_variance', shape, null, this.movingVarianceInitializer, null, false);\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const ndim = inputShape.length;\n      const reductionAxes = math_utils.range(0, ndim);\n      const axis = this.axis >= 0 ? this.axis : this.axis + ndim;\n      reductionAxes.splice(axis, 1);\n      const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n      broadcastShape[axis] = inputShape[axis];\n      const sortedReductionAxes = reductionAxes.slice();\n      sortedReductionAxes.sort();\n      const needsBroadcasting = !util.arraysEqual(sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n\n      const normalizeInference = () => {\n        if (needsBroadcasting) {\n          const broadcastMovingMean = reshape(this.movingMean.read(), broadcastShape);\n          const broadcastMovingVariance = reshape(this.movingVariance.read(), broadcastShape);\n          const broadcastBeta = this.center ? reshape(this.beta.read(), broadcastShape) : null;\n          const broadcastGamma = this.scale ? reshape(this.gamma.read(), broadcastShape) : null;\n          return batchNormalization(input, broadcastMovingMean, broadcastMovingVariance, broadcastBeta, broadcastGamma, this.epsilon);\n        } else {\n          return batchNormalization(input, this.movingMean.read(), this.movingVariance.read(), this.beta == null ? null : this.beta.read(), this.gamma == null ? null : this.gamma.read(), this.epsilon);\n        }\n      };\n\n      if (!training) {\n        return normalizeInference();\n      }\n\n      const [normedTraining, mean, variance] = normalizeBatchInTraining(input, this.gamma.read(), this.beta.read(), reductionAxes, this.epsilon);\n\n      const doMovingAverage = (variable, value, momentum) => {\n        tfc.tidy(() => {\n          const decay = 1 - momentum;\n          const origValue = variable.read();\n          const updateDelta = tfc.mul(tfc.sub(origValue, value), decay);\n          variable.write(tfc.sub(origValue, updateDelta));\n        });\n      }; // Perform updates to moving mean and moving variance for training.\n      // Porting Note: In PyKeras, these updates to `movingMean` and\n      //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n      //   `update`s using the `add_update()` method. Here we do it imperatively\n      //   and encapsulate the updates in a function that is invoked\n      //   immediately.\n\n\n      const updateMovingMeanAndVariance = () => {\n        doMovingAverage(this.movingMean, mean, this.momentum);\n        doMovingAverage(this.movingVariance, variance, this.momentum);\n      };\n\n      updateMovingMeanAndVariance();\n      return normedTraining;\n    });\n  }\n\n  getConfig() {\n    const config = {\n      axis: this.axis,\n      momentum: this.momentum,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n      movingVarianceInitializer: serializeInitializer(this.movingVarianceInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n      betaConstraint: serializeConstraint(this.betaConstraint),\n      gammaConstraint: serializeConstraint(this.gammaConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nBatchNormalization.className = 'BatchNormalization';\nserialization.registerClass(BatchNormalization);\nexport class LayerNormalization extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n\n    super(args);\n    this.axis = args.axis == null ? -1 : args.axis;\n\n    if (typeof this.axis === 'number') {\n      if (!Number.isInteger(this.axis)) {\n        throw new Error(`Expected axis to be an integer, but received ${this.axis}`);\n      }\n    } else if (Array.isArray(this.axis)) {\n      for (const axis of this.axis) {\n        if (!Number.isInteger(axis)) {\n          throw new Error(`Expected axis to be an array of integers, ` + `but received ${JSON.stringify(this.axis)}`);\n        }\n      }\n    } else {\n      throw new Error(`Expected axis to be an integer or an array of integers, ` + `but received ${JSON.stringify(this.axis)}`);\n    }\n\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n    this.supportsMasking = true;\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const nDims = inputShape.length; // Convert axis to array and resolve negatives.\n\n    if (typeof this.axis === 'number') {\n      this.axis = [this.axis];\n    }\n\n    for (let i = 0; i < this.axis.length; ++i) {\n      if (this.axis[i] < 0) {\n        this.axis[i] += nDims;\n      }\n    } // Further validate axes.\n\n\n    for (const axis of this.axis) {\n      if (axis < 0 || axis >= nDims) {\n        throw new Error(`Invalid axis: ${axis}`);\n      }\n    }\n\n    if (this.axis.length !== generic_utils.unique(this.axis).length) {\n      throw new Error(`Found duplicate axes in: ${this.axis}`);\n    }\n\n    const paramShape = this.axis.map(axis => inputShape[axis]);\n    const trainable = true;\n\n    if (this.scale) {\n      this.gamma = this.addWeight('gamma', paramShape, 'float32', this.gammaInitializer, this.gammaRegularizer, trainable);\n    } else {\n      this.gamma = null;\n    }\n\n    if (this.center) {\n      this.beta = this.addWeight('beta', paramShape, 'float32', this.betaInitializer, this.betaRegularizer, trainable);\n    } else {\n      this.beta = null;\n    }\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    const input = getExactlyOneTensor(inputs);\n    const inputShape = input.shape;\n    const nDims = inputShape.length;\n    return tidy(() => {\n      const keepDims = true;\n      let {\n        mean,\n        variance\n      } = moments(input, this.axis, keepDims);\n      const broadcastShape = generic_utils.pyListRepeat(1, nDims);\n\n      for (const dim of this.axis) {\n        broadcastShape[dim] = inputShape[dim];\n      }\n\n      const broadcast = v => {\n        if (v != null && v.shape.length !== nDims) {\n          return tfc.reshape(v, broadcastShape);\n        } else {\n          return v;\n        }\n      };\n\n      let scale = broadcast(this.gamma.read());\n      let offset = broadcast(this.beta.read()); // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n      // is a workaround for the limitation of core's batchNormalization?d don't\n      // support broadcasting in their gradients. In addition, the tiling is\n      // necessary to ensure correctness on the browser CPU backend regardless\n      // of forward or backward computation. Remove this workaround once the\n      // limitation is addressed. See .\n\n      const momentsTiling = [];\n      const scaleOffsetTiling = [];\n\n      for (let i = 0; i < nDims; ++i) {\n        if (this.axis.indexOf(i) !== -1) {\n          momentsTiling.push(inputShape[i]);\n          scaleOffsetTiling.push(1);\n        } else {\n          momentsTiling.push(1);\n          scaleOffsetTiling.push(inputShape[i]);\n        }\n      }\n\n      mean = tfc.tile(mean, momentsTiling);\n      variance = tfc.tile(variance, momentsTiling);\n      scale = tfc.tile(scale, scaleOffsetTiling);\n      offset = tfc.tile(offset, scaleOffsetTiling);\n      return batchNormalization(input, mean, variance, offset, scale, this.epsilon);\n    });\n  }\n\n  getConfig() {\n    const config = {\n      axis: this.axis,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nLayerNormalization.className = 'LayerNormalization';\nserialization.registerClass(LayerNormalization);","map":{"version":3,"sources":["../../../../../../tfjs-layers/src/layers/normalization.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Normalization layers.\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {moments, reshape, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as math_utils from '../utils/math_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Applies batch normalization on x given mean, var, beta and gamma.\n *\n * I.e. returns:\n *   `output = (x - mean) / (sqrt(var) + epsilon) * gamma + beta`\n *\n * @param x Input tensor.\n * @param mean Mean of batch.\n * @param variance Variance of batch.\n * @param beta Tensor with which to center the input.\n * @param gamma Tensor by which to scale the input.\n * @param epsilon Fuzz factor.\n * @returns The result of the batch normalization.\n */\nexport function batchNormalization(\n    x: Tensor, mean: Tensor, variance: Tensor, beta?: Tensor, gamma?: Tensor,\n    epsilon = 1e-3): Tensor {\n  let out: Tensor;\n  if (x.rank === 2) {\n    out = tfc.batchNorm2d(\n        x as Tensor2D, mean as Tensor2D | Tensor1D,\n        variance as Tensor2D | Tensor1D, beta as Tensor2D | Tensor1D,\n        gamma as Tensor2D | Tensor1D, epsilon);\n  } else if (x.rank === 3) {\n    // TODO(cais): Check rank; give proper error message.\n    out = tfc.batchNorm3d(\n        x as Tensor3D, mean as Tensor3D | Tensor1D,\n        variance as Tensor3D | Tensor1D, beta as Tensor3D | Tensor1D,\n        gamma as Tensor3D | Tensor1D, epsilon);\n  } else if (x.rank === 4) {\n    out = tfc.batchNorm4d(\n        x as Tensor4D, mean as Tensor4D | Tensor1D,\n        variance as Tensor4D | Tensor1D, beta as Tensor4D | Tensor1D,\n        gamma as Tensor4D | Tensor1D, epsilon);\n  } else {\n    throw new NotImplementedError(\n        `batchNormalization is not implemented for array of rank ${x.rank} ` +\n        `yet`);\n  }\n  return out;\n}\n\n/**\n * Non-broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction regularNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const normed =\n               batchNormalization(x, mean, variance, beta, gamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Broadcasting batch normalization for use in training (not inference).\n *\n * The input is normalized to zero mean and unit variance along the\n * `reductionAxes`, followed by scaling with `gamma` and shifted by `beta`.\n * The result of that is returned as the first element\n * of the returned `Array`. The other two elements are the mean and variance,\n * respectively.\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nfunction broadcastNormalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  return tidy(() => {\n           const meanAndVariance = tfc.moments(x, reductionAxes);\n           const mean = meanAndVariance.mean;\n           const variance = meanAndVariance.variance;\n           const targetShape: number[] = [];\n           for (const axis of math_utils.range(0, x.rank)) {\n             if (reductionAxes.indexOf(axis) !== -1) {\n               targetShape.push(1);\n             } else {\n               targetShape.push(x.shape[axis]);\n             }\n           }\n           const broadcastMean = reshape(mean, targetShape);\n           const broadcastVariance = reshape(variance, targetShape);\n           const broadcastGamma =\n               gamma == null ? null : reshape(gamma, targetShape);\n           const broadcastBeta =\n               beta == null ? null : reshape(beta, targetShape);\n           const normed = batchNormalization(\n               x, broadcastMean, broadcastVariance, broadcastBeta,\n               broadcastGamma, epsilon);\n           return [normed, mean, variance];\n         }) as [Tensor, Tensor, Tensor];\n}\n\n/**\n * Batch normalization for use in training (not inference).\n *\n * @param x Input tensor to be normalized.\n * @param gamma Tensor by which to scale the input.\n * @param beta Tensor by which to center the input.\n * @param reductionAxes Axes over which to normalize.\n * @param epsilon Fuzz factor.\n * @returns An `Array` of three `Tensors`:\n *   [normalized tensor, mean of input, variance of input].\n */\nexport function normalizeBatchInTraining(\n    x: Tensor, gamma: Tensor, beta: Tensor, reductionAxes: number[],\n    epsilon = 1e-3): [Tensor, Tensor, Tensor] {\n  if (util.arraysEqual(\n          reductionAxes.slice().sort(), math_utils.range(0, x.rank - 1))) {\n    return regularNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  } else {\n    return broadcastNormalizeBatchInTraining(\n        x, gamma, beta, reductionAxes, epsilon);\n  }\n}\n\nexport declare interface BatchNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The integer axis that should be normalized (typically the features axis).\n   * Defaults to -1.\n   *\n   * For instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\n   * set `axis=1` in `batchNormalization`.\n   */\n  axis?: number;\n\n  /**\n   * Momentum of the moving average. Defaults to 0.99.\n   */\n  momentum?: number;\n\n  /**\n   * Small float added to the variance to avoid dividing by zero. Defaults to\n   * 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Defaults to `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear (also e.g. `nn.relu`),\n   * this can be disabled since the scaling will be done by the next layer.\n   * Defaults to `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   *  Defaults to 'zeros'.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   *  Defaults to `ones`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving mean.\n   * Defaults to `zeros`\n   */\n  movingMeanInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the moving variance.\n   *  Defaults to 'Ones'.\n   */\n  movingVarianceInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the beta weight.\n   */\n  betaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for gamma weight.\n   */\n  gammaConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer for the beta weight.\n   */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer for the gamma weight.\n   */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class BatchNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'BatchNormalization';\n  private readonly axis: number;\n  private readonly momentum: number;\n  private readonly epsilon: number;\n  private readonly center: boolean;\n  private readonly scale: boolean;\n  private readonly betaInitializer: Initializer;\n  private readonly gammaInitializer: Initializer;\n  private readonly movingMeanInitializer: Initializer;\n  private readonly movingVarianceInitializer: Initializer;\n  private readonly betaConstraint: Constraint;\n  private readonly gammaConstraint: Constraint;\n  private readonly betaRegularizer: Regularizer;\n  private readonly gammaRegularizer: Regularizer;\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n  private movingMean: LayerVariable;\n  private movingVariance: LayerVariable;\n\n  constructor(args?: BatchNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.supportsMasking = true;\n    this.axis = args.axis == null ? -1 : args.axis;\n    this.momentum = args.momentum == null ? 0.99 : args.momentum;\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.movingMeanInitializer =\n        getInitializer(args.movingMeanInitializer || 'zeros');\n    this.movingVarianceInitializer =\n        getInitializer(args.movingVarianceInitializer || 'ones');\n    this.betaConstraint = getConstraint(args.betaConstraint);\n    this.gammaConstraint = getConstraint(args.gammaConstraint);\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const axis = this.axis >= 0 ? this.axis : (this.axis + inputShape.length);\n    const dim = inputShape[axis];\n    if (dim == null) {\n      throw new ValueError(\n          `Axis ${axis} of input tensor should have a defined dimension but ` +\n          `the layer received an input with shape ` +\n          `${JSON.stringify(inputShape)}.`);\n    }\n    this.inputSpec =\n        [new InputSpec({ndim: inputShape.length, axes: {[axis]: dim}})];\n    const shape = [dim];\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', shape, null, this.gammaInitializer, this.gammaRegularizer,\n          true, this.gammaConstraint);\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', shape, null, this.betaInitializer, this.betaRegularizer, true,\n          this.betaConstraint);\n    }\n    this.movingMean = this.addWeight(\n        'moving_mean', shape, null, this.movingMeanInitializer, null, false);\n    this.movingVariance = this.addWeight(\n        'moving_variance', shape, null, this.movingVarianceInitializer, null,\n        false);\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      const training = kwargs['training'] == null ? false : kwargs['training'];\n      const input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n      const ndim = inputShape.length;\n      const reductionAxes = math_utils.range(0, ndim);\n      const axis = this.axis >= 0 ? this.axis : (this.axis + ndim);\n      reductionAxes.splice(axis, 1);\n      const broadcastShape = generic_utils.pyListRepeat(1, ndim);\n      broadcastShape[axis] = inputShape[axis];\n\n      const sortedReductionAxes = reductionAxes.slice();\n      sortedReductionAxes.sort();\n      const needsBroadcasting = !util.arraysEqual(\n          sortedReductionAxes, math_utils.range(0, ndim).slice(0, ndim - 1));\n\n      const normalizeInference: () => Tensor = () => {\n        if (needsBroadcasting) {\n          const broadcastMovingMean =\n              reshape(this.movingMean.read(), broadcastShape);\n          const broadcastMovingVariance =\n              reshape(this.movingVariance.read(), broadcastShape);\n          const broadcastBeta =\n              this.center ? reshape(this.beta.read(), broadcastShape) : null;\n          const broadcastGamma =\n              this.scale ? reshape(this.gamma.read(), broadcastShape) : null;\n          return batchNormalization(\n              input, broadcastMovingMean, broadcastMovingVariance,\n              broadcastBeta, broadcastGamma, this.epsilon);\n        } else {\n          return batchNormalization(\n              input, this.movingMean.read(), this.movingVariance.read(),\n              this.beta == null ? null : this.beta.read(),\n              this.gamma == null ? null : this.gamma.read(), this.epsilon);\n        }\n      };\n\n      if (!training) {\n        return normalizeInference();\n      }\n\n      const [normedTraining, mean, variance] = normalizeBatchInTraining(\n          input, this.gamma.read(), this.beta.read(), reductionAxes,\n          this.epsilon);\n\n      const doMovingAverage =\n          (variable: LayerVariable, value: Tensor, momentum: number): void => {\n            tfc.tidy(() => {\n              const decay = 1 - momentum;\n              const origValue = variable.read();\n              const updateDelta = tfc.mul(tfc.sub(origValue, value), decay);\n              variable.write(tfc.sub(origValue, updateDelta));\n            });\n          };\n\n      // Perform updates to moving mean and moving variance for training.\n      // Porting Note: In PyKeras, these updates to `movingMean` and\n      //   `movingAverage` are done as a deferred Graph, added to the `Layer`'s\n      //   `update`s using the `add_update()` method. Here we do it imperatively\n      //   and encapsulate the updates in a function that is invoked\n      //   immediately.\n      const updateMovingMeanAndVariance = () => {\n        doMovingAverage(this.movingMean, mean, this.momentum);\n        doMovingAverage(this.movingVariance, variance, this.momentum);\n      };\n      updateMovingMeanAndVariance();\n\n      return normedTraining;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      momentum: this.momentum,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      movingMeanInitializer: serializeInitializer(this.movingMeanInitializer),\n      movingVarianceInitializer:\n          serializeInitializer(this.movingVarianceInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer),\n      betaConstraint: serializeConstraint(this.betaConstraint),\n      gammaConstraint: serializeConstraint(this.gammaConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(BatchNormalization);\n\nexport interface LayerNormalizationLayerArgs extends LayerArgs {\n  /**\n   * The axis or axes that should be normalized (typically, the feature axis.)\n   * Defaults to -1 (the last axis.)\n   */\n  axis?: number|number[];\n\n  /**\n   * A small positive float added to variance to avoid divison by zero.\n   * Defaults to 1e-3.\n   */\n  epsilon?: number;\n\n  /**\n   * If `true`, add offset of `beta` to normalized tensor.\n   * If `false`, `beta` is ignored.\n   * Default: `true`.\n   */\n  center?: boolean;\n\n  /**\n   * If `true`, multiply output by `gamma`.\n   * If `false`, `gamma` is not used.\n   * When the next layer is linear, this can be disabled since scaling will\n   * be done by the next layer.\n   * Default: `true`.\n   */\n  scale?: boolean;\n\n  /**\n   * Initializer for the beta weight.\n   * Default: `'zeros'`.\n   */\n  betaInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the gamma weight.\n   * Default: `'ones'`.\n   */\n  gammaInitializer?: InitializerIdentifier|Initializer;\n\n  /** Regularizer for the beta weight. */\n  betaRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /** Regularizer for the gamma weight. */\n  gammaRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class LayerNormalization extends Layer {\n  /** @nocollapse */\n  static className = 'LayerNormalization';\n\n  private axis: number|number[];\n  readonly epsilon: number;\n  readonly center: boolean;\n  readonly scale: boolean;\n  readonly betaInitializer: Initializer;\n  readonly gammaInitializer: Initializer;\n  readonly betaRegularizer: Regularizer;\n  readonly gammaRegularizer: Regularizer;\n\n  private gamma: LayerVariable;\n  private beta: LayerVariable;\n\n  constructor(args?: LayerNormalizationLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.axis = args.axis == null ? -1 : args.axis;\n    if (typeof this.axis === 'number') {\n      if (!Number.isInteger(this.axis)) {\n        throw new Error(\n            `Expected axis to be an integer, but received ${this.axis}`);\n      }\n    } else if (Array.isArray(this.axis)) {\n      for (const axis of this.axis) {\n        if (!Number.isInteger(axis)) {\n          throw new Error(\n              `Expected axis to be an array of integers, ` +\n              `but received ${JSON.stringify(this.axis)}`);\n        }\n      }\n    } else {\n      throw new Error(\n          `Expected axis to be an integer or an array of integers, ` +\n          `but received ${JSON.stringify(this.axis)}`);\n    }\n\n    this.epsilon = args.epsilon == null ? 1e-3 : args.epsilon;\n    this.center = args.center == null ? true : args.center;\n    this.scale = args.scale == null ? true : args.scale;\n    this.betaInitializer = getInitializer(args.betaInitializer || 'zeros');\n    this.gammaInitializer = getInitializer(args.gammaInitializer || 'ones');\n    this.betaRegularizer = getRegularizer(args.betaRegularizer);\n    this.gammaRegularizer = getRegularizer(args.gammaRegularizer);\n\n    this.supportsMasking = true;\n  }\n\n  public build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const nDims = inputShape.length;\n\n    // Convert axis to array and resolve negatives.\n    if (typeof this.axis === 'number') {\n      this.axis = [this.axis];\n    }\n    for (let i = 0; i < this.axis.length; ++i) {\n      if (this.axis[i] < 0) {\n        this.axis[i] += nDims;\n      }\n    }\n\n    // Further validate axes.\n    for (const axis of this.axis) {\n      if (axis < 0 || axis >= nDims) {\n        throw new Error(`Invalid axis: ${axis}`);\n      }\n    }\n    if (this.axis.length !== generic_utils.unique(this.axis).length) {\n      throw new Error(`Found duplicate axes in: ${this.axis}`);\n    }\n\n    const paramShape = this.axis.map(axis => inputShape[axis]) as number[];\n\n    const trainable = true;\n    if (this.scale) {\n      this.gamma = this.addWeight(\n          'gamma', paramShape, 'float32', this.gammaInitializer,\n          this.gammaRegularizer, trainable);\n    } else {\n      this.gamma = null;\n    }\n    if (this.center) {\n      this.beta = this.addWeight(\n          'beta', paramShape, 'float32', this.betaInitializer,\n          this.betaRegularizer, trainable);\n    } else {\n      this.beta = null;\n    }\n\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    const input = getExactlyOneTensor(inputs);\n    const inputShape = input.shape;\n    const nDims = inputShape.length;\n\n    return tidy(() => {\n      const keepDims = true;\n      let {mean, variance} = moments(input, this.axis, keepDims);\n      const broadcastShape = generic_utils.pyListRepeat(1, nDims);\n      for (const dim of this.axis as number[]) {\n        broadcastShape[dim] = inputShape[dim];\n      }\n\n      const broadcast = (v: Tensor) => {\n        if (v != null && v.shape.length !== nDims) {\n          return tfc.reshape(v, broadcastShape);\n        } else {\n          return v;\n        }\n      };\n\n      let scale = broadcast(this.gamma.read());\n      let offset = broadcast(this.beta.read());\n\n      // TODO(https://github.com/tensorflow/tfjs/issues/2120): The tiling below\n      // is a workaround for the limitation of core's batchNormalization?d don't\n      // support broadcasting in their gradients. In addition, the tiling is\n      // necessary to ensure correctness on the browser CPU backend regardless\n      // of forward or backward computation. Remove this workaround once the\n      // limitation is addressed. See .\n      const momentsTiling: number[] = [];\n      const scaleOffsetTiling: number[] = [];\n      for (let i = 0; i < nDims; ++i) {\n        if ((this.axis as number[]).indexOf(i) !== -1) {\n          momentsTiling.push(inputShape[i]);\n          scaleOffsetTiling.push(1);\n        } else {\n          momentsTiling.push(1);\n          scaleOffsetTiling.push(inputShape[i]);\n        }\n      }\n      mean = tfc.tile(mean, momentsTiling);\n      variance = tfc.tile(variance, momentsTiling);\n      scale = tfc.tile(scale, scaleOffsetTiling);\n      offset = tfc.tile(offset, scaleOffsetTiling);\n\n      return batchNormalization(\n          input, mean, variance, offset, scale, this.epsilon);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      axis: this.axis,\n      epsilon: this.epsilon,\n      center: this.center,\n      scale: this.scale,\n      betaInitializer: serializeInitializer(this.betaInitializer),\n      gammaInitializer: serializeInitializer(this.gammaInitializer),\n      betaRegularizer: serializeRegularizer(this.betaRegularizer),\n      gammaRegularizer: serializeRegularizer(this.gammaRegularizer)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(LayerNormalization);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}