{"ast":null,"code":"import { assert } from '../util';\nimport { op } from './operation';\nimport { pad } from './pad';\n/**\n * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.\n */\n\nfunction pad4d_(x, paddings, constantValue = 0) {\n  assert(paddings.length === 4 && paddings[0].length === 2 && paddings[1].length === 2 && paddings[2].length === 2 && paddings[3].length === 2, () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\nexport const pad4d = op({\n  pad4d_\n});","map":{"version":3,"sources":["../../../../../../tfjs-core/src/ops/pad4d.ts"],"names":[],"mappings":"AAkBA,SAAQ,MAAR,QAAqB,SAArB;AACA,SAAQ,EAAR,QAAiB,aAAjB;AACA,SAAQ,GAAR,QAAkB,OAAlB;AAEA;;AAEG;;AACH,SAAS,MAAT,CACI,CADJ,EAEI,QAFJ,EAMI,aAAa,GAAG,CANpB,EAMqB;AACnB,EAAA,MAAM,CACF,QAAQ,CAAC,MAAT,KAAoB,CAApB,IAAyB,QAAQ,CAAC,CAAD,CAAR,CAAY,MAAZ,KAAuB,CAAhD,IACI,QAAQ,CAAC,CAAD,CAAR,CAAY,MAAZ,KAAuB,CAD3B,IACgC,QAAQ,CAAC,CAAD,CAAR,CAAY,MAAZ,KAAuB,CADvD,IAEI,QAAQ,CAAC,CAAD,CAAR,CAAY,MAAZ,KAAuB,CAHzB,EAIF,MAAM,uDAJJ,CAAN;AAKA,SAAO,GAAG,CAAC,CAAD,EAAI,QAAJ,EAAc,aAAd,CAAV;AACD;;AAED,OAAO,MAAM,KAAK,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAhB","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor4D} from '../tensor';\nimport {TensorLike} from '../types';\nimport {assert} from '../util';\nimport {op} from './operation';\nimport {pad} from './pad';\n\n/**\n * Pads a `tf.Tensor4D` with a given value and paddings. See `pad` for details.\n */\nfunction pad4d_(\n    x: Tensor4D|TensorLike,\n    paddings:\n        [\n          [number, number], [number, number], [number, number], [number, number]\n        ],\n    constantValue = 0): Tensor4D {\n  assert(\n      paddings.length === 4 && paddings[0].length === 2 &&\n          paddings[1].length === 2 && paddings[2].length === 2 &&\n          paddings[3].length === 2,\n      () => 'Invalid number of paddings. Must be length of 2 each.');\n  return pad(x, paddings, constantValue);\n}\n\nexport const pad4d = op({pad4d_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}