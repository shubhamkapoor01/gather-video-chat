{"ast":null,"code":"import { pool } from '../../ops/pool';\nimport { getGlobalTensorClass } from '../../tensor';\n\ngetGlobalTensorClass().prototype.pool = function (windowShape, poolingType, padding, dilationRate, strides) {\n  this.throwIfDisposed();\n  return pool(this, windowShape, poolingType, padding, dilationRate, strides);\n};","map":{"version":3,"sources":["../../../../../../../tfjs-core/src/public/chained_ops/pool.ts"],"names":[],"mappings":"AAiBA,SAAQ,IAAR,QAAmB,gBAAnB;AACA,SAAQ,oBAAR,QAAuD,cAAvD;;AAaA,oBAAoB,GAAG,SAAvB,CAAiC,IAAjC,GAAwC,UAC3B,WAD2B,EACW,WADX,EAEpC,OAFoC,EAGpC,YAHoC,EAIpC,OAJoC,EAIH;AACnC,OAAK,eAAL;AACA,SAAO,IAAI,CAAC,IAAD,EAAO,WAAP,EAAoB,WAApB,EAAiC,OAAjC,EAA0C,YAA1C,EAAwD,OAAxD,CAAX;AACD,CAPD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ExplicitPadding} from '../../ops/conv_util';\nimport {pool} from '../../ops/pool';\nimport {getGlobalTensorClass, Tensor3D, Tensor4D} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    pool<T extends Tensor3D|Tensor4D>(\n        windowShape: [number, number]|number, poolingType: 'avg'|'max',\n        padding: 'valid'|'same'|number|ExplicitPadding,\n        diationRate?: [number, number]|number,\n        strides?: [number, number]|number): T;\n  }\n}\n\ngetGlobalTensorClass().prototype.pool = function<T extends Tensor3D|Tensor4D>(\n    this: T, windowShape: [number, number]|number, poolingType: 'max'|'avg',\n    padding: 'valid'|'same'|number|ExplicitPadding,\n    dilationRate?: [number, number]|number,\n    strides?: [number, number]|number): T {\n  this.throwIfDisposed();\n  return pool(this, windowShape, poolingType, padding, dilationRate, strides);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}