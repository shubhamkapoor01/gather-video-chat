{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport * as tf from '@tensorflow/tfjs-core';\n/**\r\n * Apply a mapping function to a nested structure in a recursive manner.\r\n *\r\n * The result of the mapping is an object with the same nested structure (i.e.,\r\n * of arrays and dicts) as the input, except that some subtrees are replaced,\r\n * according to the results of the mapping function.\r\n *\r\n * Mappings are memoized.  Thus, if the nested structure contains the same\r\n * object in multiple positions, the output will contain the same mapped object\r\n * in those positions.  Cycles are not supported, however.\r\n *\r\n * @param input: The object to which to apply the mapping function.\r\n * @param mapFn: A function that expects a single node of the object tree, and\r\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\r\n *   replacement value for that node (i.e., replacing the subtree), or indicates\r\n *   that the node should be processed recursively.\r\n */\n\nexport function deepMap(input, mapFn) {\n  return deepMapInternal(input, mapFn);\n}\n/**\r\n * @param seen: A Map of known object mappings (i.e., memoized results of\r\n *   `mapFn()`)\r\n * @param containedIn: An set containing objects on the reference path currently\r\n *   being processed (used to detect cycles).\r\n */\n\nfunction deepMapInternal(input, mapFn, seen = new Map(), containedIn = new Set()) {\n  if (input == null) {\n    return null;\n  }\n\n  if (typeof Blob === 'function' && input instanceof Blob) {\n    return input.slice();\n  }\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n\n  const result = mapFn(input);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep map function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n\n    containedIn.delete(input);\n\n    if (input.__proto__) {\n      mappedIterable.__proto__ = input.__proto__;\n    }\n\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n} // TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n\n/**\r\n * Zip nested structures together in a recursive manner.\r\n *\r\n * This has the effect of transposing or pivoting data, e.g. converting it from\r\n * a row-major representation to a column-major representation.\r\n *\r\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\r\n * `{a: [1, 3], b: [2, 4]}`.\r\n *\r\n * The inputs should all have the same nested structure (i.e., of arrays and\r\n * dicts).  The result is a single object with the same nested structure, where\r\n * the leaves are arrays collecting the values of the inputs at that location\r\n * (or, optionally, the result of a custom function applied to those arrays).\r\n *\r\n * @param inputs: An array of the objects to zip together.\r\n * @param zipFn: (optional) A function that expects an array of elements at a\r\n *   single node of the object tree, and returns a `DeepMapResult`.  The\r\n *   `DeepMapResult` either provides a result value for that node (i.e.,\r\n *   representing the subtree), or indicates that the node should be processed\r\n *   recursively.  The default zipFn recurses as far as possible and places\r\n *   arrays at the leaves.\r\n */\n\n\nexport function deepZip(inputs, zipFn = zipToList) {\n  return deepZipInternal(inputs, zipFn);\n}\n/**\r\n * @param containedIn: An set containing objects on the reference path currently\r\n *   being processed (used to detect cycles).\r\n */\n\nfunction deepZipInternal(inputs, zipFn, containedIn = new Set()) {\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n\n  const result = zipFn(inputs);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep zip function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n} // tslint:disable-next-line:no-any\n\n\nexport function zipToList(x) {\n  if (x === null) {\n    return null;\n  } // TODO(soergel): validate array type?\n\n\n  if (isIterable(x[0])) {\n    return {\n      value: null,\n      recurse: true\n    };\n  } else {\n    return {\n      value: x,\n      recurse: false\n    };\n  }\n}\n/**\r\n * Apply an async mapping function to a nested structure in a recursive manner.\r\n *\r\n * This first creates a nested structure of Promises, and then awaits all of\r\n * those, resulting in a single Promise for a resolved nested structure.\r\n *\r\n * The result of the mapping is an object with the same nested structure (i.e.,\r\n * of arrays and dicts) as the input, except that some subtrees are replaced,\r\n * according to the results of the mapping function.\r\n *\r\n * Mappings are memoized.  Thus, if the nested structure contains the same\r\n * object in multiple positions, the output will contain the same mapped object\r\n * in those positions.  Cycles are not supported, however.\r\n *\r\n * @param input: The object to which to apply the mapping function.\r\n * @param mapFn: A function that expects a single node of the object tree, and\r\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\r\n *   a `Promise` for a replacement value for that node (i.e., replacing the\r\n *   subtree), or indicates that the node should be processed recursively.  Note\r\n *   that the decision whether or not to recurse must be made immediately; only\r\n *   the mapped value may be promised.\r\n */\n\nexport async function deepMapAndAwaitAll(input, mapFn) {\n  const seen = new Map(); // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n\n  deepMapInternal(input, mapFn, seen); // Replace the Promises in 'seen' in place.\n  // Note TypeScript provides no async map iteration, and regular map iteration\n  // is broken too, so sadly we have to do Array.from() to make it work.\n  // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n\n    if (tf.util.isPromise(value)) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  } // Normal deepMap again, this time filling in the resolved values.\n  // It's unfortunate that we have to do two passes.\n  // TODO(soergel): test performance and think harder about a fast solution.\n\n\n  const result = deepMapInternal(input, mapFn, seen);\n  return result;\n}\n/**\r\n * Determine whether the argument is iterable.\r\n *\r\n * @returns true if the argument is an array or any non-Tensor object.\r\n */\n// tslint:disable-next-line:no-any\n\nexport function isIterable(obj) {\n  let isTextDecoder = false;\n\n  if (tf.env().get('IS_BROWSER')) {\n    isTextDecoder = obj instanceof TextDecoder;\n  } else {\n    // tslint:disable-next-line:no-require-imports\n    const {\n      StringDecoder\n    } = require('string_decoder');\n\n    isTextDecoder = obj instanceof StringDecoder;\n  }\n\n  return obj != null && !ArrayBuffer.isView(obj) && (Array.isArray(obj) || typeof obj === 'object' && !(obj instanceof tf.Tensor) && !(obj instanceof Promise) && !isTextDecoder);\n}\n/**\r\n * Determine whether the argument can be converted to Tensor.\r\n *\r\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\r\n * not.\r\n *\r\n * @returns true if the argument can be converted to Tensor.\r\n */\n// tslint:disable-next-line:no-any\n\nexport function canTensorify(obj) {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) || typeof obj === 'object' && obj instanceof tf.Tensor || tf.util.isTypedArray(obj);\n}\n/**\r\n * Returns true if the given `value` is a primitive type. Otherwise returns\r\n * false. This is equivalant to node util.isPrimitive\r\n */\n\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object' && typeof value !== 'function';\n}","map":{"version":3,"sources":["../../../../../../tfjs-data/src/util/deep_map.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\n// tslint:disable:no-any\n\n/**\n * A return value for a mapping function that can be applied via deepMap.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapResult = {\n  value: any,\n  recurse: boolean\n};\n\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\nexport function deepMap(input: any, mapFn: (x: any) => DeepMapResult): any|\n    any[] {\n  return deepMapInternal(input, mapFn);\n}\n\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepMapInternal(\n    input: any, mapFn: (x: any) => DeepMapResult,\n    seen: Map<any, any> = new Map(), containedIn: Set<{}> = new Set()): any|\n    any[] {\n  if (input == null) {\n    return null;\n  }\n  if (typeof Blob === 'function' && input instanceof Blob) {\n    return input.slice();\n  }\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n  const result = mapFn(input);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep map function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    if (input.__proto__) {\n      mappedIterable.__proto__ = input.__proto__;\n    }\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\nexport function deepZip(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult = zipToList): any|any[] {\n  return deepZipInternal(inputs, zipFn);\n}\n\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepZipInternal(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult,\n    containedIn: Set<{}> = new Set()): any|any[] {\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  const result = zipFn(inputs);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep zip function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// tslint:disable-next-line:no-any\nexport function zipToList(x: any[]): DeepMapResult {\n  if (x === null) {\n    return null;\n  }\n  // TODO(soergel): validate array type?\n\n  if (isIterable(x[0])) {\n    return {value: null, recurse: true};\n  } else {\n    return {value: x, recurse: false};\n  }\n}\n\n/**\n * A return value for an async map function for use with deepMapAndAwaitAll.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapAsyncResult = {\n  value: Promise<any>,\n  recurse: boolean\n};\n\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\nexport async function deepMapAndAwaitAll(\n    input: any, mapFn: (x: any) => DeepMapAsyncResult): Promise<any|any[]> {\n  const seen: Map<any, any> = new Map();\n\n  // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n  deepMapInternal(input, mapFn, seen);\n\n  // Replace the Promises in 'seen' in place.\n  // Note TypeScript provides no async map iteration, and regular map iteration\n  // is broken too, so sadly we have to do Array.from() to make it work.\n  // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n    if (tf.util.isPromise(value)) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  }\n\n  // Normal deepMap again, this time filling in the resolved values.\n  // It's unfortunate that we have to do two passes.\n  // TODO(soergel): test performance and think harder about a fast solution.\n  const result = deepMapInternal(input, mapFn, seen);\n  return result;\n}\n\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj: any): boolean {\n  let isTextDecoder = false;\n  if (tf.env().get('IS_BROWSER')) {\n    isTextDecoder = obj instanceof TextDecoder;\n  } else {\n    // tslint:disable-next-line:no-require-imports\n    const {StringDecoder} = require('string_decoder');\n    isTextDecoder = obj instanceof StringDecoder;\n  }\n  return obj != null && (!ArrayBuffer.isView(obj)) &&\n      (Array.isArray(obj) ||\n       (typeof obj === 'object' && !(obj instanceof tf.Tensor) &&\n        !(obj instanceof Promise) && !isTextDecoder));\n}\n\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj: any): boolean {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) ||\n      (typeof obj === 'object' && (obj instanceof tf.Tensor)) ||\n      tf.util.isTypedArray(obj);\n}\n\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\nfunction isPrimitive(value: any): boolean {\n  return (\n      value === null ||\n      (typeof value !== 'object' && typeof value !== 'function'));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}