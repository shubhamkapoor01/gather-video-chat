{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mozah\\\\Desktop\\\\Hanzla College files\\\\Gather\\\\ver-1\\\\gather-video-chat\\\\server\\\\client\\\\src\\\\Model.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport * as fp from 'fingerpose';\nimport * as blazeface from '@tensorflow-models/blazeface';\nimport Webcam from 'react-webcam';\nimport './Model.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Model(props) {\n  _s();\n\n  const webcamRef = useRef(null);\n\n  const runHandpose = async () => {\n    const net = await blazeface.load();\n    setInterval(() => {\n      detect(net);\n    }, 1000);\n  };\n\n  const detect = async net => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight;\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n      const faces = await net.estimateFaces(video);\n      console.log(faces.length);\n      props.setFaces(faces.length);\n    }\n  };\n\n  runHandpose();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"model\",\n    children: /*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      style: {\n        width: \"0px\",\n        height: \"0px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Model, \"xktPpQLC/HvD4LtWpzjiWSp00EE=\");\n\n_c = Model;\nexport default Model;\n\nvar _c;\n\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"sources":["C:/Users/mozah/Desktop/Hanzla College files/Gather/ver-1/gather-video-chat/server/client/src/Model.js"],"names":["React","useState","useRef","tf","fp","blazeface","Webcam","Model","props","webcamRef","runHandpose","net","load","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","faces","estimateFaces","console","log","length","setFaces"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,YAApB;AACA,OAAO,KAAKC,SAAZ,MAA2B,8BAA3B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAO,aAAP;;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA;;AACrB,QAAMC,SAAS,GAAGP,MAAM,CAAC,IAAD,CAAxB;;AAEA,QAAMQ,WAAW,GAAG,YAAY;AAC/B,UAAMC,GAAG,GAAG,MAAMN,SAAS,CAACO,IAAV,EAAlB;AAEAC,IAAAA,WAAW,CAAC,MAAM;AACjBC,MAAAA,MAAM,CAACH,GAAD,CAAN;AACA,KAFU,EAER,IAFQ,CAAX;AAGA,GAND;;AAQC,QAAMG,MAAM,GAAG,MAAOH,GAAP,IAAe;AAC5B,QACE,OAAOF,SAAS,CAACM,OAAjB,KAA6B,WAA7B,IACAN,SAAS,CAACM,OAAV,KAAsB,IADtB,IAEAN,SAAS,CAACM,OAAV,CAAkBC,KAAlB,CAAwBC,UAAxB,KAAuC,CAHzC,EAIE;AACA,YAAMD,KAAK,GAAGP,SAAS,CAACM,OAAV,CAAkBC,KAAhC;AACA,YAAME,UAAU,GAAGT,SAAS,CAACM,OAAV,CAAkBC,KAAlB,CAAwBE,UAA3C;AACA,YAAMC,WAAW,GAAGV,SAAS,CAACM,OAAV,CAAkBC,KAAlB,CAAwBG,WAA5C;AAEAV,MAAAA,SAAS,CAACM,OAAV,CAAkBC,KAAlB,CAAwBI,KAAxB,GAAgCF,UAAhC;AACAT,MAAAA,SAAS,CAACM,OAAV,CAAkBC,KAAlB,CAAwBK,MAAxB,GAAiCF,WAAjC;AAEA,YAAMG,KAAK,GAAG,MAAMX,GAAG,CAACY,aAAJ,CAAkBP,KAAlB,CAApB;AACHQ,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,MAAlB;AACAlB,MAAAA,KAAK,CAACmB,QAAN,CAAeL,KAAK,CAACI,MAArB;AACE;AACF,GAjBD;;AAmBAhB,EAAAA,WAAW;AAEZ,sBACC;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,2BACC,QAAC,MAAD;AACI,MAAA,GAAG,EAAED,SADT;AAEI,MAAA,KAAK,EAAE;AACTW,QAAAA,KAAK,EAAE,KADE;AAETC,QAAAA,MAAM,EAAE;AAFC;AAFX;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAWA;;GA3CQd,K;;KAAAA,K;AA6CT,eAAeA,KAAf","sourcesContent":["import React, { useState, useRef } from 'react'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport * as fp from 'fingerpose'\r\nimport * as blazeface from '@tensorflow-models/blazeface'\r\nimport Webcam from 'react-webcam'\r\nimport './Model.css'\r\n\r\nfunction Model(props) {\r\n\tconst webcamRef = useRef(null);\r\n\r\n\tconst runHandpose = async () => {\r\n\t\tconst net = await blazeface.load();\r\n\r\n\t\tsetInterval(() => {\r\n\t\t\tdetect(net);\r\n\t\t}, 1000)\r\n\t}\r\n\r\n  const detect = async (net) => {\r\n    if (\r\n      typeof webcamRef.current !== \"undefined\" &&\r\n      webcamRef.current !== null &&\r\n      webcamRef.current.video.readyState === 4\r\n    ) {\r\n      const video = webcamRef.current.video;\r\n      const videoWidth = webcamRef.current.video.videoWidth;\r\n      const videoHeight = webcamRef.current.video.videoHeight;\r\n\r\n      webcamRef.current.video.width = videoWidth;\r\n      webcamRef.current.video.height = videoHeight;\r\n\r\n      const faces = await net.estimateFaces(video);\r\n\t\t\tconsole.log(faces.length);\r\n\t\t\tprops.setFaces(faces.length);\r\n    }\r\n  };\r\n\r\n  runHandpose();\r\n\r\n\treturn (\r\n\t\t<div className=\"model\">\r\n\t\t\t<Webcam\r\n  \t    ref={webcamRef}\r\n  \t    style={{\r\n\t\t\t\t\twidth: \"0px\",\r\n\t\t\t\t\theight: \"0px\",\r\n  \t    }}\r\n     \t/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Model"]},"metadata":{},"sourceType":"module"}