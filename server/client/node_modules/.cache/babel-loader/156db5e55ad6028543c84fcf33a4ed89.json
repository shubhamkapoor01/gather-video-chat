{"ast":null,"code":"import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\n\nexport const protocol = 5;\nexport var PacketType;\n\n(function (PacketType) {\n  PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n  PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n  PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n  PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n  PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n  PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n  PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\r\n * A socket.io Encoder instance\r\n */\n\n\nexport class Encoder {\n  /**\r\n   * Encode a packet as a single string if non-binary, or as a\r\n   * buffer sequence, depending on packet type.\r\n   *\r\n   * @param {Object} obj - packet object\r\n   */\n  encode(obj) {\n    if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n      if (hasBinary(obj)) {\n        obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;\n        return this.encodeAsBinary(obj);\n      }\n    }\n\n    return [this.encodeAsString(obj)];\n  }\n  /**\r\n   * Encode packet as string.\r\n   */\n\n\n  encodeAsString(obj) {\n    // first is type\n    let str = \"\" + obj.type; // attachments if we have them\n\n    if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n      str += obj.attachments + \"-\";\n    } // if we have a namespace other than `/`\n    // we append it followed by a comma `,`\n\n\n    if (obj.nsp && \"/\" !== obj.nsp) {\n      str += obj.nsp + \",\";\n    } // immediately followed by the id\n\n\n    if (null != obj.id) {\n      str += obj.id;\n    } // json data\n\n\n    if (null != obj.data) {\n      str += JSON.stringify(obj.data);\n    }\n\n    return str;\n  }\n  /**\r\n   * Encode packet as 'buffer sequence' by removing blobs, and\r\n   * deconstructing packet into object with placeholders and\r\n   * a list of buffers.\r\n   */\n\n\n  encodeAsBinary(obj) {\n    const deconstruction = deconstructPacket(obj);\n    const pack = this.encodeAsString(deconstruction.packet);\n    const buffers = deconstruction.buffers;\n    buffers.unshift(pack); // add packet info to beginning of data list\n\n    return buffers; // write all the buffers\n  }\n\n}\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\n\nexport class Decoder extends Emitter {\n  constructor() {\n    super();\n  }\n  /**\r\n   * Decodes an encoded packet string into packet JSON.\r\n   *\r\n   * @param {String} obj - encoded packet\r\n   */\n\n\n  add(obj) {\n    let packet;\n\n    if (typeof obj === \"string\") {\n      packet = this.decodeString(obj);\n\n      if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {\n        // binary packet's json\n        this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow\n\n        if (packet.attachments === 0) {\n          super.emitReserved(\"decoded\", packet);\n        }\n      } else {\n        // non-binary full packet\n        super.emitReserved(\"decoded\", packet);\n      }\n    } else if (isBinary(obj) || obj.base64) {\n      // raw binary data\n      if (!this.reconstructor) {\n        throw new Error(\"got binary data when not reconstructing a packet\");\n      } else {\n        packet = this.reconstructor.takeBinaryData(obj);\n\n        if (packet) {\n          // received final buffer\n          this.reconstructor = null;\n          super.emitReserved(\"decoded\", packet);\n        }\n      }\n    } else {\n      throw new Error(\"Unknown type: \" + obj);\n    }\n  }\n  /**\r\n   * Decode a packet String (JSON data)\r\n   *\r\n   * @param {String} str\r\n   * @return {Object} packet\r\n   */\n\n\n  decodeString(str) {\n    let i = 0; // look up type\n\n    const p = {\n      type: Number(str.charAt(0))\n    };\n\n    if (PacketType[p.type] === undefined) {\n      throw new Error(\"unknown packet type \" + p.type);\n    } // look up attachments if type binary\n\n\n    if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n      const start = i + 1;\n\n      while (str.charAt(++i) !== \"-\" && i != str.length) {}\n\n      const buf = str.substring(start, i);\n\n      if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n        throw new Error(\"Illegal attachments\");\n      }\n\n      p.attachments = Number(buf);\n    } // look up namespace (if any)\n\n\n    if (\"/\" === str.charAt(i + 1)) {\n      const start = i + 1;\n\n      while (++i) {\n        const c = str.charAt(i);\n        if (\",\" === c) break;\n        if (i === str.length) break;\n      }\n\n      p.nsp = str.substring(start, i);\n    } else {\n      p.nsp = \"/\";\n    } // look up id\n\n\n    const next = str.charAt(i + 1);\n\n    if (\"\" !== next && Number(next) == next) {\n      const start = i + 1;\n\n      while (++i) {\n        const c = str.charAt(i);\n\n        if (null == c || Number(c) != c) {\n          --i;\n          break;\n        }\n\n        if (i === str.length) break;\n      }\n\n      p.id = Number(str.substring(start, i + 1));\n    } // look up json data\n\n\n    if (str.charAt(++i)) {\n      const payload = tryParse(str.substr(i));\n\n      if (Decoder.isPayloadValid(p.type, payload)) {\n        p.data = payload;\n      } else {\n        throw new Error(\"invalid payload\");\n      }\n    }\n\n    return p;\n  }\n\n  static isPayloadValid(type, payload) {\n    switch (type) {\n      case PacketType.CONNECT:\n        return typeof payload === \"object\";\n\n      case PacketType.DISCONNECT:\n        return payload === undefined;\n\n      case PacketType.CONNECT_ERROR:\n        return typeof payload === \"string\" || typeof payload === \"object\";\n\n      case PacketType.EVENT:\n      case PacketType.BINARY_EVENT:\n        return Array.isArray(payload) && payload.length > 0;\n\n      case PacketType.ACK:\n      case PacketType.BINARY_ACK:\n        return Array.isArray(payload);\n    }\n  }\n  /**\r\n   * Deallocates a parser's resources\r\n   */\n\n\n  destroy() {\n    if (this.reconstructor) {\n      this.reconstructor.finishedReconstruction();\n    }\n  }\n\n}\n\nfunction tryParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n}\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\n\n\nclass BinaryReconstructor {\n  constructor(packet) {\n    this.packet = packet;\n    this.buffers = [];\n    this.reconPack = packet;\n  }\n  /**\r\n   * Method to be called when binary data received from connection\r\n   * after a BINARY_EVENT packet.\r\n   *\r\n   * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n   * @return {null | Object} returns null if more binary data is expected or\r\n   *   a reconstructed packet object if all buffers have been received.\r\n   */\n\n\n  takeBinaryData(binData) {\n    this.buffers.push(binData);\n\n    if (this.buffers.length === this.reconPack.attachments) {\n      // done with buffer list\n      const packet = reconstructPacket(this.reconPack, this.buffers);\n      this.finishedReconstruction();\n      return packet;\n    }\n\n    return null;\n  }\n  /**\r\n   * Cleans up binary packet reconstruction variables.\r\n   */\n\n\n  finishedReconstruction() {\n    this.reconPack = null;\n    this.buffers = [];\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mozah/Desktop/Hanzla College files/Gather/ver exp/gather-video-chat/server/client/node_modules/socket.io-parser/build/esm/index.js"],"names":["Emitter","deconstructPacket","reconstructPacket","isBinary","hasBinary","protocol","PacketType","Encoder","encode","obj","type","EVENT","ACK","BINARY_EVENT","BINARY_ACK","encodeAsBinary","encodeAsString","str","attachments","nsp","id","data","JSON","stringify","deconstruction","pack","packet","buffers","unshift","Decoder","constructor","add","decodeString","reconstructor","BinaryReconstructor","emitReserved","base64","Error","takeBinaryData","i","p","Number","charAt","undefined","start","length","buf","substring","c","next","payload","tryParse","substr","isPayloadValid","CONNECT","DISCONNECT","CONNECT_ERROR","Array","isArray","destroy","finishedReconstruction","parse","e","reconPack","binData","push"],"mappings":"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","sourcesContent":["import { Emitter } from \"@socket.io/component-emitter\";\r\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\r\nimport { isBinary, hasBinary } from \"./is-binary.js\";\r\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */\r\nexport const protocol = 5;\r\nexport var PacketType;\r\n(function (PacketType) {\r\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\r\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\r\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\r\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\r\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\r\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\r\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\r\n})(PacketType || (PacketType = {}));\r\n/**\r\n * A socket.io Encoder instance\r\n */\r\nexport class Encoder {\r\n    /**\r\n     * Encode a packet as a single string if non-binary, or as a\r\n     * buffer sequence, depending on packet type.\r\n     *\r\n     * @param {Object} obj - packet object\r\n     */\r\n    encode(obj) {\r\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\r\n            if (hasBinary(obj)) {\r\n                obj.type =\r\n                    obj.type === PacketType.EVENT\r\n                        ? PacketType.BINARY_EVENT\r\n                        : PacketType.BINARY_ACK;\r\n                return this.encodeAsBinary(obj);\r\n            }\r\n        }\r\n        return [this.encodeAsString(obj)];\r\n    }\r\n    /**\r\n     * Encode packet as string.\r\n     */\r\n    encodeAsString(obj) {\r\n        // first is type\r\n        let str = \"\" + obj.type;\r\n        // attachments if we have them\r\n        if (obj.type === PacketType.BINARY_EVENT ||\r\n            obj.type === PacketType.BINARY_ACK) {\r\n            str += obj.attachments + \"-\";\r\n        }\r\n        // if we have a namespace other than `/`\r\n        // we append it followed by a comma `,`\r\n        if (obj.nsp && \"/\" !== obj.nsp) {\r\n            str += obj.nsp + \",\";\r\n        }\r\n        // immediately followed by the id\r\n        if (null != obj.id) {\r\n            str += obj.id;\r\n        }\r\n        // json data\r\n        if (null != obj.data) {\r\n            str += JSON.stringify(obj.data);\r\n        }\r\n        return str;\r\n    }\r\n    /**\r\n     * Encode packet as 'buffer sequence' by removing blobs, and\r\n     * deconstructing packet into object with placeholders and\r\n     * a list of buffers.\r\n     */\r\n    encodeAsBinary(obj) {\r\n        const deconstruction = deconstructPacket(obj);\r\n        const pack = this.encodeAsString(deconstruction.packet);\r\n        const buffers = deconstruction.buffers;\r\n        buffers.unshift(pack); // add packet info to beginning of data list\r\n        return buffers; // write all the buffers\r\n    }\r\n}\r\n/**\r\n * A socket.io Decoder instance\r\n *\r\n * @return {Object} decoder\r\n */\r\nexport class Decoder extends Emitter {\r\n    constructor() {\r\n        super();\r\n    }\r\n    /**\r\n     * Decodes an encoded packet string into packet JSON.\r\n     *\r\n     * @param {String} obj - encoded packet\r\n     */\r\n    add(obj) {\r\n        let packet;\r\n        if (typeof obj === \"string\") {\r\n            packet = this.decodeString(obj);\r\n            if (packet.type === PacketType.BINARY_EVENT ||\r\n                packet.type === PacketType.BINARY_ACK) {\r\n                // binary packet's json\r\n                this.reconstructor = new BinaryReconstructor(packet);\r\n                // no attachments, labeled binary but no binary data to follow\r\n                if (packet.attachments === 0) {\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n            else {\r\n                // non-binary full packet\r\n                super.emitReserved(\"decoded\", packet);\r\n            }\r\n        }\r\n        else if (isBinary(obj) || obj.base64) {\r\n            // raw binary data\r\n            if (!this.reconstructor) {\r\n                throw new Error(\"got binary data when not reconstructing a packet\");\r\n            }\r\n            else {\r\n                packet = this.reconstructor.takeBinaryData(obj);\r\n                if (packet) {\r\n                    // received final buffer\r\n                    this.reconstructor = null;\r\n                    super.emitReserved(\"decoded\", packet);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            throw new Error(\"Unknown type: \" + obj);\r\n        }\r\n    }\r\n    /**\r\n     * Decode a packet String (JSON data)\r\n     *\r\n     * @param {String} str\r\n     * @return {Object} packet\r\n     */\r\n    decodeString(str) {\r\n        let i = 0;\r\n        // look up type\r\n        const p = {\r\n            type: Number(str.charAt(0)),\r\n        };\r\n        if (PacketType[p.type] === undefined) {\r\n            throw new Error(\"unknown packet type \" + p.type);\r\n        }\r\n        // look up attachments if type binary\r\n        if (p.type === PacketType.BINARY_EVENT ||\r\n            p.type === PacketType.BINARY_ACK) {\r\n            const start = i + 1;\r\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\r\n            const buf = str.substring(start, i);\r\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\r\n                throw new Error(\"Illegal attachments\");\r\n            }\r\n            p.attachments = Number(buf);\r\n        }\r\n        // look up namespace (if any)\r\n        if (\"/\" === str.charAt(i + 1)) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (\",\" === c)\r\n                    break;\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.nsp = str.substring(start, i);\r\n        }\r\n        else {\r\n            p.nsp = \"/\";\r\n        }\r\n        // look up id\r\n        const next = str.charAt(i + 1);\r\n        if (\"\" !== next && Number(next) == next) {\r\n            const start = i + 1;\r\n            while (++i) {\r\n                const c = str.charAt(i);\r\n                if (null == c || Number(c) != c) {\r\n                    --i;\r\n                    break;\r\n                }\r\n                if (i === str.length)\r\n                    break;\r\n            }\r\n            p.id = Number(str.substring(start, i + 1));\r\n        }\r\n        // look up json data\r\n        if (str.charAt(++i)) {\r\n            const payload = tryParse(str.substr(i));\r\n            if (Decoder.isPayloadValid(p.type, payload)) {\r\n                p.data = payload;\r\n            }\r\n            else {\r\n                throw new Error(\"invalid payload\");\r\n            }\r\n        }\r\n        return p;\r\n    }\r\n    static isPayloadValid(type, payload) {\r\n        switch (type) {\r\n            case PacketType.CONNECT:\r\n                return typeof payload === \"object\";\r\n            case PacketType.DISCONNECT:\r\n                return payload === undefined;\r\n            case PacketType.CONNECT_ERROR:\r\n                return typeof payload === \"string\" || typeof payload === \"object\";\r\n            case PacketType.EVENT:\r\n            case PacketType.BINARY_EVENT:\r\n                return Array.isArray(payload) && payload.length > 0;\r\n            case PacketType.ACK:\r\n            case PacketType.BINARY_ACK:\r\n                return Array.isArray(payload);\r\n        }\r\n    }\r\n    /**\r\n     * Deallocates a parser's resources\r\n     */\r\n    destroy() {\r\n        if (this.reconstructor) {\r\n            this.reconstructor.finishedReconstruction();\r\n        }\r\n    }\r\n}\r\nfunction tryParse(str) {\r\n    try {\r\n        return JSON.parse(str);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n}\r\n/**\r\n * A manager of a binary event's 'buffer sequence'. Should\r\n * be constructed whenever a packet of type BINARY_EVENT is\r\n * decoded.\r\n *\r\n * @param {Object} packet\r\n * @return {BinaryReconstructor} initialized reconstructor\r\n */\r\nclass BinaryReconstructor {\r\n    constructor(packet) {\r\n        this.packet = packet;\r\n        this.buffers = [];\r\n        this.reconPack = packet;\r\n    }\r\n    /**\r\n     * Method to be called when binary data received from connection\r\n     * after a BINARY_EVENT packet.\r\n     *\r\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\r\n     * @return {null | Object} returns null if more binary data is expected or\r\n     *   a reconstructed packet object if all buffers have been received.\r\n     */\r\n    takeBinaryData(binData) {\r\n        this.buffers.push(binData);\r\n        if (this.buffers.length === this.reconPack.attachments) {\r\n            // done with buffer list\r\n            const packet = reconstructPacket(this.reconPack, this.buffers);\r\n            this.finishedReconstruction();\r\n            return packet;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Cleans up binary packet reconstruction variables.\r\n     */\r\n    finishedReconstruction() {\r\n        this.reconPack = null;\r\n        this.buffers = [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}