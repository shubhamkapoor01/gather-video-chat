{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nimport * as log from './log';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\n\nexport function getKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\n\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  const it = kernelRegistry.entries();\n  const result = [];\n\n  while (true) {\n    const {\n      done,\n      value\n    } = it.next();\n\n    if (done) {\n      break;\n    }\n\n    const [key, config] = value;\n    const [backend] = key.split('_');\n\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n\n  return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\n\nexport function registerKernel(config) {\n  const {\n    kernelName,\n    backendName\n  } = config;\n  const key = makeKey(kernelName, backendName);\n\n  if (kernelRegistry.has(key)) {\n    log.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);\n  }\n\n  kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\n\nexport function registerGradient(config) {\n  const {\n    kernelName\n  } = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n\n  gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\n\nexport function unregisterKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n\n  if (!kernelRegistry.has(key)) {\n    throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);\n  }\n\n  kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\n\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n  }\n\n  gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\n\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig = Object.assign({}, kernelConfig, {\n      backendName: newBackendName\n    });\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName, backendName) {\n  return `${backendName}_${kernelName}`;\n}","map":{"version":3,"sources":["../../../../../tfjs-core/src/kernel_registry.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,GAAR,QAAkB,eAAlB;AACA,SAAQ,SAAR,QAAwB,eAAxB;AACA,OAAO,KAAK,GAAZ,MAAqB,OAArB;AAKA,MAAM,cAAc,GAChB,SAAS,CAAC,gBAAD,EAAmB,MAAM,IAAI,GAAJ,EAAzB,CADb;AAEA,MAAM,YAAY,GACd,SAAS,CAAC,cAAD,EAAiB,MAAM,IAAI,GAAJ,EAAvB,CADb;AA+DA;;;;;AAKG;;AACH,OAAM,SAAU,SAAV,CACF,UADE,EACkB,WADlB,EACqC;AACzC,QAAM,GAAG,GAAG,OAAO,CAAC,UAAD,EAAa,WAAb,CAAnB;AACA,SAAO,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,WAAV,CAAsB,UAAtB,EAAwC;AAC5C,SAAO,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAP;AACD;AAED,OAAM,SAAU,oBAAV,CAA+B,WAA/B,EAAkD;AACtD,QAAM,EAAE,GAAG,cAAc,CAAC,OAAf,EAAX;AACA,QAAM,MAAM,GAAmB,EAA/B;;AAEA,SAAO,IAAP,EAAa;AACX,UAAM;AAAC,MAAA,IAAD;AAAO,MAAA;AAAP,QAAgB,EAAE,CAAC,IAAH,EAAtB;;AACA,QAAI,IAAJ,EAAU;AACR;AACD;;AACD,UAAM,CAAC,GAAD,EAAM,MAAN,IAAgB,KAAtB;AACA,UAAM,CAAC,OAAD,IAAc,GAAG,CAAC,KAAJ,CAAU,GAAV,CAApB;;AACA,QAAI,OAAO,KAAK,WAAhB,EAA6B;AAC3B,MAAA,MAAM,CAAC,IAAP,CAAY,MAAZ;AACD;AACF;;AACD,SAAO,MAAP;AACD;AAED;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,cAAV,CAAyB,MAAzB,EAA6C;AACjD,QAAM;AAAC,IAAA,UAAD;AAAa,IAAA;AAAb,MAA4B,MAAlC;AACA,QAAM,GAAG,GAAG,OAAO,CAAC,UAAD,EAAa,WAAb,CAAnB;;AACA,MAAI,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAJ,EAA6B;AAC3B,IAAA,GAAG,CAAC,IAAJ,CACI,eAAe,UAAU,gBAAzB,GACA,IAAI,WAAW,yBAFnB;AAGD;;AACD,EAAA,cAAc,CAAC,GAAf,CAAmB,GAAnB,EAAwB,MAAxB;AACD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,gBAAV,CAA2B,MAA3B,EAA6C;AACjD,QAAM;AAAC,IAAA;AAAD,MAAe,MAArB;;AAEA,MAAI,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAJ,EAAkC;AAChC;AACA;AACA,QAAI,GAAG,GAAG,OAAN,CAAc,OAAd,CAAJ,EAA4B;AAC1B,MAAA,GAAG,CAAC,IAAJ,CAAS,gCAAgC,UAAU,GAAnD;AACD;AACF;;AACD,EAAA,YAAY,CAAC,GAAb,CAAiB,UAAjB,EAA6B,MAA7B;AACD;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,gBAAV,CACF,UADE,EACkB,WADlB,EACqC;AACzC,QAAM,GAAG,GAAG,OAAO,CAAC,UAAD,EAAa,WAAb,CAAnB;;AACA,MAAI,CAAC,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAL,EAA8B;AAC5B,UAAM,IAAI,KAAJ,CACF,eAAe,UAAU,gBAAzB,GACA,IAAI,WAAW,qBAFb,CAAN;AAGD;;AACD,EAAA,cAAc,CAAC,MAAf,CAAsB,GAAtB;AACD;AAED;;AACA,OAAM,SAAU,kBAAV,CAA6B,UAA7B,EAA+C;AACnD,MAAI,CAAC,YAAY,CAAC,GAAb,CAAiB,UAAjB,CAAL,EAAmC;AACjC,UAAM,IAAI,KAAJ,CACF,iBAAiB,UAAU,iCADzB,CAAN;AAED;;AACD,EAAA,YAAY,CAAC,MAAb,CAAoB,UAApB;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,qBAAV,CACF,qBADE,EAC6B,cAD7B,EACmD;AACvD,QAAM,OAAO,GAAG,oBAAoB,CAAC,qBAAD,CAApC;AACA,EAAA,OAAO,CAAC,OAAR,CAAgB,YAAY,IAAG;AAC7B,UAAM,eAAe,GACjB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,YAAlB,EAAgC;AAAC,MAAA,WAAW,EAAE;AAAd,KAAhC,CADJ;AAEA,IAAA,cAAc,CAAC,eAAD,CAAd;AACD,GAJD;AAKD;;AAED,SAAS,OAAT,CAAiB,UAAjB,EAAqC,WAArC,EAAwD;AACtD,SAAO,GAAG,WAAW,IAAI,UAAU,EAAnC;AACD","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from './environment';\nimport {getGlobal} from './global_util';\nimport * as log from './log';\nimport {NamedGradientMap} from './tape';\nimport {Tensor} from './tensor';\nimport {DataType, RecursiveArray} from './types';\n\nconst kernelRegistry =\n    getGlobal('kernelRegistry', () => new Map<string, KernelConfig>());\nconst gradRegistry =\n    getGlobal('gradRegistry', () => new Map<string, GradConfig>());\n\nexport type DataId = object;\n\ntype AttributeValue =\n    number|number[]|boolean|boolean[]|string|string[]|NamedAttrMap;\n\n/** These are extra non-tensor/primitive params passed to kernel functions. */\nexport type Attribute = AttributeValue|RecursiveArray<AttributeValue>;\n\n/** Specifies the code to run when executing a kernel. */\nexport type KernelFunc = (params: {\n  inputs: NamedTensorInfoMap,\n  backend: {},\n  attrs?: NamedAttrMap,\n}) => TensorInfo|TensorInfo[];\n\n/** The function to run when computing a gradient during backprop. */\nexport type GradFunc =\n    (dy: Tensor|Tensor[], saved: Tensor[], attrs: NamedAttrMap) =>\n        NamedGradientMap;\n\n/** Function that gets called after the backend initializes. */\nexport type KernelSetupFunc = (backend: {}) => void;\n/** Function that gets called right before the backend is disposed. */\nexport type KernelDisposeFunc = KernelSetupFunc;\n\n/** Config object for registering a kernel in the global registry. */\nexport interface KernelConfig {\n  kernelName: string;\n  backendName: string;\n  kernelFunc: KernelFunc;\n  setupFunc?: KernelSetupFunc;\n  disposeFunc?: KernelDisposeFunc;\n}\n\n/** Config object for registering a gradient in the global registry. */\nexport interface GradConfig {\n  kernelName: string;\n  inputsToSave?: string[];\n  // When saveAllInputs is true, all inputs will be saved. Only use this flag\n  // if inputs is an array of Tensors.\n  saveAllInputs?: boolean;\n  outputsToSave?: boolean[];\n  gradFunc: GradFunc;\n}\n\n/** Holds metadata for a given tensor. */\nexport interface TensorInfo {\n  dataId: DataId;\n  shape: number[];\n  dtype: DataType;\n}\n\nexport interface NamedTensorInfoMap {\n  [name: string]: TensorInfo|undefined;\n}\n\nexport interface NamedAttrMap {\n  [name: string]: Attribute;\n}\n\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(\n    kernelName: string, backendName: string): KernelConfig {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName: string): GradConfig {\n  return gradRegistry.get(kernelName);\n}\n\nexport function getKernelsForBackend(backendName: string): KernelConfig[] {\n  const it = kernelRegistry.entries();\n  const result: KernelConfig[] = [];\n\n  while (true) {\n    const {done, value} = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend, ] = key.split('_');\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config: KernelConfig) {\n  const {kernelName, backendName} = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    log.warn(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\n\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config: GradConfig) {\n  const {kernelName} = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\n\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(\n    kernelName: string, backendName: string): void {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\n\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName: string): void {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\n        `The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\n\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(\n    registeredBackendName: string, newBackendName: string): void {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig =\n        Object.assign({}, kernelConfig, {backendName: newBackendName});\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName: string, backendName: string) {\n  return `${backendName}_${kernelName}`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}