{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { reshape } from '../../ops/reshape';\nimport { getGlobalTensorClass } from '../../tensor';\n/**\r\n * Converts a `tf.Tensor` to a `tf.Tensor3D`.\r\n *\r\n * @param rows Number of rows in `tf.Tensor3D`.\r\n * @param columns Number of columns in `tf.Tensor3D`.\r\n * @param depth Depth of `tf.Tensor3D`.\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\n\ngetGlobalTensorClass().prototype.as3D = function (rows, columns, depth) {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns, depth]);\n};","map":{"version":3,"sources":["../../../../../../../tfjs-core/src/public/chained_ops/as3d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,OAAR,QAAsB,mBAAtB;AACA,SAAQ,oBAAR,QAA2C,cAA3C;AAUA;;;;;;;AAOG;;AACH,oBAAoB,GAAG,SAAvB,CAAiC,IAAjC,GAAwC,UACpC,IADoC,EACtB,OADsB,EACL,KADK,EACQ;AAC9C,OAAK,eAAL;AACA,SAAO,OAAO,CAAC,IAAD,EAAO,CAAC,IAAD,EAAO,OAAP,EAAgB,KAAhB,CAAP,CAAd;AACD,CAJD","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {reshape} from '../../ops/reshape';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    as3D<T extends Tensor>(rows: number, columns: number, depth: number):\n        Tensor3D;\n  }\n}\n\n/**\n * Converts a `tf.Tensor` to a `tf.Tensor3D`.\n *\n * @param rows Number of rows in `tf.Tensor3D`.\n * @param columns Number of columns in `tf.Tensor3D`.\n * @param depth Depth of `tf.Tensor3D`.\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\ngetGlobalTensorClass().prototype.as3D = function<T extends Tensor>(\n    rows: number, columns: number, depth: number): T {\n  this.throwIfDisposed();\n  return reshape(this, [rows, columns, depth]) as T;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}