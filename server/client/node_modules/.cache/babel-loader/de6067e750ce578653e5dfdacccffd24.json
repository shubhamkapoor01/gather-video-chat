{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { AvgPool, backend_util, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function avgPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\nexport const avgPoolConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/AvgPool.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AACH,SAAQ,OAAR,EAA8C,YAA9C,EAAkG,IAAlG,QAA6G,uBAA7G;AAGA,SAAQ,aAAR,QAA4B,aAA5B;AACA,SAAQ,gBAAR,QAA+B,eAA/B;AACA,SAAQ,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AAAC,IAAA;AAAD,MAAM,MAAZ;AACA,EAAA,gBAAgB,CAAC,CAAD,EAAI,SAAJ,CAAhB;AACA,QAAM;AAAC,IAAA,UAAD;AAAa,IAAA,OAAb;AAAsB,IAAA,GAAtB;AAA2B,IAAA;AAA3B,MAA8C,KAApD;AACA,QAAM,SAAS,GAAG,CAAlB;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,YAAY,CAAC,8BAAb,CAA4C,OAA5C,EAAqD,SAArD,CADJ,EAEI,MAAM,8DACF,eAAe,OAAO,mBAAmB,SAAS,GAH1D;AAKA,QAAM,QAAQ,GAAG,YAAY,CAAC,iBAAb,CACb,CAAC,CAAC,KADW,EACgC,UADhC,EAC4C,OAD5C,EAEb,SAFa,EAEF,GAFE,EAEG,eAFH,CAAjB;;AAGA,MAAI,QAAQ,CAAC,WAAT,KAAyB,CAAzB,IAA8B,QAAQ,CAAC,YAAT,KAA0B,CAAxD,IACA,IAAI,CAAC,WAAL,CAAiB,QAAQ,CAAC,OAA1B,EAAmC,QAAQ,CAAC,QAA5C,CADJ,EAC2D;AACzD,WAAO,QAAQ,CAAC;AAAC,MAAA,MAAM,EAAE;AAAC,QAAA;AAAD,OAAT;AAAc,MAAA;AAAd,KAAD,CAAf;AACD;;AACD,QAAM,cAAc,GAAG,IAAI,aAAJ,CAAkB,QAAlB,EAA4B,KAA5B,EAAmC,KAAnC,CAAvB;AACA,SAAO,OAAO,CAAC,eAAR,CAAwB,cAAxB,EAAwC,CAAC,CAAD,CAAxC,EAA6C,SAA7C,CAAP;AACD;AAED,OAAO,MAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,OAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}