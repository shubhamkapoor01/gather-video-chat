{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\r\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\r\n * complex tensors share data with their real and imaginary components. Complex\r\n * tensors' reference to the components is tracked by refCount on the individual\r\n * component. The refCounts are increased by the identity call.\r\n *\r\n * When a complex tensor is disposed, it will reduce the refCount on the\r\n * components by calling disposeData on each.\r\n */\n\nexport function complex(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    real,\n    imag\n  } = inputs;\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n  const realTensorInfo = identity({\n    inputs: {\n      x: real\n    },\n    backend\n  });\n  const imagTensorInfo = identity({\n    inputs: {\n      x: imag\n    },\n    backend\n  });\n  complex.complexTensorInfos = {\n    real: realTensorInfo,\n    imag: imagTensorInfo\n  };\n  return complexInfo;\n}\nexport const complexConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Complex.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,OAAR,QAA2E,uBAA3E;AAGA,SAAQ,QAAR,QAAuB,YAAvB;AAEA;;;;;;;;AAQG;;AACH,OAAM,SAAU,OAAV,CACF,IADE,EACsD;AAC1D,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAoB,IAA1B;AACA,QAAM;AAAC,IAAA,IAAD;AAAO,IAAA;AAAP,MAAe,MAArB;AAEA,QAAM,WAAW,GAAG,OAAO,CAAC,cAAR,CAAuB,IAAI,CAAC,KAA5B,EAAmC,WAAnC,CAApB;AACA,QAAM,OAAO,GAAG,OAAO,CAAC,OAAR,CAAgB,GAAhB,CAAoB,WAAW,CAAC,MAAhC,CAAhB;AAEA,QAAM,cAAc,GAAG,QAAQ,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAoB,IAAA;AAApB,GAAD,CAA/B;AAEA,QAAM,cAAc,GAAG,QAAQ,CAAC;AAAC,IAAA,MAAM,EAAE;AAAC,MAAA,CAAC,EAAE;AAAJ,KAAT;AAAoB,IAAA;AAApB,GAAD,CAA/B;AAEA,EAAA,OAAO,CAAC,kBAAR,GAA6B;AAAC,IAAA,IAAI,EAAE,cAAP;AAAuB,IAAA,IAAI,EAAE;AAA7B,GAA7B;AAEA,SAAO,WAAP;AACD;AAED,OAAO,MAAM,aAAa,GAAiB;AACzC,EAAA,UAAU,EAAE,OAD6B;AAEzC,EAAA,WAAW,EAAE,OAF4B;AAGzC,EAAA,UAAU,EAAE;AAH6B,CAApC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}