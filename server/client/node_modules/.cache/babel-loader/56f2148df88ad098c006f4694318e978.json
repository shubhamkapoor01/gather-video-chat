{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { gatherNdImpl } from './GatherNd_Impl';\nexport function gatherNd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const paramsSize = util.sizeFromShape(params.shape);\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values;\n  const paramsBuf = backend.bufferSync(params);\n  const outBuf = gatherNdImpl(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-cpu/src/kernels/GatherNd.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,YAAR,EAAsB,QAAtB,EAAkG,IAAlG,QAA6G,uBAA7G;AAIA,SAAQ,YAAR,QAA2B,iBAA3B;AAEA,OAAM,SAAU,QAAV,CACF,IADE,EACqD;AACzD,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAoB,IAA1B;AACA,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA;AAAT,MAAoB,MAA1B;AAEA,QAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,MAAM,CAAC,KAA1B,CAAnB;AAEA,QAAM,YAAY,GAAG,OAAO,CAAC,KAA7B;AACA,QAAM,SAAS,GAAG,YAAY,CAAC,YAAY,CAAC,MAAb,GAAsB,CAAvB,CAA9B;AAEA,QAAM,CAAC,WAAD,EAAc,SAAd,EAAyB,SAAzB,EAAoC,OAApC,IACF,YAAY,CAAC,kBAAb,CAAgC,MAAhC,EAAwC,OAAxC,CADJ;;AAEA,MAAI,SAAS,KAAK,CAAlB,EAAqB;AACnB,WAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,MAAM,CAAC,KAA3C,EAAkD,EAAlD,CAAP;AACD;;AAED,QAAM,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,OAAO,CAAC,MAAzB,EAAiC,MAArD;AACA,QAAM,SAAS,GAAG,OAAO,CAAC,UAAR,CAAmB,MAAnB,CAAlB;AACA,QAAM,MAAM,GAAG,YAAY,CACvB,WADuB,EACV,SADU,EACC,MAAM,CAAC,KADR,EACe,SADf,EAC0B,SAD1B,EACqC,SADrC,EAEvB,OAFuB,EAEd,MAAM,CAAC,KAFO,EAEA,UAFA,CAA3B;AAIA,SAAO,OAAO,CAAC,cAAR,CAAuB,WAAvB,EAAoC,MAAM,CAAC,KAA3C,EAAkD,MAAM,CAAC,MAAzD,CAAP;AACD;AAED,OAAO,MAAM,cAAc,GAAiB;AAC1C,EAAA,UAAU,EAAE,QAD8B;AAE1C,EAAA,WAAW,EAAE,KAF6B;AAG1C,EAAA,UAAU,EAAE;AAH8B,CAArC","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}