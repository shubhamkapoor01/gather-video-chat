{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from '../tensor1d';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport { slice } from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\n\nfunction threshold_(image, method = 'binary', inverted = false, threshValue = 0.5) {\n  const $image = convertToTensor(image, 'image', 'threshold');\n  /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n  Reference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n\n  const RED_INTENCITY_COEF = 0.2989;\n  const GREEN_INTENCITY_COEF = 0.5870;\n  const BLUE_INTENCITY_COEF = 0.1140;\n  const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n  let $threshold = mul(tensor1d([threshValue]), 255);\n  let r, g, b, grayscale;\n  util.assert($image.rank === 3, () => 'Error in threshold: image must be rank 3,' + `but got rank ${$image.rank}.`);\n  util.assert($image.shape[2] === 3 || $image.shape[2] === 1, () => 'Error in threshold: ' + 'image color channel must be equal to 3 or 1' + `but got ${$image.shape[2]}.`);\n  util.assert($image.dtype === 'int32' || $image.dtype === 'float32', () => 'Error in dtype: image dtype must be int32 or float32,' + `but got dtype ${$image.dtype}.`);\n  util.assert(method === 'otsu' || method === 'binary', () => `Method must be binary or otsu, but was ${method}`);\n\n  if ($image.shape[2] === 3) {\n    [r, g, b] = split($image, [1, 1, 1], -1);\n    const $r = mul(r, RED_INTENCITY_COEF);\n    const $g = mul(g, GREEN_INTENCITY_COEF);\n    const $b = mul(b, BLUE_INTENCITY_COEF);\n    grayscale = add(add($r, $g), $b);\n  } else {\n    grayscale = image;\n  }\n\n  if (method === 'otsu') {\n    const $histogram = bincount(cast(round(grayscale), 'int32'), tensor([]), 256);\n    $threshold = otsu($histogram, totalPixelsInImage);\n  }\n\n  const invCondition = inverted ? lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n  const result = cast(mul(invCondition, 255), 'int32');\n  return result;\n}\n\nfunction otsu(histogram, total) {\n  let bestThresh = tensor1d([-1]);\n  let bestInBetVar = tensor1d([0]);\n  let cInBetVar = tensor1d([0]);\n  let classFirst, classSecond, meanFirst, meanSec, weightForeground, weightBack;\n\n  for (let index = 0; index < histogram.size - 1; index++) {\n    classFirst = slice(histogram, 0, index + 1);\n    classSecond = slice(histogram, index + 1);\n    weightForeground = div(sum(classFirst), total);\n    weightBack = div(sum(classSecond), total);\n    const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n    meanFirst = div(meanFirstDivA, sum(classFirst));\n    const meanSecFill = fill(classSecond.shape, classFirst.size);\n    const meanSecAdd = add(range(0, classSecond.size), meanSecFill);\n    const meanSecMul = mul(classSecond, meanSecAdd);\n    meanSec = div(sum(meanSecMul), sum(classSecond));\n    const cInBetVarSubA = sub(meanFirst, meanSec);\n    const cInBetVarSubB = sub(meanFirst, meanSec);\n    const cInBetVarMul = mul(weightForeground, weightBack);\n    cInBetVar = mul(mul(cInBetVarMul, cInBetVarSubA), cInBetVarSubB);\n    const condition = greater(cInBetVar, bestInBetVar);\n    bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n    bestThresh = where(condition, tensor1d([index]), bestThresh);\n  }\n\n  return bestThresh;\n}\n\nexport const threshold = op({\n  threshold_\n});","map":{"version":3,"sources":["../../../../../../../tfjs-core/src/ops/image/threshold.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport { Tensor1D, Tensor3D } from '../../tensor';\nimport { tensor1d } from '../tensor1d';\nimport { TensorLike } from '../../types';\nimport { op } from '../operation';\nimport { cast } from '../cast';\nimport { split } from '../split';\nimport { bincount } from '../bincount';\nimport { lessEqual } from '../less_equal';\nimport { greater } from '../greater';\nimport { sum } from '../sum';\nimport { add } from '../add';\nimport { mul } from '../mul';\nimport { div } from '../div';\nimport { sub } from '../sub';\nimport { round } from '../round';\nimport { where } from '../where';\nimport { fill } from '../fill';\nimport {slice} from '../slice';\nimport { range } from '../range';\nimport { tensor } from '../tensor';\nimport * as util from '../../util';\nimport { convertToTensor } from '../../tensor_util_env';\n\n/**\n * Performs image binarization with corresponding threshold\n * (depends on the method)value, which creates a binary image from a grayscale.\n * @param image 3d tensor of shape [imageHeight,imageWidth, depth],\n * where imageHeight and imageWidth must be positive.The image color\n * range should be [0, 255].\n * @param method Optional string from `'binary' | 'otsu'`\n * which specifies the method for thresholding. Defaults to 'binary'.\n * @param inverted Optional boolean whichspecifies\n * if colours should be inverted. Defaults to false.\n * @param threshValue Optional number which defines threshold value from 0 to 1.\n * Defaults to 0.5.\n * @return A 3d tensor of shape [imageHeight,imageWidth, depth], which\n * contains binarized image.\n */\n\nfunction threshold_(\n    image: Tensor3D | TensorLike,\n    method = 'binary',\n    inverted = false,\n    threshValue = 0.5\n): Tensor3D {\n    const $image = convertToTensor(image, 'image', 'threshold');\n\n    /* 0.2989, 0.5870, 0.1140 are represent luma coefficients in CCIR601.\n\tReference for converting between RGB and grayscale: https://en.wikipedia.org/wiki/Luma_%28video%29  */\n\n    const RED_INTENCITY_COEF = 0.2989;\n    const GREEN_INTENCITY_COEF = 0.5870;\n    const BLUE_INTENCITY_COEF = 0.1140;\n    const totalPixelsInImage = $image.shape[0] * $image.shape[1];\n\n    let $threshold = mul(tensor1d([threshValue]), 255);\n    let r, g, b, grayscale;\n\n    util.assert(\n        $image.rank === 3,\n        () => 'Error in threshold: image must be rank 3,' +\n            `but got rank ${$image.rank}.`);\n\n    util.assert(\n        $image.shape[2] === 3 || $image.shape[2]=== 1,\n        () => 'Error in threshold: ' +\n            'image color channel must be equal to 3 or 1' +\n            `but got ${$image.shape[2]}.`);\n\n    util.assert(\n      $image.dtype === 'int32' || $image.dtype === 'float32',\n      () => 'Error in dtype: image dtype must be int32 or float32,' +\n          `but got dtype ${$image.dtype}.`);\n\n    util.assert(\n      method === 'otsu' || method === 'binary',\n      () => `Method must be binary or otsu, but was ${method}`);\n\n    if ($image.shape[2] === 3) {\n        [r, g, b] = split($image, [1, 1, 1], -1);\n        const $r = mul(r,RED_INTENCITY_COEF);\n        const $g = mul(g,GREEN_INTENCITY_COEF);\n        const $b = mul(b,BLUE_INTENCITY_COEF);\n        grayscale = add(add($r, $g), $b);\n    } else {\n        grayscale = image;\n    }\n\n    if (method === 'otsu') {\n        const $histogram = bincount(cast(round(grayscale), 'int32') as Tensor1D,\n            tensor([]),\n            256);\n        $threshold = otsu($histogram, totalPixelsInImage);\n    }\n\n    const invCondition = inverted ?\n        lessEqual(grayscale, $threshold) : greater(grayscale, $threshold);\n\n    const result = cast(mul(invCondition,255), 'int32');\n\n    return result as Tensor3D;\n}\n\nfunction otsu(histogram: Tensor1D, total: number):Tensor1D {\n\n    let bestThresh = tensor1d([-1]);\n    let bestInBetVar = tensor1d([0]);\n    let cInBetVar = tensor1d([0]);\n    let classFirst, classSecond, meanFirst,\n        meanSec, weightForeground, weightBack;\n\n    for (let index = 0; index < histogram.size-1; index++) {\n\n        classFirst = slice(histogram, 0, index + 1);\n\n        classSecond = slice(histogram,index + 1);\n\n        weightForeground = div(sum(classFirst),total);\n\n        weightBack = div(sum(classSecond),total);\n\n        const meanFirstDivA = sum(mul(classFirst, range(0, classFirst.size)));\n\n        meanFirst = div(meanFirstDivA, sum(classFirst) );\n\n        const meanSecFill = fill(classSecond.shape, classFirst.size);\n        const meanSecAdd = add(range(0,classSecond.size),meanSecFill);\n        const meanSecMul = mul(classSecond, (meanSecAdd));\n        meanSec = div(sum(meanSecMul), sum(classSecond));\n\n        const cInBetVarSubA = sub(meanFirst, meanSec);\n        const cInBetVarSubB = sub(meanFirst, meanSec);\n        const cInBetVarMul = mul(weightForeground, weightBack);\n        cInBetVar = mul(mul(cInBetVarMul,cInBetVarSubA), cInBetVarSubB);\n\n        const condition = greater(cInBetVar, bestInBetVar);\n\n        bestInBetVar = where(condition, cInBetVar, bestInBetVar);\n\n        bestThresh = where(condition, tensor1d([index]), bestThresh);\n\n    }\n    return bestThresh;\n}\n\nexport const threshold = op({ threshold_ });\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}