{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\n\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo = {\n    windowSize,\n    inSize,\n    batchSize,\n    outSize: Math.ceil(inSize / windowSize)\n  };\n  const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n\n  const output = backend.runWebGLProgram(program, inputs, 'int32'); // No need to run another GPGPU program.\n\n  if (output.shape[1] === 1) {\n    return output;\n  }\n\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n\n  return output;\n}\n\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = []; // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: xUnPacked\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    intermediateTensorInfos.push(a2D);\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n\n  return argReducePacked(backend, x, reduceType);\n}","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}