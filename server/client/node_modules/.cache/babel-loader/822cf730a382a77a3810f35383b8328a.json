{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { IFFT } from '../../kernel_names';\nimport { assert } from '../../util';\nimport { op } from '../operation';\n/**\r\n * Inverse fast Fourier transform.\r\n *\r\n * Computes the inverse 1-dimensional discrete Fourier transform over the\r\n * inner-most dimension of input.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([1, 2, 3]);\r\n * const imag = tf.tensor1d([1, 2, 3]);\r\n * const x = tf.complex(real, imag);\r\n *\r\n * x.ifft().print();  // tf.spectral.ifft(x).print();\r\n * ```\r\n * @param input The complex input to compute an ifft over.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\r\n */\n\nfunction ifft_(input) {\n  assert(input.dtype === 'complex64', () => `The dtype for tf.spectral.ifft() must be complex64 ` + `but got ${input.dtype}.`);\n  const inputs = {\n    input\n  };\n  return ENGINE.runKernel(IFFT, inputs);\n}\n\nexport const ifft = op({\n  ifft_\n});","map":{"version":3,"sources":["../../../../../../../tfjs-core/src/ops/spectral/ifft.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAQ,MAAR,QAAqB,cAArB;AACA,SAAQ,IAAR,QAA+B,oBAA/B;AAGA,SAAQ,MAAR,QAAqB,YAArB;AACA,SAAQ,EAAR,QAAiB,cAAjB;AAEA;;;;;;;;;;;;;;;;AAgBG;;AACH,SAAS,KAAT,CAAe,KAAf,EAA4B;AAC1B,EAAA,MAAM,CACF,KAAK,CAAC,KAAN,KAAgB,WADd,EAEF,MAAM,qDAAA,GACF,WAAW,KAAK,CAAC,KAAK,GAHxB,CAAN;AAKA,QAAM,MAAM,GAAe;AAAC,IAAA;AAAD,GAA3B;AAEA,SAAO,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAuB,MAAvB,CAAP;AACD;;AAED,OAAO,MAAM,IAAI,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAf","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {IFFT, IFFTInputs} from '../../kernel_names';\nimport {Tensor} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {assert} from '../../util';\nimport {op} from '../operation';\n\n/**\n * Inverse fast Fourier transform.\n *\n * Computes the inverse 1-dimensional discrete Fourier transform over the\n * inner-most dimension of input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([1, 2, 3]);\n * const x = tf.complex(real, imag);\n *\n * x.ifft().print();  // tf.spectral.ifft(x).print();\n * ```\n * @param input The complex input to compute an ifft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction ifft_(input: Tensor): Tensor {\n  assert(\n      input.dtype === 'complex64',\n      () => `The dtype for tf.spectral.ifft() must be complex64 ` +\n          `but got ${input.dtype}.`);\n\n  const inputs: IFFTInputs = {input};\n\n  return ENGINE.runKernel(IFFT, inputs as {} as NamedTensorMap);\n}\n\nexport const ifft = op({ifft_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}