{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nexport function compileProgram(gpgpu, program, inputs, output) {\n  const inputInfos = inputs.map((input, i) => {\n    const shapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n\n    if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n\n    return {\n      name: program.variableNames[i],\n      shapeInfo\n    };\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const webGLProgram = gpgpu.createProgram(source); // Add special uniforms (NAN, INFINITY)\n\n  let infLoc = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  } // Add user-defined uniforms\n\n\n  const shouldThrow = false;\n  const uniformLocations = {};\n  const inShapesLocations = {};\n  const inTexShapesLocations = {};\n\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] = gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] = gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  let outShapeLocation;\n  let outTexShapeLocation;\n  let outShapeStridesLocation;\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation = gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  const customUniformLocations = [];\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] = gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    customUniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` + `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(`Binary was compiled with different shapes than ` + `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    } // The input is uploaded as uniform.\n\n\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(`Binary was compiled with different texture shapes than the` + ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram(gpgpu, binary, inputs, output, customUniformValues) {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n\n  gpgpu.setProgram(binary.webGLProgram); // Set special uniforms (NAN, INFINITY)\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  } // Set user-defined inputs\n\n\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {\n        uniformShape\n      } = shader_compiler.getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);\n\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n\n      return;\n    } // If the input was sliced, upload the flat offset index.\n\n\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n  const outShapeLoc = binary.outShapeLocation;\n\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n\n      case 3:\n        gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n\n      case 4:\n        gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n\n  gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0; // TODO: Remove the condition of !x.isUniform.\n\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {\n        useSqueezeShape,\n        uniformShape,\n        keptDims\n      } = shader_compiler.getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);\n      let rank1 = '',\n          rank2 = '',\n          rank34 = '';\n\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;\n      }\n\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual = uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims = backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs && xRank === output.shape.length && util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ? '' : `${xTexShape[0] > 1}_${xTexShape[1] > 1}`; // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name; // Fast string concat. See https://jsperf.com/string-concatenation/14.\n\n  key += '_' + keyInputs + '_' + keyUserCode + `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\nexport function useShapeUniforms(rank) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}","map":{"version":3,"sources":["../../../../../tfjs-backend-webgl/src/gpgpu_math.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inTexShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] =\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    customUniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}