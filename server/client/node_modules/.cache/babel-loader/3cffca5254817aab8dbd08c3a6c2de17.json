{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { tile } from '../tile';\n/**\n * Converts images from grayscale to RGB format.\n *\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\n *     be size 1 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction grayscaleToRGB_(image) {\n  const $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n  const lastDimsIdx = $image.rank - 1;\n  const lastDims = $image.shape[lastDimsIdx];\n  util.assert($image.rank >= 2, () => 'Error in grayscaleToRGB: images must be at least rank 2, ' + `but got rank ${$image.rank}.`);\n  util.assert(lastDims === 1, () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' + `should be size 1, but got size ${lastDims}.`);\n  const reps = new Array($image.rank);\n  reps.fill(1, 0, lastDimsIdx);\n  reps[lastDimsIdx] = 3;\n  return tile($image, reps);\n}\n\nexport const grayscaleToRGB = op({\n  grayscaleToRGB_\n});","map":{"version":3,"sources":["../../../../../../../tfjs-core/src/ops/image/grayscale_to_rgb.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAGH,SAAQ,eAAR,QAA8B,uBAA9B;AAEA,OAAO,KAAK,IAAZ,MAAsB,YAAtB;AAEA,SAAQ,EAAR,QAAiB,cAAjB;AACA,SAAQ,IAAR,QAAmB,SAAnB;AAEA;;;;;;;AAOG;;AACH,SAAS,eAAT,CACmC,KADnC,EACsD;AACpD,QAAM,MAAM,GAAG,eAAe,CAAC,KAAD,EAAQ,OAAR,EAAiB,gBAAjB,CAA9B;AAEA,QAAM,WAAW,GAAG,MAAM,CAAC,IAAP,GAAc,CAAlC;AACA,QAAM,QAAQ,GAAG,MAAM,CAAC,KAAP,CAAa,WAAb,CAAjB;AAEA,EAAA,IAAI,CAAC,MAAL,CACI,MAAM,CAAC,IAAP,IAAe,CADnB,EAEI,MAAM,8DACF,gBAAgB,MAAM,CAAC,IAAI,GAHnC;AAKA,EAAA,IAAI,CAAC,MAAL,CACI,QAAQ,KAAK,CADjB,EAEI,MAAM,kEACF,kCAAkC,QAAQ,GAHlD;AAKA,QAAM,IAAI,GAAG,IAAI,KAAJ,CAAU,MAAM,CAAC,IAAjB,CAAb;AAEA,EAAA,IAAI,CAAC,IAAL,CAAU,CAAV,EAAa,CAAb,EAAgB,WAAhB;AACA,EAAA,IAAI,CAAC,WAAD,CAAJ,GAAoB,CAApB;AAEA,SAAO,IAAI,CAAC,MAAD,EAAS,IAAT,CAAX;AACD;;AAED,OAAO,MAAM,cAAc,GAAG,EAAE,CAAC;AAAC,EAAA;AAAD,CAAD,CAAzB","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D, Tensor3D, Tensor4D, Tensor5D, Tensor6D} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {tile} from '../tile';\n\n/**\n * Converts images from grayscale to RGB format.\n *\n * @param image A grayscale tensor to convert. The `image`'s last dimension must\n *     be size 1 with at least a two-dimensional shape.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction grayscaleToRGB_<T extends Tensor2D|Tensor3D|Tensor4D|Tensor5D|\n                         Tensor6D>(image: T|TensorLike): T {\n  const $image = convertToTensor(image, 'image', 'grayscaleToRGB');\n\n  const lastDimsIdx = $image.rank - 1;\n  const lastDims = $image.shape[lastDimsIdx];\n\n  util.assert(\n      $image.rank >= 2,\n      () => 'Error in grayscaleToRGB: images must be at least rank 2, ' +\n          `but got rank ${$image.rank}.`);\n\n  util.assert(\n      lastDims === 1,\n      () => 'Error in grayscaleToRGB: last dimension of a grayscale image ' +\n          `should be size 1, but got size ${lastDims}.`);\n\n  const reps = new Array($image.rank);\n\n  reps.fill(1, 0, lastDimsIdx);\n  reps[lastDimsIdx] = 3;\n\n  return tile($image, reps);\n}\n\nexport const grayscaleToRGB = op({grayscaleToRGB_});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}