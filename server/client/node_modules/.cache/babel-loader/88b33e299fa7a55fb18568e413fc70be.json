{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImplCPU } from '../kernel_utils/shared';\nexport function stringNGrams(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {\n    data,\n    dataSplits\n  } = inputs;\n  const $data = backend.readSync(data.dataId);\n  const $dataSplits = backend.readSync(dataSplits.dataId);\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];\n}\nexport const stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams\n};","map":{"version":3,"sources":["../../../../../../tfjs-backend-webgl/src/kernels/StringNGrams.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;AAeG;AAEH,SAAkC,YAAlC,QAAwG,uBAAxG;AAGA,SAAQ,mBAAR,QAAkC,wBAAlC;AAEA,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAIL;AACC,QAAM;AAAC,IAAA,MAAD;AAAS,IAAA,OAAT;AAAkB,IAAA;AAAlB,MAA2B,IAAjC;AACA,QAAM;AACJ,IAAA,SADI;AAEJ,IAAA,WAFI;AAGJ,IAAA,OAHI;AAIJ,IAAA,QAJI;AAKJ,IAAA,QALI;AAMJ,IAAA;AANI,MAOF,KAPJ;AAQA,QAAM;AAAC,IAAA,IAAD;AAAO,IAAA;AAAP,MAAqB,MAA3B;AACA,QAAM,KAAK,GAAG,OAAO,CAAC,QAAR,CAAiB,IAAI,CAAC,MAAtB,CAAd;AACA,QAAM,WAAW,GAAG,OAAO,CAAC,QAAR,CAAiB,UAAU,CAAC,MAA5B,CAApB;AAEA,QAAM,CAAC,MAAD,EAAS,YAAT,IAAyB,mBAAmB,CAC9C,KAD8C,EACvC,WADuC,EAC1B,SAD0B,EACf,WADe,EACF,OADE,EACO,QADP,EACiB,QADjB,EAE9C,sBAF8C,CAAlD;AAGA,SAAO,CACL,OAAO,CAAC,cAAR,CAAuB,CAAC,MAAM,CAAC,MAAR,CAAvB,EAAwC,QAAxC,EAAkD,MAAlD,CADK,EAEL,OAAO,CAAC,cAAR,CAAuB,UAAU,CAAC,KAAlC,EAAyC,OAAzC,EAAkD,YAAlD,CAFK,CAAP;AAID;AAED,OAAO,MAAM,kBAAkB,GAAiB;AAC9C,EAAA,UAAU,EAAE,YADkC;AAE9C,EAAA,WAAW,EAAE,OAFiC;AAG9C,EAAA,UAAU,EAAE;AAHkC,CAAzC","sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}