{"ast":null,"code":"import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\n\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nexport class Socket extends Emitter {\n  /**\r\n   * `Socket` constructor.\r\n   *\r\n   * @public\r\n   */\n  constructor(io, nsp, opts) {\n    super();\n    this.connected = false;\n    this.disconnected = true;\n    this.receiveBuffer = [];\n    this.sendBuffer = [];\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n\n    if (this.io._autoConnect) this.open();\n  }\n  /**\r\n   * Subscribe to open, close and packet events\r\n   *\r\n   * @private\r\n   */\n\n\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\r\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n   */\n\n\n  get active() {\n    return !!this.subs;\n  }\n  /**\r\n   * \"Opens\" the socket.\r\n   *\r\n   * @public\r\n   */\n\n\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\r\n   * Alias for connect()\r\n   */\n\n\n  open() {\n    return this.connect();\n  }\n  /**\r\n   * Sends a `message` event.\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  send(...args) {\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\r\n   * Override `emit`.\r\n   * If the event is in `events`, it's emitted normally.\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  emit(ev, ...args) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev + '\" is a reserved event name');\n    }\n\n    args.unshift(ev);\n    const packet = {\n      type: PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false; // event ack callback\n\n    if (\"function\" === typeof args[args.length - 1]) {\n      this.acks[this.ids] = args.pop();\n      packet.id = this.ids++;\n    }\n\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n    if (discardPacket) {} else if (this.connected) {\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n\n    this.flags = {};\n    return this;\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  packet(packet) {\n    packet.nsp = this.nsp;\n\n    this.io._packet(packet);\n  }\n  /**\r\n   * Called upon engine `open`.\r\n   *\r\n   * @private\r\n   */\n\n\n  onopen() {\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this.packet({\n          type: PacketType.CONNECT,\n          data\n        });\n      });\n    } else {\n      this.packet({\n        type: PacketType.CONNECT,\n        data: this.auth\n      });\n    }\n  }\n  /**\r\n   * Called upon engine or manager `error`.\r\n   *\r\n   * @param err\r\n   * @private\r\n   */\n\n\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\r\n   * Called upon engine `close`.\r\n   *\r\n   * @param reason\r\n   * @private\r\n   */\n\n\n  onclose(reason) {\n    this.connected = false;\n    this.disconnected = true;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason);\n  }\n  /**\r\n   * Called with socket packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n\n    switch (packet.type) {\n      case PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          const id = packet.data.sid;\n          this.onconnect(id);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n\n        break;\n\n      case PacketType.EVENT:\n        this.onevent(packet);\n        break;\n\n      case PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n\n      case PacketType.ACK:\n        this.onack(packet);\n        break;\n\n      case PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n\n      case PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n\n      case PacketType.CONNECT_ERROR:\n        const err = new Error(packet.data.message); // @ts-ignore\n\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\r\n   * Called upon a server event.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  onevent(packet) {\n    const args = packet.data || [];\n\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n\n    super.emit.apply(this, args);\n  }\n  /**\r\n   * Produces an ack callback to emit with an event.\r\n   *\r\n   * @private\r\n   */\n\n\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function (...args) {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      self.packet({\n        type: PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\r\n   * Called upon a server acknowlegement.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  onack(packet) {\n    const ack = this.acks[packet.id];\n\n    if (\"function\" === typeof ack) {\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {}\n  }\n  /**\r\n   * Called upon server connect.\r\n   *\r\n   * @private\r\n   */\n\n\n  onconnect(id) {\n    this.id = id;\n    this.connected = true;\n    this.disconnected = false;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n  }\n  /**\r\n   * Emit buffered events (received and emitted).\r\n   *\r\n   * @private\r\n   */\n\n\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => this.packet(packet));\n    this.sendBuffer = [];\n  }\n  /**\r\n   * Called upon server disconnect.\r\n   *\r\n   * @private\r\n   */\n\n\n  ondisconnect() {\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\r\n   * Called upon forced client/server side disconnections,\r\n   * this method ensures the manager stops tracking us and\r\n   * that reconnections don't get triggered for this.\r\n   *\r\n   * @private\r\n   */\n\n\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n\n    this.io[\"_destroy\"](this);\n  }\n  /**\r\n   * Disconnects the socket manually.\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  disconnect() {\n    if (this.connected) {\n      this.packet({\n        type: PacketType.DISCONNECT\n      });\n    } // remove socket from pool\n\n\n    this.destroy();\n\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n\n    return this;\n  }\n  /**\r\n   * Alias for disconnect()\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  close() {\n    return this.disconnect();\n  }\n  /**\r\n   * Sets the compress flag.\r\n   *\r\n   * @param compress - if `true`, compresses the sending data\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n   * ready to send messages.\r\n   *\r\n   * @returns self\r\n   * @public\r\n   */\n\n\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * @param listener\r\n   * @public\r\n   */\n\n\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.push(listener);\n\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * @param listener\r\n   * @public\r\n   */\n\n\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.unshift(listener);\n\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @param listener\r\n   * @public\r\n   */\n\n\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   *\r\n   * @public\r\n   */\n\n\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mozah/Desktop/Hanzla College files/Gather/ver-1/gather-video-chat/server/client/node_modules/socket.io-client/build/esm/socket.js"],"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","constructor","io","nsp","opts","connected","disconnected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subEvents","subs","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","EVENT","data","options","compress","length","pop","id","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","_packet","CONNECT","err","emitReserved","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","message","ack","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","destroy","subDestroy","undefined","close","onAny","prependAny","offAny","i","splice","listenersAny"],"mappings":"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","sourcesContent":["import { PacketType } from \"socket.io-parser\";\r\nimport { on } from \"./on.js\";\r\nimport { Emitter, } from \"@socket.io/component-emitter\";\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\nexport class Socket extends Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     *\r\n     * @public\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        this.connected = false;\r\n        this.disconnected = true;\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer = [];\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on(io, \"open\", this.onopen.bind(this)),\r\n            on(io, \"packet\", this.onpacket.bind(this)),\r\n            on(io, \"error\", this.onerror.bind(this)),\r\n            on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for connect()\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        const packet = {\r\n            type: PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            this.acks[this.ids] = args.pop();\r\n            packet.id = this.ids++;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n        }\r\n        else if (this.connected) {\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this.packet({ type: PacketType.CONNECT, data });\r\n            });\r\n        }\r\n        else {\r\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            this.emitReserved(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @private\r\n     */\r\n    onclose(reason) {\r\n        this.connected = false;\r\n        this.disconnected = true;\r\n        delete this.id;\r\n        this.emitReserved(\"disconnect\", reason);\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    const id = packet.data.sid;\r\n                    this.onconnect(id);\r\n                }\r\n                else {\r\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case PacketType.EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case PacketType.ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case PacketType.CONNECT_ERROR:\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                this.emitReserved(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        if (null != packet.id) {\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            self.packet({\r\n                type: PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (\"function\" === typeof ack) {\r\n            ack.apply(this, packet.data);\r\n            delete this.acks[packet.id];\r\n        }\r\n        else {\r\n        }\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id) {\r\n        this.id = id;\r\n        this.connected = true;\r\n        this.disconnected = false;\r\n        this.emitBuffered();\r\n        this.emitReserved(\"connect\");\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => this.packet(packet));\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            this.packet({ type: PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}