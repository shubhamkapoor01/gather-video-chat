{"ast":null,"code":"import { Transport } from \"../transport.js\";\nimport yeast from \"yeast\";\nimport parseqs from \"parseqs\";\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\nexport class Polling extends Transport {\n  constructor() {\n    super(...arguments);\n    this.polling = false;\n  }\n  /**\r\n   * Transport name.\r\n   */\n\n\n  get name() {\n    return \"polling\";\n  }\n  /**\r\n   * Opens the socket (triggers polling). We write a PING message to determine\r\n   * when the transport is open.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doOpen() {\n    this.poll();\n  }\n  /**\r\n   * Pauses polling.\r\n   *\r\n   * @param {Function} callback upon buffers are flushed and transport is paused\r\n   * @api private\r\n   */\n\n\n  pause(onPause) {\n    this.readyState = \"pausing\";\n\n    const pause = () => {\n      this.readyState = \"paused\";\n      onPause();\n    };\n\n    if (this.polling || !this.writable) {\n      let total = 0;\n\n      if (this.polling) {\n        total++;\n        this.once(\"pollComplete\", function () {\n          --total || pause();\n        });\n      }\n\n      if (!this.writable) {\n        total++;\n        this.once(\"drain\", function () {\n          --total || pause();\n        });\n      }\n    } else {\n      pause();\n    }\n  }\n  /**\r\n   * Starts polling cycle.\r\n   *\r\n   * @api public\r\n   */\n\n\n  poll() {\n    this.polling = true;\n    this.doPoll();\n    this.emit(\"poll\");\n  }\n  /**\r\n   * Overloads onData to detect payloads.\r\n   *\r\n   * @api private\r\n   */\n\n\n  onData(data) {\n    const callback = packet => {\n      // if its the first message we consider the transport open\n      if (\"opening\" === this.readyState && packet.type === \"open\") {\n        this.onOpen();\n      } // if its a close packet, we close the ongoing requests\n\n\n      if (\"close\" === packet.type) {\n        this.onClose();\n        return false;\n      } // otherwise bypass onData and handle the message\n\n\n      this.onPacket(packet);\n    }; // decode payload\n\n\n    decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n    if (\"closed\" !== this.readyState) {\n      // if we got data we're not polling\n      this.polling = false;\n      this.emit(\"pollComplete\");\n\n      if (\"open\" === this.readyState) {\n        this.poll();\n      } else {}\n    }\n  }\n  /**\r\n   * For polling, send a close packet.\r\n   *\r\n   * @api private\r\n   */\n\n\n  doClose() {\n    const close = () => {\n      this.write([{\n        type: \"close\"\n      }]);\n    };\n\n    if (\"open\" === this.readyState) {\n      close();\n    } else {\n      // in case we're trying to close while\n      // handshaking is in progress (GH-164)\n      this.once(\"open\", close);\n    }\n  }\n  /**\r\n   * Writes a packets payload.\r\n   *\r\n   * @param {Array} data packets\r\n   * @param {Function} drain callback\r\n   * @api private\r\n   */\n\n\n  write(packets) {\n    this.writable = false;\n    encodePayload(packets, data => {\n      this.doWrite(data, () => {\n        this.writable = true;\n        this.emit(\"drain\");\n      });\n    });\n  }\n  /**\r\n   * Generates uri for connection.\r\n   *\r\n   * @api private\r\n   */\n\n\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"https\" : \"http\";\n    let port = \"\"; // cache busting is forced\n\n    if (false !== this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    }\n\n    if (!this.supportsBinary && !query.sid) {\n      query.b64 = 1;\n    } // avoid port if default for schema\n\n\n    if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    }\n\n    const encodedQuery = parseqs.encode(query);\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n  }\n\n}","map":{"version":3,"sources":["C:/Users/mozah/Desktop/Hanzla College files/Gather/ver exp/gather-video-chat/server/client/node_modules/engine.io-client/build/esm/transports/polling.js"],"names":["Transport","yeast","parseqs","encodePayload","decodePayload","Polling","constructor","arguments","polling","name","doOpen","poll","pause","onPause","readyState","writable","total","once","doPoll","emit","onData","data","callback","packet","type","onOpen","onClose","onPacket","socket","binaryType","forEach","doClose","close","write","packets","doWrite","uri","query","schema","opts","secure","port","timestampRequests","timestampParam","supportsBinary","sid","b64","Number","encodedQuery","encode","ipv6","hostname","indexOf","path","length"],"mappings":"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","sourcesContent":["import { Transport } from \"../transport.js\";\r\nimport yeast from \"yeast\";\r\nimport parseqs from \"parseqs\";\r\nimport { encodePayload, decodePayload } from \"engine.io-parser\";\r\nexport class Polling extends Transport {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.polling = false;\r\n    }\r\n    /**\r\n     * Transport name.\r\n     */\r\n    get name() {\r\n        return \"polling\";\r\n    }\r\n    /**\r\n     * Opens the socket (triggers polling). We write a PING message to determine\r\n     * when the transport is open.\r\n     *\r\n     * @api private\r\n     */\r\n    doOpen() {\r\n        this.poll();\r\n    }\r\n    /**\r\n     * Pauses polling.\r\n     *\r\n     * @param {Function} callback upon buffers are flushed and transport is paused\r\n     * @api private\r\n     */\r\n    pause(onPause) {\r\n        this.readyState = \"pausing\";\r\n        const pause = () => {\r\n            this.readyState = \"paused\";\r\n            onPause();\r\n        };\r\n        if (this.polling || !this.writable) {\r\n            let total = 0;\r\n            if (this.polling) {\r\n                total++;\r\n                this.once(\"pollComplete\", function () {\r\n                    --total || pause();\r\n                });\r\n            }\r\n            if (!this.writable) {\r\n                total++;\r\n                this.once(\"drain\", function () {\r\n                    --total || pause();\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            pause();\r\n        }\r\n    }\r\n    /**\r\n     * Starts polling cycle.\r\n     *\r\n     * @api public\r\n     */\r\n    poll() {\r\n        this.polling = true;\r\n        this.doPoll();\r\n        this.emit(\"poll\");\r\n    }\r\n    /**\r\n     * Overloads onData to detect payloads.\r\n     *\r\n     * @api private\r\n     */\r\n    onData(data) {\r\n        const callback = packet => {\r\n            // if its the first message we consider the transport open\r\n            if (\"opening\" === this.readyState && packet.type === \"open\") {\r\n                this.onOpen();\r\n            }\r\n            // if its a close packet, we close the ongoing requests\r\n            if (\"close\" === packet.type) {\r\n                this.onClose();\r\n                return false;\r\n            }\r\n            // otherwise bypass onData and handle the message\r\n            this.onPacket(packet);\r\n        };\r\n        // decode payload\r\n        decodePayload(data, this.socket.binaryType).forEach(callback);\r\n        // if an event did not trigger closing\r\n        if (\"closed\" !== this.readyState) {\r\n            // if we got data we're not polling\r\n            this.polling = false;\r\n            this.emit(\"pollComplete\");\r\n            if (\"open\" === this.readyState) {\r\n                this.poll();\r\n            }\r\n            else {\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * For polling, send a close packet.\r\n     *\r\n     * @api private\r\n     */\r\n    doClose() {\r\n        const close = () => {\r\n            this.write([{ type: \"close\" }]);\r\n        };\r\n        if (\"open\" === this.readyState) {\r\n            close();\r\n        }\r\n        else {\r\n            // in case we're trying to close while\r\n            // handshaking is in progress (GH-164)\r\n            this.once(\"open\", close);\r\n        }\r\n    }\r\n    /**\r\n     * Writes a packets payload.\r\n     *\r\n     * @param {Array} data packets\r\n     * @param {Function} drain callback\r\n     * @api private\r\n     */\r\n    write(packets) {\r\n        this.writable = false;\r\n        encodePayload(packets, data => {\r\n            this.doWrite(data, () => {\r\n                this.writable = true;\r\n                this.emit(\"drain\");\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Generates uri for connection.\r\n     *\r\n     * @api private\r\n     */\r\n    uri() {\r\n        let query = this.query || {};\r\n        const schema = this.opts.secure ? \"https\" : \"http\";\r\n        let port = \"\";\r\n        // cache busting is forced\r\n        if (false !== this.opts.timestampRequests) {\r\n            query[this.opts.timestampParam] = yeast();\r\n        }\r\n        if (!this.supportsBinary && !query.sid) {\r\n            query.b64 = 1;\r\n        }\r\n        // avoid port if default for schema\r\n        if (this.opts.port &&\r\n            ((\"https\" === schema && Number(this.opts.port) !== 443) ||\r\n                (\"http\" === schema && Number(this.opts.port) !== 80))) {\r\n            port = \":\" + this.opts.port;\r\n        }\r\n        const encodedQuery = parseqs.encode(query);\r\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\r\n        return (schema +\r\n            \"://\" +\r\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\r\n            port +\r\n            this.opts.path +\r\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}