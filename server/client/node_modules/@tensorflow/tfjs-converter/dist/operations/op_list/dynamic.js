/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
export const json = [
    {
        "tfOpName": "NonMaxSuppressionV2",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "boxes",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scores",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "maxOutputSize",
                "type": "number"
            },
            {
                "start": 3,
                "name": "iouThreshold",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "NonMaxSuppressionV3",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "boxes",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scores",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "maxOutputSize",
                "type": "number"
            },
            {
                "start": 3,
                "name": "iouThreshold",
                "type": "number"
            },
            {
                "start": 4,
                "name": "scoreThreshold",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "NonMaxSuppressionV4",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "boxes",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scores",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "maxOutputSize",
                "type": "number"
            },
            {
                "start": 3,
                "name": "iouThreshold",
                "type": "number"
            },
            {
                "start": 4,
                "name": "scoreThreshold",
                "type": "number"
            }
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "T_threshold",
                "name": "threshold",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "pad_to_max_output_size",
                "name": "padToMaxOutputSize",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "NonMaxSuppressionV5",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "boxes",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "scores",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "maxOutputSize",
                "type": "number"
            },
            {
                "start": 3,
                "name": "iouThreshold",
                "type": "number"
            },
            {
                "start": 4,
                "name": "scoreThreshold",
                "type": "number"
            },
            {
                "start": 5,
                "name": "softNmsSigma",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "Where",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "condition",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "ListDiff",
        "category": "dynamic",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "y",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "T",
                "name": "dtype",
                "type": "dtype",
                "notSupported": true
            }
        ]
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL29wX2xpc3QvZHluYW1pYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQWU7SUFDOUI7UUFDRSxVQUFVLEVBQUUscUJBQXFCO1FBQ2pDLFVBQVUsRUFBRSxTQUFTO1FBQ3JCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLGVBQWU7Z0JBQ3ZCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLGNBQWM7Z0JBQ3RCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLHFCQUFxQjtRQUNqQyxVQUFVLEVBQUUsU0FBUztRQUNyQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxRQUFRO2dCQUNoQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxlQUFlO2dCQUN2QixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dC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Q0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxPQUFPO2dCQUNmLGNBQWMsRUFBRSxJQUFJO2FBQ3JCO1NBQ0Y7S0FDRjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtPcE1hcHBlcn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QganNvbjogT3BNYXBwZXJbXSA9IFtcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJOb25NYXhTdXBwcmVzc2lvblYyXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImR5bmFtaWNcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiYm94ZXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwic2NvcmVzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIm1heE91dHB1dFNpemVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMyxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW91VGhyZXNob2xkXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIk5vbk1heFN1cHByZXNzaW9uVjNcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiZHluYW1pY1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJib3hlc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJzY29yZXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMixcbiAgICAgICAgXCJuYW1lXCI6IFwibWF4T3V0cHV0U2l6ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAzLFxuICAgICAgICBcIm5hbWVcIjogXCJpb3VUaHJlc2hvbGRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogNCxcbiAgICAgICAgXCJuYW1lXCI6IFwic2NvcmVUaHJlc2hvbGRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiTm9uTWF4U3VwcHJlc3Npb25WNFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJkeW5hbWljXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImJveGVzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcInNjb3Jlc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJtYXhPdXRwdXRTaXplXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDMsXG4gICAgICAgIFwibmFtZVwiOiBcImlvdVRocmVzaG9sZFwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiA0LFxuICAgICAgICBcIm5hbWVcIjogXCJzY29yZVRocmVzaG9sZFwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiVFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRfdGhyZXNob2xkXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInRocmVzaG9sZFwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInBhZF90b19tYXhfb3V0cHV0X3NpemVcIixcbiAgICAgICAgXCJuYW1lXCI6IFwicGFkVG9NYXhPdXRwdXRTaXplXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJOb25NYXhTdXBwcmVzc2lvblY1XCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImR5bmFtaWNcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiYm94ZXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwic2NvcmVzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIm1heE91dHB1dFNpemVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMyxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW91VGhyZXNob2xkXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDQsXG4gICAgICAgIFwibmFtZVwiOiBcInNjb3JlVGhyZXNob2xkXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDUsXG4gICAgICAgIFwibmFtZVwiOiBcInNvZnRObXNTaWdtYVwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJXaGVyZVwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJkeW5hbWljXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImNvbmRpdGlvblwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiVFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkxpc3REaWZmXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImR5bmFtaWNcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJ5XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH1cbl07XG4iXX0=