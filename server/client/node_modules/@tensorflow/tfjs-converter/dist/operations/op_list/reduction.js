/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
export const json = [
    {
        "tfOpName": "Bincount",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "size",
                "type": "number"
            },
            {
                "start": 2,
                "name": "weights",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "DenseBincount",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "size",
                "type": "number"
            },
            {
                "start": 2,
                "name": "weights",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "binary_output",
                "name": "binaryOutput",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Max",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Mean",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Min",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Sum",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "All",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Any",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "ArgMax",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "ArgMin",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number"
            }
        ]
    },
    {
        "tfOpName": "Prod",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number[]"
            }
        ],
        "attrs": [
            {
                "tfName": "keep_dims",
                "name": "keepDims",
                "type": "bool"
            }
        ]
    },
    {
        "tfOpName": "Cumsum",
        "category": "reduction",
        "inputs": [
            {
                "start": 0,
                "name": "x",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "axis",
                "type": "number"
            }
        ],
        "attrs": [
            {
                "tfName": "exclusive",
                "name": "exclusive",
                "type": "bool"
            },
            {
                "tfName": "reverse",
                "name": "reverse",
                "type": "bool"
            }
        ]
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvb3BfbGlzdC9yZWR1Y3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFlO0lBQzlCO1FBQ0UsVUFBVSxFQUFFLFVBQVU7UUFDdEIsVUFBVSxFQUFFLFdBQVc7UUFDdkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsTUFBTTtnQkFDZCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxlQUFlO1FBQzNCLFVBQVUsRUFBRSxXQUFXO1FBQ3ZCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGO0tBQ0Y7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USxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsTUFBTTtnQkFDZCxNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO1FBQ0QsT0FBTyxFQUFFO1lBQ1A7Z0JBQ0UsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLE1BQU0sRUFBRSxXQUFXO2dCQUNuQixNQUFNLEVBQUUsTUFBTTthQUNmO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixNQUFNLEVBQUUsTUFBTTthQUNmO1NBQ0Y7S0FDRjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtPcE1hcHBlcn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QganNvbjogT3BNYXBwZXJbXSA9IFtcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJCaW5jb3VudFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJyZWR1Y3Rpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJzaXplXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIndlaWdodHNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiRGVuc2VCaW5jb3VudFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJyZWR1Y3Rpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJzaXplXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIndlaWdodHNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImJpbmFyeV9vdXRwdXRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYmluYXJ5T3V0cHV0XCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJNYXhcIixcbiAgICBcImNhdGVnb3J5XCI6IFwicmVkdWN0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYXhpc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJbXVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJrZWVwX2RpbXNcIixcbiAgICAgICAgXCJuYW1lXCI6IFwia2VlcERpbXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbFwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIk1lYW5cIixcbiAgICBcImNhdGVnb3J5XCI6IFwicmVkdWN0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYXhpc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJbXVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJrZWVwX2RpbXNcIixcbiAgICAgICAgXCJuYW1lXCI6IFwia2VlcERpbXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbFwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIk1pblwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJyZWR1Y3Rpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJheGlzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImtlZXBfZGltc1wiLFxuICAgICAgICBcIm5hbWVcIjogXCJrZWVwRGltc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiU3VtXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInJlZHVjdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImF4aXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyW11cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwia2VlcF9kaW1zXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImtlZXBEaW1zXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJBbGxcIixcbiAgICBcImNhdGVnb3J5XCI6IFwicmVkdWN0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYXhpc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJbXVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJrZWVwX2RpbXNcIixcbiAgICAgICAgXCJuYW1lXCI6IFwia2VlcERpbXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbFwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkFueVwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJyZWR1Y3Rpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJheGlzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImtlZXBfZGltc1wiLFxuICAgICAgICBcIm5hbWVcIjogXCJrZWVwRGltc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiQXJnTWF4XCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInJlZHVjdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImF4aXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiQXJnTWluXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInJlZHVjdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImF4aXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiUHJvZFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJyZWR1Y3Rpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJheGlzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImtlZXBfZGltc1wiLFxuICAgICAgICBcIm5hbWVcIjogXCJrZWVwRGltc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiQ3Vtc3VtXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInJlZHVjdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImF4aXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImV4Y2x1c2l2ZVwiLFxuICAgICAgICBcIm5hbWVcIjogXCJleGNsdXNpdmVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInJldmVyc2VcIixcbiAgICAgICAgXCJuYW1lXCI6IFwicmV2ZXJzZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgIH1cbiAgICBdXG4gIH1cbl07XG4iXX0=