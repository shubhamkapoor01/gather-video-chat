/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
export const json = [
    {
        "tfOpName": "HashTable",
        "category": "hash_table",
        "inputs": [],
        "attrs": [
            {
                "tfName": "shared_name",
                "name": "sharedName",
                "type": "string"
            },
            {
                "tfName": "use_node_name_sharing",
                "name": "useNodeNameSharing",
                "type": "bool"
            },
            {
                "tfName": "key_dtype",
                "name": "keyDType",
                "type": "dtype"
            },
            {
                "tfName": "value_dtype",
                "name": "valueDType",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "HashTableV2",
        "category": "hash_table",
        "inputs": [],
        "attrs": [
            {
                "tfName": "shared_name",
                "name": "sharedName",
                "type": "string"
            },
            {
                "tfName": "use_node_name_sharing",
                "name": "useNodeNameSharing",
                "type": "bool"
            },
            {
                "tfName": "key_dtype",
                "name": "keyDType",
                "type": "dtype"
            },
            {
                "tfName": "value_dtype",
                "name": "valueDType",
                "type": "dtype"
            }
        ]
    },
    {
        "tfOpName": "LookupTableImport",
        "category": "hash_table",
        "inputs": [
            {
                "start": 0,
                "name": "tableHandle",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "keys",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "values",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "Tin",
                "name": "tIn",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "Tout",
                "name": "tOut",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LookupTableImportV2",
        "category": "hash_table",
        "inputs": [
            {
                "start": 0,
                "name": "tableHandle",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "keys",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "values",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "Tin",
                "name": "tIn",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "Tout",
                "name": "tOut",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LookupTableFind",
        "category": "hash_table",
        "inputs": [
            {
                "start": 0,
                "name": "tableHandle",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "keys",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "defaultValue",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "Tin",
                "name": "tIn",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "Tout",
                "name": "tOut",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LookupTableFindV2",
        "category": "hash_table",
        "inputs": [
            {
                "start": 0,
                "name": "tableHandle",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "keys",
                "type": "tensor"
            },
            {
                "start": 2,
                "name": "defaultValue",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "Tin",
                "name": "tIn",
                "type": "dtype",
                "notSupported": true
            },
            {
                "tfName": "Tout",
                "name": "tOut",
                "type": "dtype",
                "notSupported": true
            }
        ]
    },
    {
        "tfOpName": "LookupTableSize",
        "category": "hash_table",
        "inputs": [
            {
                "start": 0,
                "name": "tableHandle",
                "type": "tensor"
            }
        ]
    },
    {
        "tfOpName": "LookupTableSizeV2",
        "category": "hash_table",
        "inputs": [
            {
                "start": 0,
                "name": "tableHandle",
                "type": "tensor"
            }
        ]
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF90YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL29wX2xpc3QvaGFzaF90YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQWU7SUFDOUI7UUFDRSxVQUFVLEVBQUUsV0FBVztRQUN2QixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUUsRUFBRTtRQUNaLE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxNQUFNLEVBQUUsb0JBQW9CO2dCQUM1QixNQUFNLEVBQUUsTUFBTTthQUNmO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixNQUFNLEVBQUUsT0FBTzthQUNoQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLE9BQU87YUFDaEI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsYUFBYTtRQUN6QixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUUsRUFBRTtRQUNaLE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxhQUFhO2dCQUN2QixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxNQUFNLEVBQUUsb0JBQW9CO2dCQUM1QixNQUFNLEVBQUUsTUFBTTthQUNmO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFV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RSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxNQUFNO2dCQUNkLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLGNBQWM7Z0JBQ3RCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsS0FBSztnQkFDZixNQUFNLEVBQUUsS0FBSztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixjQUFjLEVBQUUsSUFBSTthQUNyQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxNQUFNO2dCQUNoQixNQUFNLEVBQUUsTUFBTTtnQkFDZCxNQUFNLEVBQUUsT0FBTztnQkFDZixjQUFjLEVBQUUsSUFBSTthQUNyQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxpQkFBaUI7UUFDN0IsVUFBVSxFQUFFLFlBQVk7UUFDeEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLG1CQUFtQjtRQUMvQixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsYUFBYTtnQkFDckIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkhhc2hUYWJsZVwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJoYXNoX3RhYmxlXCIsXG4gICAgXCJpbnB1dHNcIjogW10sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwic2hhcmVkX25hbWVcIixcbiAgICAgICAgXCJuYW1lXCI6IFwic2hhcmVkTmFtZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJ1c2Vfbm9kZV9uYW1lX3NoYXJpbmdcIixcbiAgICAgICAgXCJuYW1lXCI6IFwidXNlTm9kZU5hbWVTaGFyaW5nXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJrZXlfZHR5cGVcIixcbiAgICAgICAgXCJuYW1lXCI6IFwia2V5RFR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJ2YWx1ZV9kdHlwZVwiLFxuICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZURUeXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiSGFzaFRhYmxlVjJcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiaGFzaF90YWJsZVwiLFxuICAgIFwiaW5wdXRzXCI6IFtdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInNoYXJlZF9uYW1lXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInNoYXJlZE5hbWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwidXNlX25vZGVfbmFtZV9zaGFyaW5nXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInVzZU5vZGVOYW1lU2hhcmluZ1wiLFxuICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwia2V5X2R0eXBlXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImtleURUeXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwidmFsdWVfZHR5cGVcIixcbiAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVEVHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkxvb2t1cFRhYmxlSW1wb3J0XCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImhhc2hfdGFibGVcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwidGFibGVIYW5kbGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwia2V5c1wiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRpblwiLFxuICAgICAgICBcIm5hbWVcIjogXCJ0SW5cIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUb3V0XCIsXG4gICAgICAgIFwibmFtZVwiOiBcInRPdXRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJMb29rdXBUYWJsZUltcG9ydFYyXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImhhc2hfdGFibGVcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwidGFibGVIYW5kbGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwia2V5c1wiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRpblwiLFxuICAgICAgICBcIm5hbWVcIjogXCJ0SW5cIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUb3V0XCIsXG4gICAgICAgIFwibmFtZVwiOiBcInRPdXRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJMb29rdXBUYWJsZUZpbmRcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiaGFzaF90YWJsZVwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ0YWJsZUhhbmRsZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJrZXlzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcImRlZmF1bHRWYWx1ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiVGluXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInRJblwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRvdXRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwidE91dFwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkxvb2t1cFRhYmxlRmluZFYyXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImhhc2hfdGFibGVcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwidGFibGVIYW5kbGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwia2V5c1wiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJkZWZhdWx0VmFsdWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRpblwiLFxuICAgICAgICBcIm5hbWVcIjogXCJ0SW5cIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUb3V0XCIsXG4gICAgICAgIFwibmFtZVwiOiBcInRPdXRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJMb29rdXBUYWJsZVNpemVcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiaGFzaF90YWJsZVwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ0YWJsZUhhbmRsZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJMb29rdXBUYWJsZVNpemVWMlwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJoYXNoX3RhYmxlXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInRhYmxlSGFuZGxlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xuIl19