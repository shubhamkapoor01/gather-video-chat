/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
export const json = [
    {
        "tfOpName": "StringNGrams",
        "category": "string",
        "inputs": [
            {
                "start": 0,
                "name": "data",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "dataSplits",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "separator",
                "name": "separator",
                "type": "string"
            },
            {
                "tfName": "ngram_widths",
                "name": "nGramWidths",
                "type": "number[]"
            },
            {
                "tfName": "left_pad",
                "name": "leftPad",
                "type": "string"
            },
            {
                "tfName": "right_pad",
                "name": "rightPad",
                "type": "string"
            },
            {
                "tfName": "pad_width",
                "name": "padWidth",
                "type": "number"
            },
            {
                "tfName": "preserve_short_sequences",
                "name": "preserveShortSequences",
                "type": "bool"
            }
        ],
        "outputs": [
            "ngrams",
            "ngrams_splits"
        ]
    },
    {
        "tfOpName": "StringSplit",
        "category": "string",
        "inputs": [
            {
                "start": 0,
                "name": "input",
                "type": "tensor"
            },
            {
                "start": 1,
                "name": "delimiter",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "skip_empty",
                "name": "skipEmpty",
                "type": "bool"
            }
        ],
        "outputs": [
            "indices",
            "values",
            "shape"
        ]
    },
    {
        "tfOpName": "StringToHashBucketFast",
        "category": "string",
        "inputs": [
            {
                "start": 0,
                "name": "input",
                "type": "tensor"
            }
        ],
        "attrs": [
            {
                "tfName": "num_buckets",
                "name": "numBuckets",
                "type": "number"
            }
        ]
    }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvb3BfbGlzdC9zdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFlO0lBQzlCO1FBQ0UsVUFBVSxFQUFFLGNBQWM7UUFDMUIsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxXQUFXO2dCQUNyQixNQUFNLEVBQUUsV0FBVztnQkFDbkIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsY0FBYztnQkFDeEIsTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFVO2FBQ25CO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxXQUFXO2dCQUNyQixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsV0FBVztnQkFDckIsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsTUFBTSxFQUFFLHdCQUF3QjtnQkFDaEMsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsUUFBUTtZQUNSLGVBQWU7U0FDaEI7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLGFBQWE7UUFDekIsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsV0FBVztnQkFDbkIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxZQUFZO2dCQUN0QixNQUFNLEVBQUUsV0FBVztnQkFDbkIsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsU0FBUztZQUNULFFBQVE7WUFDUixPQUFPO1NBQ1I7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLHdCQUF3QjtRQUNwQyxVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO1FBQ0QsT0FBTyxFQUFFO1lBQ1A7Z0JBQ0UsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7T3BNYXBwZXJ9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGpzb246IE9wTWFwcGVyW10gPSBbXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiU3RyaW5nTkdyYW1zXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInN0cmluZ1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJkYXRhXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImRhdGFTcGxpdHNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInNlcGFyYXRvclwiLFxuICAgICAgICBcIm5hbWVcIjogXCJzZXBhcmF0b3JcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwibmdyYW1fd2lkdGhzXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIm5HcmFtV2lkdGhzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwibGVmdF9wYWRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwibGVmdFBhZFwiLFxuICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJyaWdodF9wYWRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwicmlnaHRQYWRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwicGFkX3dpZHRoXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInBhZFdpZHRoXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInByZXNlcnZlX3Nob3J0X3NlcXVlbmNlc1wiLFxuICAgICAgICBcIm5hbWVcIjogXCJwcmVzZXJ2ZVNob3J0U2VxdWVuY2VzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgIFwibmdyYW1zXCIsXG4gICAgICBcIm5ncmFtc19zcGxpdHNcIlxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJTdHJpbmdTcGxpdFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJzdHJpbmdcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5wdXRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiZGVsaW1pdGVyXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJza2lwX2VtcHR5XCIsXG4gICAgICAgIFwibmFtZVwiOiBcInNraXBFbXB0eVwiLFxuICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICBcImluZGljZXNcIixcbiAgICAgIFwidmFsdWVzXCIsXG4gICAgICBcInNoYXBlXCJcbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiU3RyaW5nVG9IYXNoQnVja2V0RmFzdFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJzdHJpbmdcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5wdXRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIm51bV9idWNrZXRzXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIm51bUJ1Y2tldHNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH1cbiAgICBdXG4gIH1cbl07XG4iXX0=