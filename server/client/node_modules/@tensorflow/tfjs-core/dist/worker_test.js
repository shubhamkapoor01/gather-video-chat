/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { describeWithFlags, HAS_WORKER } from './jasmine_util';
import { expectArraysClose } from './test_util';
const str2workerURL = (str) => {
    const blob = new Blob([str], { type: 'application/javascript' });
    return URL.createObjectURL(blob);
};
// The source code of a web worker.
const workerTest = `
importScripts(location.origin + '/base/tfjs/tfjs-core/tf-core.min.js');
importScripts(location.origin
  + '/base/tfjs/tfjs-backend-cpu/tf-backend-cpu.min.js');

let a = tf.tensor1d([1, 2, 3]);
const b = tf.tensor1d([3, 2, 1]);
a = tf.add(a, b);
self.postMessage({data: a.dataSync()});
`;
describeWithFlags('computation in worker', HAS_WORKER, () => {
    it('tensor in worker', (done) => {
        const worker = new Worker(str2workerURL(workerTest));
        worker.onmessage = (msg) => {
            const data = msg.data.data;
            expectArraysClose(data, [4, 4, 4]);
            done();
        };
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyX3Rlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL3dvcmtlcl90ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFOUMsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFXLEVBQVUsRUFBRTtJQUM1QyxNQUFNLElBQUksR0FDTixJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLHdCQUF3QixFQUFDLENBQUMsQ0FBQztJQUN0RCxPQUFPLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsQ0FBQyxDQUFDO0FBRUYsbUNBQW1DO0FBQ25DLE1BQU0sVUFBVSxHQUFHOzs7Ozs7Ozs7Q0FTbEIsQ0FBQztBQUVGLGlCQUFpQixDQUFDLHVCQUF1QixFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUU7SUFDMUQsRUFBRSxDQUFDLGtCQUFrQixFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzNCLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLEVBQUUsQ0FBQztRQUNULENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7ZGVzY3JpYmVXaXRoRmxhZ3MsIEhBU19XT1JLRVJ9IGZyb20gJy4vamFzbWluZV91dGlsJztcbmltcG9ydCB7ZXhwZWN0QXJyYXlzQ2xvc2V9IGZyb20gJy4vdGVzdF91dGlsJztcblxuY29uc3Qgc3RyMndvcmtlclVSTCA9IChzdHI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIGNvbnN0IGJsb2IgPVxuICAgICAgbmV3IEJsb2IoW3N0cl0sIHt0eXBlOiAnYXBwbGljYXRpb24vamF2YXNjcmlwdCd9KTtcbiAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG59O1xuXG4vLyBUaGUgc291cmNlIGNvZGUgb2YgYSB3ZWIgd29ya2VyLlxuY29uc3Qgd29ya2VyVGVzdCA9IGBcbmltcG9ydFNjcmlwdHMobG9jYXRpb24ub3JpZ2luICsgJy9iYXNlL3RmanMvdGZqcy1jb3JlL3RmLWNvcmUubWluLmpzJyk7XG5pbXBvcnRTY3JpcHRzKGxvY2F0aW9uLm9yaWdpblxuICArICcvYmFzZS90ZmpzL3RmanMtYmFja2VuZC1jcHUvdGYtYmFja2VuZC1jcHUubWluLmpzJyk7XG5cbmxldCBhID0gdGYudGVuc29yMWQoWzEsIDIsIDNdKTtcbmNvbnN0IGIgPSB0Zi50ZW5zb3IxZChbMywgMiwgMV0pO1xuYSA9IHRmLmFkZChhLCBiKTtcbnNlbGYucG9zdE1lc3NhZ2Uoe2RhdGE6IGEuZGF0YVN5bmMoKX0pO1xuYDtcblxuZGVzY3JpYmVXaXRoRmxhZ3MoJ2NvbXB1dGF0aW9uIGluIHdvcmtlcicsIEhBU19XT1JLRVIsICgpID0+IHtcbiAgaXQoJ3RlbnNvciBpbiB3b3JrZXInLCAoZG9uZSkgPT4ge1xuICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIoc3RyMndvcmtlclVSTCh3b3JrZXJUZXN0KSk7XG4gICAgd29ya2VyLm9ubWVzc2FnZSA9IChtc2cpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBtc2cuZGF0YS5kYXRhO1xuICAgICAgZXhwZWN0QXJyYXlzQ2xvc2UoZGF0YSwgWzQsIDQsIDRdKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9O1xuICB9KTtcbn0pO1xuIl19