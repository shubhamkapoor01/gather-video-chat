/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
import { describeWithFlags, HAS_NODE_WORKER } from './jasmine_util';
import { expectArraysClose } from './test_util';
// tslint:disable:no-require-imports
const workerTestNode = `
// Web worker scripts in node live relative to the CWD, not to the dir of the
// file that spawned them.
const tf = require('@tensorflow/tfjs-core');
require('@tensorflow/tfjs-backend-cpu');
const {parentPort} = require('worker_threads');

let a = tf.tensor1d([1, 2, 3]);
const b = tf.tensor1d([3, 2, 1]);
a = tf.add(a, b);
parentPort.postMessage({data: a.dataSync()});
`;
describeWithFlags('computation in worker (node env)', HAS_NODE_WORKER, () => {
    // tslint:disable-next-line: ban
    it('tensor in worker', (done) => {
        const { Worker } = require('worker_threads');
        const worker = new Worker(workerTestNode, { eval: true });
        // tslint:disable-next-line:no-any
        worker.on('message', (msg) => {
            const data = msg.data;
            expectArraysClose(data, [4, 4, 4]);
            done();
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyX25vZGVfdGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtY29yZS9zcmMvd29ya2VyX25vZGVfdGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFFSCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZUFBZSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQzlDLG9DQUFvQztBQUVwQyxNQUFNLGNBQWMsR0FBRzs7Ozs7Ozs7Ozs7Q0FXdEIsQ0FBQztBQUVGLGlCQUFpQixDQUFDLGtDQUFrQyxFQUFFLGVBQWUsRUFBRSxHQUFHLEVBQUU7SUFDMUUsZ0NBQWdDO0lBQ2hDLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1FBQzlCLE1BQU0sRUFBQyxNQUFNLEVBQUMsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMzQyxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztRQUN4RCxrQ0FBa0M7UUFDbEMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUNoQyxNQUFNLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO1lBQ3RCLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxJQUFJLEVBQUUsQ0FBQztRQUNULENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtkZXNjcmliZVdpdGhGbGFncywgSEFTX05PREVfV09SS0VSfSBmcm9tICcuL2phc21pbmVfdXRpbCc7XG5pbXBvcnQge2V4cGVjdEFycmF5c0Nsb3NlfSBmcm9tICcuL3Rlc3RfdXRpbCc7XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1yZXF1aXJlLWltcG9ydHNcblxuY29uc3Qgd29ya2VyVGVzdE5vZGUgPSBgXG4vLyBXZWIgd29ya2VyIHNjcmlwdHMgaW4gbm9kZSBsaXZlIHJlbGF0aXZlIHRvIHRoZSBDV0QsIG5vdCB0byB0aGUgZGlyIG9mIHRoZVxuLy8gZmlsZSB0aGF0IHNwYXduZWQgdGhlbS5cbmNvbnN0IHRmID0gcmVxdWlyZSgnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJyk7XG5yZXF1aXJlKCdAdGVuc29yZmxvdy90ZmpzLWJhY2tlbmQtY3B1Jyk7XG5jb25zdCB7cGFyZW50UG9ydH0gPSByZXF1aXJlKCd3b3JrZXJfdGhyZWFkcycpO1xuXG5sZXQgYSA9IHRmLnRlbnNvcjFkKFsxLCAyLCAzXSk7XG5jb25zdCBiID0gdGYudGVuc29yMWQoWzMsIDIsIDFdKTtcbmEgPSB0Zi5hZGQoYSwgYik7XG5wYXJlbnRQb3J0LnBvc3RNZXNzYWdlKHtkYXRhOiBhLmRhdGFTeW5jKCl9KTtcbmA7XG5cbmRlc2NyaWJlV2l0aEZsYWdzKCdjb21wdXRhdGlvbiBpbiB3b3JrZXIgKG5vZGUgZW52KScsIEhBU19OT0RFX1dPUktFUiwgKCkgPT4ge1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGJhblxuICBpdCgndGVuc29yIGluIHdvcmtlcicsIChkb25lKSA9PiB7XG4gICAgY29uc3Qge1dvcmtlcn0gPSByZXF1aXJlKCd3b3JrZXJfdGhyZWFkcycpO1xuICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIod29ya2VyVGVzdE5vZGUsIHtldmFsOiB0cnVlfSk7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIHdvcmtlci5vbignbWVzc2FnZScsIChtc2c6IGFueSkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IG1zZy5kYXRhO1xuICAgICAgZXhwZWN0QXJyYXlzQ2xvc2UoZGF0YSwgWzQsIDQsIDRdKTtcbiAgICAgIGRvbmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==