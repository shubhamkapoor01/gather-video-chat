{"version":3,"file":"tf-backend-cpu.es2017.min.js","sources":["../../../../tfjs-backend-cpu/src/cpu_util.ts","../../../../tfjs-backend-cpu/src/backend_cpu.ts","../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Complex.ts","../../../../tfjs-backend-cpu/src/utils/zeros_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Identity.ts","../../../../tfjs-backend-cpu/src/kernels/Real.ts","../../../../tfjs-backend-cpu/src/kernels/Cast.ts","../../../../tfjs-backend-cpu/src/utils/binary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../tfjs-backend-cpu/src/utils/unary_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Transpose.ts","../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-cpu/src/base.ts","../../../../tfjs-backend-cpu/src/kernels/Elu.ts","../../../../tfjs-backend-cpu/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-cpu/src/kernels/Prelu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu.ts","../../../../tfjs-backend-cpu/src/kernels/Relu6.ts","../../../../tfjs-backend-cpu/src/utils/fused_utils.ts","../../../../tfjs-backend-cpu/src/kernels/Reshape.ts","../../../../tfjs-backend-cpu/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-cpu/src/kernels/Acos.ts","../../../../tfjs-backend-cpu/src/kernels/Acosh.ts","../../../../tfjs-backend-cpu/src/kernels/AddN.ts","../../../../tfjs-backend-cpu/src/kernels/All.ts","../../../../tfjs-backend-cpu/src/kernels/Any.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMax.ts","../../../../tfjs-backend-cpu/src/kernels/ArgMin.ts","../../../../tfjs-backend-cpu/src/kernels/Asin.ts","../../../../tfjs-backend-cpu/src/kernels/Asinh.ts","../../../../tfjs-backend-cpu/src/kernels/Atan.ts","../../../../tfjs-backend-cpu/src/kernels/Atan2.ts","../../../../tfjs-backend-cpu/src/kernels/Atanh.ts","../../../../tfjs-backend-cpu/src/utils/pool_utils.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/BatchNorm.ts","../../../../tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-cpu/src/kernels/Bincount.ts","../../../../tfjs-backend-cpu/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-cpu/src/kernels/Clip.ts","../../../../tfjs-backend-cpu/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-cpu/src/kernels/Imag.ts","../../../../tfjs-backend-cpu/src/kernels/Concat.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3D.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-cpu/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-cpu/src/kernels/Cos.ts","../../../../tfjs-backend-cpu/src/kernels/Cosh.ts","../../../../tfjs-backend-cpu/src/kernels/CropAndResize.ts","../../../../tfjs-backend-cpu/src/kernels/Cumsum.ts","../../../../tfjs-backend-cpu/src/kernels/DenseBincount.ts","../../../../tfjs-backend-cpu/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Diag.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2D.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropFilter.ts","../../../../tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts","../../../../tfjs-backend-cpu/src/kernels/Sum.ts","../../../../tfjs-backend-cpu/src/kernels/Einsum.ts","../../../../tfjs-backend-cpu/src/kernels/EluGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Erf.ts","../../../../tfjs-backend-cpu/src/kernels/ExpandDims.ts","../../../../tfjs-backend-cpu/src/kernels/RealDiv.ts","../../../../tfjs-backend-cpu/src/utils/fft_utils.ts","../../../../tfjs-backend-cpu/src/kernels/FFT.ts","../../../../tfjs-backend-cpu/src/kernels/Fill.ts","../../../../tfjs-backend-cpu/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-cpu/src/kernels/FloorDiv.ts","../../../../tfjs-backend-cpu/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-cpu/src/kernels/GatherNd.ts","../../../../tfjs-backend-cpu/src/kernels/GatherV2.ts","../../../../tfjs-backend-cpu/src/kernels/IFFT.ts","../../../../tfjs-backend-cpu/src/kernels/IsFinite.ts","../../../../tfjs-backend-cpu/src/kernels/IsInf.ts","../../../../tfjs-backend-cpu/src/kernels/IsNaN.ts","../../../../tfjs-backend-cpu/src/kernels/LinSpace.ts","../../../../tfjs-backend-cpu/src/kernels/Log1p.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalNot.ts","../../../../tfjs-backend-cpu/src/kernels/LogicalOr.ts","../../../../tfjs-backend-cpu/src/kernels/LRN.ts","../../../../tfjs-backend-cpu/src/kernels/LRNGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Max.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-cpu/src/kernels/Mean.ts","../../../../tfjs-backend-cpu/src/kernels/Min.ts","../../../../tfjs-backend-cpu/src/kernels/MirrorPad.ts","../../../../tfjs-backend-cpu/src/kernels/Mod.ts","../../../../tfjs-backend-cpu/src/kernels/Softmax.ts","../../../../tfjs-backend-cpu/src/kernels/Multinomial.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-cpu/src/kernels/OneHot.ts","../../../../tfjs-backend-cpu/src/kernels/ZerosLike.ts","../../../../tfjs-backend-cpu/src/kernels/OnesLike.ts","../../../../tfjs-backend-cpu/src/kernels/Pack.ts","../../../../tfjs-backend-cpu/src/kernels/PadV2.ts","../../../../tfjs-backend-cpu/src/kernels/Pow.ts","../../../../tfjs-backend-cpu/src/kernels/Range.ts","../../../../tfjs-backend-cpu/src/kernels/Reciprocal.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-cpu/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-cpu/src/kernels/Reverse.ts","../../../../tfjs-backend-cpu/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-cpu/src/kernels/Round.ts","../../../../tfjs-backend-cpu/src/kernels/Scatter_impl.ts","../../../../tfjs-backend-cpu/src/kernels/ScatterNd.ts","../../../../tfjs-backend-cpu/src/kernels/Select.ts","../../../../tfjs-backend-cpu/src/kernels/Selu.ts","../../../../tfjs-backend-cpu/src/kernels/Sign.ts","../../../../tfjs-backend-cpu/src/kernels/Sin.ts","../../../../tfjs-backend-cpu/src/kernels/Sinh.ts","../../../../tfjs-backend-cpu/src/kernels/Softplus.ts","../../../../tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-cpu/src/kernels/SparseReshape.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-cpu/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-cpu/src/kernels/SparseToDense.ts","../../../../tfjs-backend-cpu/src/kernels/SplitV.ts","../../../../tfjs-backend-cpu/src/kernels/Square.ts","../../../../tfjs-backend-cpu/src/kernels/Step.ts","../../../../tfjs-backend-cpu/src/kernels/StridedSlice.ts","../../../../tfjs-backend-cpu/src/kernels/StringNGrams.ts","../../../../tfjs-backend-cpu/src/kernels/StringSplit.ts","../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-cpu/src/kernels/Tan.ts","../../../../tfjs-backend-cpu/src/kernels/Tanh.ts","../../../../tfjs-backend-cpu/src/kernels/Tile.ts","../../../../tfjs-backend-cpu/src/kernels/TopK.ts","../../../../tfjs-backend-cpu/src/kernels/Transform.ts","../../../../tfjs-backend-cpu/src/kernels/Unique.ts","../../../../tfjs-backend-cpu/src/kernels/Unpack.ts","../../../../tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-cpu/src/register_all_kernels.ts","../../../../tfjs-backend-cpu/src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${\n              opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendTimingInfo, buffer, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, Rank, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nconst whereImpl = kernel_impls.whereImpl;\nimport {assertNotComplex} from './cpu_util';\n\ninterface DataId {}\n\nexport interface TensorData<D extends DataType> {\n  values?: backend_util.BackendValues;\n  dtype: D;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensors, with a parent joining the two with the\n  // complexTensorInfos field.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  // refCount keeps track of how many tensors reference it. Used for memory\n  // management.\n  refCount: number;\n}\n\nexport class MathBackendCPU extends KernelBackend {\n  public blockSize = 48;\n\n  data: DataStorage<TensorData<DataType>>;\n  private firstUse = true;\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendCPU.nextDataId++;\n  }\n\n  constructor() {\n    super();\n    this.data = new DataStorage(this, engine());\n  }\n\n  write(values: backend_util.BackendValues, shape: number[], dtype: DataType):\n      DataId {\n    if (this.firstUse) {\n      this.firstUse = false;\n      if (env().get('IS_NODE')) {\n        backend_util.warn(\n            '\\n============================\\n' +\n            'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n            'Node.js. To speed things up dramatically, install our node ' +\n            'backend, which binds to TensorFlow C++, by running ' +\n            'npm i @tensorflow/tfjs-node, ' +\n            'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n            'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n            'suffix for CUDA) at the start of your program. ' +\n            'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n            '\\n============================');\n      }\n    }\n    const dataId = {id: this.nextDataId()};\n\n    this.data.set(dataId, {values, dtype, refCount: 1});\n\n    return dataId;\n  }\n\n  /**\n   * Create a data bucket in cpu backend.\n   * @param shape Shape of the `TensorInfo`.\n   * @param dtype DType of the `TensorInfo`.\n   * @param values The value of the `TensorInfo` stored as a flattened array.\n   */\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: backend_util.BackendValues|string[]): TensorInfo {\n    let outId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      outId = this.write(encodedValues, shape, dtype);\n    } else {\n      outId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    return {dataId: outId, shape, dtype};\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TensorData`. */\n  incRef(dataId: DataId): void {\n    const tensorData = this.data.get(dataId);\n    tensorData.refCount++;\n  }\n\n  /** Decrease refCount of a `TensorData`. */\n  decRef(dataId: DataId): void {\n    if (this.data.has(dataId)) {\n      const tensorData = this.data.get(dataId);\n      tensorData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: backend_util.BackendValues, shape: number[],\n      dtype: DataType, refCount: number): void {\n    this.data.set(dataId, {values, dtype, refCount});\n  }\n\n  numDataIds(): number {\n    return this.data.numDataIds();\n  }\n\n  async read(dataId: DataId): Promise<backend_util.BackendValues> {\n    return this.readSync(dataId);\n  }\n  readSync(dataId: DataId): backend_util.BackendValues {\n    const {dtype, complexTensorInfos} = this.data.get(dataId);\n\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    }\n\n    return this.data.get(dataId).values;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  makeOutput<T extends Tensor>(\n      values: backend_util.BackendValues, shape: number[], dtype: DataType): T {\n    const dataId = this.write(values, shape, dtype);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  /**\n   * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n   * is released or memory is not managed in this backend, false if memory is\n   * not cleared.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.data.has(dataId)) {\n      this.data.get(dataId).refCount--;\n      if (!force && this.data.get(dataId).refCount > 0) {\n        return false;\n      }\n\n      const {complexTensorInfos} = this.data.get(dataId);\n\n      if (complexTensorInfos != null) {\n        this.disposeData(complexTensorInfos.real.dataId, true);\n        this.disposeData(complexTensorInfos.imag.dataId, true);\n      }\n\n      this.data.delete(dataId);\n    }\n    return true;\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  async time(f: () => void): Promise<BackendTimingInfo> {\n    const start = util.now();\n    f();\n    const kernelMs = util.now() - start;\n    return {kernelMs};\n  }\n\n  memory() {\n    return {\n      // Unreliable due to automatic gc. The numbers above are cumulative.\n      unreliable: true,\n      reasons:\n          ['The reported memory is an upper bound. Due to automatic garbage ' +\n           'collection, the true allocated memory may be less.']\n    };\n  }\n\n  where(condition: Tensor): Tensor2D {\n    assertNotComplex([condition], 'where');\n\n    const condVals = this.readSync(condition.dataId) as TypedArray;\n    return whereImpl(condition.shape, condVals);\n  }\n\n  dispose() {}\n\n  floatPrecision(): 16|32 {\n    return 32;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return super.epsilon();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function complex(args: {inputs: ComplexInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const realVals = backend.data.get(real.dataId).values as TypedArray;\n  const imagVals = backend.data.get(imag.dataId).values as TypedArray;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n\n  const complex = backend.data.get(complexInfo.dataId);\n\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from '../kernels/Complex';\n\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(\n    backend: MathBackendCPU, shape: number[],\n    dtype: DataType = 'float32'): TensorInfo {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n\n    return complex({inputs: {real, imag}, backend});\n  }\n\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n    }\n    if (row >= denseRows) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(`only one output dimension may be -1, not both ${\n            unknownIndex} and ${d}`);\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(`size ${d} must be non-negative, not ${size}`);\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          'reshape cannot infer the missing ' +\n          'input size for an empty tensor unless all ' +\n          'specified input sizes are non-zero');\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${\n          product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(`Input to reshape is a tensor with ${\n        denseSize} dense values, but the requested shape has ${\n        outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n  if (numIndices !== segmentIds.length) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(`segment ids are not increasing`);\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(`Segment id ${outIndex} out of range [0, ${\n          outputRows}), possibly because segmentIds input is not sorted.`);\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${\n            inputFlat[0]})`);\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport {registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from './backend_cpu';\nimport * as shared from './shared';\n\nexport {MathBackendCPU} from './backend_cpu';\nexport {version as version_cpu} from './version';\nexport {shared};\n\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const elu =\n    unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'cpu',\n  kernelFunc: elu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendCPU,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  assertNotComplex([x], 'leakyRelu');\n\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outVals = util.getTypedArrayFromDType('float32', xSize);\n\n  for (let i = 0; i < xVals.length; i++) {\n    outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n  }\n\n  return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'cpu',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'cpu',\n  kernelFunc: relu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Relu6} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const relu6 =\n    unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'cpu',\n  kernelFunc: relu6,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {elu} from '../kernels/Elu';\nimport {identity} from '../kernels/Identity';\nimport {leakyRelu} from '../kernels/LeakyRelu';\nimport {prelu} from '../kernels/Prelu';\nimport {relu} from '../kernels/Relu';\nimport {relu6} from '../kernels/Relu6';\nimport {sigmoid} from '../kernels/Sigmoid';\n\nexport function applyActivation(\n    backend: MathBackendCPU, x: TensorInfo, activation: backend_util.Activation,\n    preluActivationWeights?: TensorInfo, leakyreluAlpha?: number): TensorInfo {\n  if (activation === 'linear') {\n    return identity({inputs: {x}, backend});\n  } else if (activation === 'relu') {\n    return relu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'elu') {\n    return elu({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'relu6') {\n    return relu6({inputs: {x}, backend}) as TensorInfo;\n  } else if (activation === 'prelu') {\n    return prelu({inputs: {x, alpha: preluActivationWeights}, backend});\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu({inputs: {x}, backend, attrs: {alpha: leakyreluAlpha}});\n  } else if (activation === 'sigmoid') {\n    return sigmoid({inputs: {x}, backend}) as TensorInfo;\n  }\n  throw new Error(\n      `Activation ${activation} has not been implemented for the CPU backend.`);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, buffer, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {reshape} from './Reshape';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  assertNotComplex([a, b], 'matMul');\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n                                [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n                                [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n\n  const a3dValues = backend.data.get(a3d.dataId).values as TypedArray;\n  const b3dValues = backend.data.get(b3d.dataId).values as TypedArray;\n\n  const a3dStrides = util.computeStrides(a3d.shape);\n  const b3dStrides = util.computeStrides(b3d.shape);\n\n  const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n      [a3dStrides[0], 1, a3dStrides[1]] :\n      [a3dStrides[0], a3dStrides[1], 1];\n  const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n      [1, b3dStrides[1], b3dStrides[0]] :\n      [b3dStrides[1], 1, b3dStrides[0]];\n\n  const size = leftDim * rightDim;\n  const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n\n  const resVals = result.values as TypedArray;\n  const blockSize = backend.blockSize;\n\n  for (let bi = 0; bi < batchDim; bi++) {\n    for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n      for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n        for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n          // for when blockSize doesn't evenly divide the input\n          const iBlock = Math.min(i0 + blockSize, leftDim);\n          const jBlock = Math.min(j0 + blockSize, rightDim);\n          const kBlock = Math.min(k0 + blockSize, sharedDim);\n\n          for (let i = i0; i < iBlock; i++) {\n            for (let j = j0; j < jBlock; j++) {\n              let sum = 0.0;\n\n              for (let k = k0; k < kBlock; k++) {\n                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                const aVal =\n                    a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                const bVal =\n                    b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                sum += aVal * bVal;\n              }\n              resVals[bi * size + (i * rightDim + j)] += sum;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  backend.disposeIntermediateTensorInfo(a3d);\n  backend.disposeIntermediateTensorInfo(b3d);\n\n  // set correct shape on output.\n  return backend.makeTensorInfo(\n      outShape, result.dtype, result.values as TypedArray);\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'cpu',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'cpu',\n  kernelFunc: acos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'cpu',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendCPU, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'all');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let all = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      all = all && value;\n    }\n    vals[i] = all;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'cpu',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendCPU, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'any');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let anyVal = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      anyVal = anyVal || value;\n    }\n    vals[i] = anyVal;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'cpu',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args: {inputs: ArgMaxInputs, backend: MathBackendCPU, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMax');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    let maxIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value > max) {\n        max = value;\n        maxIndex = j;\n      }\n    }\n    vals[i] = maxIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'cpu',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'cpu',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'cpu',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'cpu',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2, KernelConfig} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const atan2Impl = createSimpleBinaryKernelImpl(\n    (aValue, bValue) => Math.atan2(aValue as number, bValue as number));\n\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'cpu',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'cpu',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function avgPool(\n    args:\n        {inputs: AvgPoolInputs, backend: MathBackendCPU, attrs: AvgPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'cpu',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, buffer, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'avgPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins.\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel;\n                }\n              }\n            }\n            dx.set(\n                dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPool3DGradConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function batchNorm(args: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendCPU,\n  attrs: FusedBatchNormAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, scale, offset, mean, variance} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const mVals = backend.data.get(mean.dataId).values as TypedArray;\n  const varVals = backend.data.get(variance.dataId).values as TypedArray;\n  const sVals = scale ? backend.data.get(scale.dataId).values as TypedArray :\n                        new Float32Array([1]);\n  const offVals = offset ?\n      backend.data.get(offset.dataId).values as TypedArray :\n      new Float32Array([0]);\n  const outVals = new Float32Array(xVals.length);\n\n  const offValsLength = offVals.length;\n  const sValsLength = sVals.length;\n  const varValsLength = varVals.length;\n  const mValsLength = mVals.length;\n\n  let offi = 0;\n  let mi = 0;\n  let si = 0;\n  let vi = 0;\n  for (let i = 0; i < xVals.length; ++i) {\n    outVals[i] = offVals[offi++] +\n        (xVals[i] - mVals[mi++]) * sVals[si++] /\n            Math.sqrt(varVals[vi++] + varianceEpsilon);\n    if (offi >= offValsLength) {\n      offi = 0;\n    }\n    if (mi >= mValsLength) {\n      mi = 0;\n    }\n    if (si >= sValsLength) {\n      si = 0;\n    }\n    if (vi >= varValsLength) {\n      vi = 0;\n    }\n  }\n  return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'cpu',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl} from './Bincount_impl';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendCPU,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n  const outVals =\n      bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'cpu',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendCPU,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.data.get(s0.dataId).values as TypedArray;\n  const s1Vals = backend.data.get(s1.dataId).values as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'cpu',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n  const clipAttrs = attrs as {} as ClipByValueAttrs;\n  if (xi > clipAttrs.clipValueMax) {\n    return clipAttrs.clipValueMax;\n  }\n  return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\n\nexport const clipConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'cpu',\n  kernelFunc: clip,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n  const imagVal = backend.data.get(imag.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the imag value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'cpu',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concat(\n    args: {inputs: ConcatInputs, backend: MathBackendCPU, attrs: ConcatAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  if ($inputs[0].dtype === 'complex64') {\n    const reals = $inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = $inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concat({inputs: reals, backend, attrs: {axis: $axis}});\n    const imagConcated = concat({inputs: imags, backend, attrs: {axis: $axis}});\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const inputs2D = $inputs.map(t => {\n    const innerSize = util.sizeFromShape(t.shape.slice($axis));\n    const shape = [-1, innerSize];\n    return reshape({inputs: {x: t}, backend, attrs: {shape}});\n  });\n\n  const inputsValShapes = inputs2D.map(t => {\n    return {vals: backend.data.get(t.dataId).values, shape: t.shape};\n  });\n\n  // Concats 2d tensors along axis=1.\n  outShape =\n      backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n  const simplyConcat = inputs2D[0].shape[0] === 1;\n  const outVals =\n      concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n\n  const finalOutShape =\n      backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n\n  const outInfo =\n      backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n\n  inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outInfo;\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'cpu',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3D(\n    args: {inputs: Conv3DInputs, backend: MathBackendCPU, attrs: Conv3DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  assertNotComplex([x, filter], 'conv3d');\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const {\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    padInfo\n  } = convInfo;\n  const padFront = padInfo.front;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n      const yOffset2 = yOffset1 + yF * y.strides[1];\n      const xFCorner = yF * convInfo.strideDepth - padFront;\n      for (let wF = 0; wF < filterDepth; ++wF) {\n        const xF = xFCorner + wF * dilationDepth;\n        if (xF < 0 || xF >= convInfo.inDepth) {\n          continue;\n        }\n        const wOffset1 = wF * filterStrides[0];\n        const xOffset2 = xOffset1 + xF * xStrides[1];\n\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n          const yOffset3 = yOffset2 + yR * y.strides[2];\n          const xRCorner = yR * convInfo.strideHeight - padTop;\n          for (let wR = 0; wR < filterHeight; ++wR) {\n            const xR = xRCorner + wR * dilationHeight;\n            if (xR < 0 || xR >= convInfo.inHeight) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wR * filterStrides[1];\n            const xOffset3 = xOffset2 + xR * xStrides[2];\n            for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n              const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n              const xCCorner = yC * convInfo.strideWidth - padLeft;\n              for (let wC = 0; wC < filterWidth; ++wC) {\n                const xC = xCCorner + wC * dilationWidth;\n                if (xC < 0 || xC >= convInfo.inWidth) {\n                  continue;\n                }\n                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                let wOffset4 = wOffset3;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                  const xVal = xVals[xOffset4 + d1];\n                  for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                  }\n                  wOffset4 += convInfo.outChannels;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'cpu',\n  kernelFunc: conv3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropInputV2(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropInputV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  assertNotComplex([dy], 'conv3dBackpropInputV2');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n  const {\n    batchSize,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inDepth,\n    inHeight,\n    inWidth,\n    outChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    strideDepth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      // Frames of depth\n      for (let xF = 0; xF < inDepth; ++xF) {\n        const xFCorner = xF - frontPad;\n        const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n        const yFMax =\n            Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n\n        // Rows as per standard 2d matrix notation\n        for (let xR = 0; xR < inHeight; ++xR) {\n          const xRCorner = xR - topPad;\n          const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n          const yRMax =\n              Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n          // Columns as per standard 2d matrix notation\n          for (let xC = 0; xC < inWidth; ++xC) {\n            const xCCorner = xC - leftPad;\n            const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n            const yCMax =\n                Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n            let dotProd = 0;\n            for (let yF = xFMin; yF < yFMax; ++yF) {\n              const wF = yF * strideDepth - xFCorner;\n\n              for (let yR = xRMin; yR < yRMax; ++yR) {\n                const wR = yR * strideHeight - xRCorner;\n\n                for (let yC = xCMin; yC < yCMax; ++yC) {\n                  const wC = yC * strideWidth - xCCorner;\n                  const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                  const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                      fltS1 * (filterHeight - 1 - wR) +\n                      fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n\n                  for (let d2 = 0; d2 < outChannels; ++d2) {\n                    const pixel = dyValues[dyOffset + d2];\n                    const weight = fltValues[fltOffset + d2];\n                    dotProd += pixel * weight;\n                  }\n                }\n              }\n            }\n            dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv3DBackpropInputV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropInputV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'cpu',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'cpu',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function cropAndResize(args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendCPU,\n  attrs: CropAndResizeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const numBoxes = boxes.shape[0];\n\n  const [cropHeight, cropWidth] = cropSize;\n  const output =\n      buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n\n  const boxVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const boxIndVals = backend.data.get(boxInd.dataId).values as TypedArray;\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n\n  const inStride =\n      util.computeStrides(image.shape);  // to calculate flat indexes into image\n  const outStride = util.computeStrides(\n      output.shape);  // to calculate flat indexes into output\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n  for (let b = 0; b < numBoxes; b++) {\n    const startInd = b * 4;\n    const y1 = boxVals[startInd];\n    const x1 = boxVals[startInd + 1];\n    const y2 = boxVals[startInd + 2];\n    const x2 = boxVals[startInd + 3];\n\n    const bInd: number = boxIndVals[b];\n    if (bInd >= batch) {\n      continue;\n    }\n\n    const heightScale =\n        (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n    const widthScale =\n        (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n\n    for (let y = 0; y < cropHeight; y++) {\n      const yInd: number = (cropHeight > 1) ?\n          y1 * (imageHeight - 1) + y * (heightScale) :\n          0.5 * (y1 + y2) * (imageHeight - 1);\n\n      if (yInd < 0 || yInd > imageHeight - 1) {\n        for (let x = 0; x < cropWidth; x++) {\n          for (let c = 0; c < numChannels; c++) {\n            const ind =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = extrapolationValue;\n          }\n        }\n        continue;\n      }\n\n      if (method === 'bilinear') {\n        const topInd = Math.floor(yInd);\n        const bottomInd = Math.ceil(yInd);\n        const yLerp = yInd - topInd;\n\n        for (let x = 0; x < cropWidth; x++) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const leftInd = Math.floor(xInd);\n          const rightInd = Math.ceil(xInd);\n          const xLerp = xInd - leftInd;\n\n          for (let c = 0; c < numChannels; c++) {\n            let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                bInd * inStride[0];\n            const topRight = imageVals[ind];\n\n            ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomLeft = imageVals[ind];\n\n            ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                bInd * inStride[0];\n            const bottomRight = imageVals[ind];\n\n            const top = topLeft + (topRight - topLeft) * xLerp;\n            const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n\n            ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[ind] = top + ((bottom - top) * yLerp);\n          }\n        }\n      } else {  // method == \"nearest\"\n        for (let x = 0; x < cropWidth; ++x) {\n          const xInd = (cropWidth > 1) ?\n              x1 * (imageWidth - 1) + x * widthScale :\n              0.5 * (x1 + x2) * (imageWidth - 1);\n\n          if (xInd < 0 || xInd > imageWidth - 1) {\n            for (let c = 0; c < numChannels; c++) {\n              const ind =\n                  c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n              output.values[ind] = extrapolationValue;\n            }\n            continue;\n          }\n\n          const closestX = Math.round(xInd);\n          const closestY = Math.round(yInd);\n          for (let c = 0; c < numChannels; c++) {\n            const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                bInd * inStride[0];\n            const outInd =\n                c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n            output.values[outInd] = imageVals[inInd];\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'cpu',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args: {inputs: CumsumInputs, backend: MathBackendCPU, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  assertNotComplex(x, 'cumsum');\n\n  const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n  let $x = x;\n  if (permutation != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n\n  if (permutedAxis !== $x.shape.length - 1) {\n    throw new Error(\n        `backend.cumsum in CPU expects an inner-most ` +\n        `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n  }\n\n  const resultDtype = upcastType($x.dtype, 'int32');\n  const vals = util.makeZerosTypedArray(\n                   util.sizeFromShape($x.shape), resultDtype) as TypedArray;\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  const finalDim = $x.shape[$x.shape.length - 1];\n  const indexAdjuster = reverse ?\n      (i: number, j: number) => i + finalDim - j - 1 :\n      (i: number, j: number) => i + j;\n  for (let i = 0; i < aVals.length; i += finalDim) {\n    for (let j = 0; j < finalDim; j++) {\n      const idx = indexAdjuster(i, j);\n      if (j === 0) {\n        vals[idx] = exclusive ? 0 : aVals[idx];\n      } else {\n        const prevIdx = indexAdjuster(i, j - 1);\n        vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                                aVals[idx] + vals[prevIdx];\n      }\n    }\n  }\n\n  const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo($x);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'cpu',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'depthwiseConv2DNative');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const {filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo} =\n      convInfo;\n  const padLeft = padInfo.left;\n  const padTop = padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xStrides[0];\n    const yOffset1 = b * y.strides[0];\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * y.strides[1];\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xStrides[1];\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * y.strides[2];\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n            let yOffset4 = yOffset3;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1];\n              for (let q = 0; q < chMul; ++q) {\n                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n              }\n              yOffset4 += chMul;\n              wOffset3 += chMul;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropFilter, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropFilterConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed filter gradients has the same dimensions as the filter:\n    // [filterHeight, filterWidth, depth]\n    const gradients = util.makeZerosNestedTypedArray(\n                          filter.shape, filter.dtype) as number[][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hMax = 0;\n            let wMax = 0;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hMax = h;\n                      wMax = w;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n\n    return {dataId, shape: filter.shape, dtype: filter.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2dBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args: {inputs: EinsumInputs, backend: MathBackendCPU, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'cpu',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function eluGrad(args: {inputs: EluGradInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {dy, y} = inputs;\n\n  assertNotComplex([dy, y], 'eluGrad');\n\n  const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n  const values = backend.data.get(y.dataId).values as TypedArray;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  for (let i = 0; i < values.length; ++i) {\n    const v = values[i];\n    if (v >= 1) {\n      resultValues[i] = dyValues[i];\n    } else {\n      resultValues[i] = dyValues[i] * (v + 1);\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'cpu',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\n\nexport const erf = unaryKernelFunc(\n    Erf,\n    (xi) => {\n      const sign = Math.sign(xi);\n      const v = Math.abs(xi);\n      const t = 1.0 / (1.0 + p * v);\n      return sign *\n          (1.0 -\n           (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n               Math.exp(-v * v));\n    },\n);\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'cpu',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  backend: MathBackendCPU,\n  attrs: ExpandDimsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {input} = inputs;\n  const {dim} = attrs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'cpu',\n  kernelFunc: expandDims as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, RealDiv} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const realDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'cpu',\n  kernelFunc: div\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Tensor, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {add} from '../kernels/Add';\nimport {complex} from '../kernels/Complex';\nimport {concat} from '../kernels/Concat';\nimport {identity} from '../kernels/Identity';\nimport {imag} from '../kernels/Imag';\nimport {multiply} from '../kernels/Multiply';\nimport {real} from '../kernels/Real';\nimport {realDivConfig} from '../kernels/RealDiv';\nimport {slice} from '../kernels/Slice';\nimport {sub} from '../kernels/Sub';\n\n/**\n * Calculate FFT of inner most elements of batch tensor.\n */\nexport function fftBatch(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): TensorInfo {\n  const inputShape = input.shape;\n  const batch = inputShape[0];\n  const innerDim = inputShape[1];\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const real2D = inputVals.complexTensorInfos.real;\n  const imag2D = inputVals.complexTensorInfos.imag;\n\n  // Collects real and imaginary values separately.\n  const resultShape = [batch, innerDim];\n  const resultSize = util.sizeFromShape(resultShape);\n  const resultReal = util.getTypedArrayFromDType('float32', resultSize);\n  const resultImag = util.getTypedArrayFromDType('float32', resultSize);\n\n  for (let b = 0; b < batch; b++) {\n    // TODO: Support slice ops for complex type.\n    const r = slice({\n      inputs: {x: real2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n    const i = slice({\n      inputs: {x: imag2D},\n      backend: cpuBackend,\n      attrs: {begin: [b, 0], size: [1, innerDim]}\n    });\n\n    const input = complex({inputs: {real: r, imag: i}, backend: cpuBackend});\n\n    // Run FFT by batch element.\n    const {real, imag} = fftImpl(input, inverse, cpuBackend);\n    const res = backend_util.mergeRealAndImagArrays(real, imag);\n\n    for (let d = 0; d < innerDim; d++) {\n      const c = backend_util.getComplexWithIndex(res, d);\n      resultReal[b * innerDim + d] = c.real;\n      resultImag[b * innerDim + d] = c.imag;\n    }\n\n    cpuBackend.disposeIntermediateTensorInfo(r);\n    cpuBackend.disposeIntermediateTensorInfo(i);\n    cpuBackend.disposeIntermediateTensorInfo(input);\n  }\n\n  const $realInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultReal);\n  const $imagInfo: TensorInfo =\n      cpuBackend.makeTensorInfo(resultShape, 'float32', resultImag);\n\n  const result = complex(\n      {inputs: {real: $realInfo, imag: $imagInfo}, backend: cpuBackend});\n\n  cpuBackend.disposeIntermediateTensorInfo($realInfo);\n  cpuBackend.disposeIntermediateTensorInfo($imagInfo);\n\n  return result;\n}\n\nexport function fftImpl(\n    input: TensorInfo, inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  const inputSize = util.sizeFromShape(input.shape);\n\n  const inputVals = cpuBackend.data.get(input.dataId);\n\n  const realVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.real.dataId).values as\n      Float32Array;\n\n  const imagVals =\n      cpuBackend.data.get(inputVals.complexTensorInfos.imag.dataId).values as\n      Float32Array;\n\n  if (isExponentOf2(inputSize)) {\n    const result =\n        fftRadix2(realVals, imagVals, inputSize, inverse, cpuBackend);\n\n    const resultShape = [input.shape[0], input.shape[1]];\n\n    if (inverse) {\n      const realInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.real);\n      const imagInfo: TensorInfo =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', result.imag);\n\n      const sizeInfo: TensorInfo = cpuBackend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(inputSize as {} as 'float32', 'float32'));\n      const sizeInfoCopy =\n          identity({inputs: {x: sizeInfo}, backend: cpuBackend});\n\n      const divRealInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: realInfo, b: sizeInfo}, backend: cpuBackend}) as\n          TensorInfo;\n      const divImagInfo =\n          realDivConfig.kernelFunc(\n              {inputs: {a: imagInfo, b: sizeInfoCopy}, backend: cpuBackend}) as\n          TensorInfo;\n\n      const divRealVals =\n          cpuBackend.data.get(divRealInfo.dataId).values as Float32Array;\n      const divImagVals =\n          cpuBackend.data.get(divImagInfo.dataId).values as Float32Array;\n\n      cpuBackend.disposeIntermediateTensorInfo(realInfo);\n      cpuBackend.disposeIntermediateTensorInfo(imagInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfo);\n      cpuBackend.disposeIntermediateTensorInfo(sizeInfoCopy);\n      cpuBackend.disposeIntermediateTensorInfo(divRealInfo);\n      cpuBackend.disposeIntermediateTensorInfo(divImagInfo);\n\n      return {real: divRealVals, imag: divImagVals};\n    }\n\n    return result;\n  } else {\n    const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n    const rawOutput =\n        fourierTransformByMatmul(data, inputSize, inverse) as Float32Array;\n\n    return backend_util.splitRealAndImagArrays(rawOutput);\n  }\n}\n\nfunction isExponentOf2(size: number): boolean {\n  return (size & size - 1) === 0;\n}\n\n// FFT using Cooley-Tukey algorithm on radix 2 dimensional input.\nfunction fftRadix2(\n    realVals: Float32Array, imagVals: Float32Array, size: number,\n    inverse: boolean,\n    cpuBackend: MathBackendCPU): {real: Float32Array, imag: Float32Array} {\n  if (size === 1) {\n    return {real: realVals, imag: imagVals};\n  }\n\n  const data = backend_util.mergeRealAndImagArrays(realVals, imagVals);\n\n  const half = size / 2;\n\n  const evenComplex = backend_util.complexWithEvenIndex(data);\n\n  const evenRealVals = evenComplex.real;\n  const evenImagVals = evenComplex.imag;\n\n  const evenShape = [evenRealVals.length];\n\n  const evenRealInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenRealVals);\n  const evenImagInfo =\n      cpuBackend.makeTensorInfo(evenShape, 'float32', evenImagVals);\n\n  const evenTensorInfo = complex(\n      {inputs: {real: evenRealInfo, imag: evenImagInfo}, backend: cpuBackend});\n\n  const oddComplex = backend_util.complexWithOddIndex(data);\n\n  const oddRealVals = oddComplex.real;\n  const oddImagVals = oddComplex.imag;\n\n  const oddShape = [oddRealVals.length];\n\n  const oddRealInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddRealVals);\n  const oddImagInfo =\n      cpuBackend.makeTensorInfo(oddShape, 'float32', oddImagVals);\n\n  const oddTensorInfo = complex(\n      {inputs: {real: oddRealInfo, imag: oddImagInfo}, backend: cpuBackend});\n\n  // Recursive call for half part of original input.\n  const $evenComplex =\n      fftRadix2(evenRealVals, evenImagVals, half, inverse, cpuBackend);\n\n  const $evenRealVals = $evenComplex.real;\n  const $evenImagVals = $evenComplex.imag;\n\n  const $evenShape = [$evenRealVals.length];\n\n  const $evenRealInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenRealVals);\n  const $evenImagInfo =\n      cpuBackend.makeTensorInfo($evenShape, 'float32', $evenImagVals);\n\n  const $evenTensorInfo = complex({\n    inputs: {real: $evenRealInfo, imag: $evenImagInfo},\n    backend: cpuBackend\n  });\n\n  const $oddComplex =\n      fftRadix2(oddRealVals, oddImagVals, half, inverse, cpuBackend);\n\n  const $oddRealVals = $oddComplex.real;\n  const $oddImagVals = $oddComplex.imag;\n\n  const $oddShape = [$oddRealVals.length];\n\n  const $oddRealInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddRealVals);\n  const $oddImagInfo =\n      cpuBackend.makeTensorInfo($oddShape, 'float32', $oddImagVals);\n\n  const $oddTensorInfo = complex(\n      {inputs: {real: $oddRealInfo, imag: $oddImagInfo}, backend: cpuBackend});\n\n  const e = backend_util.exponents(size, inverse);\n  const eShape = [e.real.length];\n\n  const eRealInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.real);\n  const eImagInfo = cpuBackend.makeTensorInfo(eShape, 'float32', e.imag);\n\n  const complexInfo = complex(\n      {inputs: {real: eRealInfo, imag: eImagInfo}, backend: cpuBackend});\n\n  const exponentInfo =\n      multiply(\n          {inputs: {a: complexInfo, b: $oddTensorInfo}, backend: cpuBackend}) as\n      TensorInfo;\n\n  const addPart = add({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n  const subPart = sub({\n                    inputs: {a: $evenTensorInfo, b: exponentInfo},\n                    backend: cpuBackend\n                  }) as TensorInfo;\n\n  const addPartReal = real({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartReal = real({inputs: {input: subPart}, backend: cpuBackend});\n\n  const addPartImag = imag({inputs: {input: addPart}, backend: cpuBackend});\n  const subPartImag = imag({inputs: {input: subPart}, backend: cpuBackend});\n\n  const $real = concat({\n    inputs: [addPartReal as Tensor, subPartReal as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n  const $imag = concat({\n    inputs: [addPartImag as Tensor, subPartImag as Tensor],\n    backend: cpuBackend,\n    attrs: {axis: 0}\n  });\n\n  const $realVals = cpuBackend.data.get($real.dataId).values as Float32Array;\n  const $imagVals = cpuBackend.data.get($imag.dataId).values as Float32Array;\n\n  cpuBackend.disposeIntermediateTensorInfo(evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($evenTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo($oddTensorInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eRealInfo);\n  cpuBackend.disposeIntermediateTensorInfo(eImagInfo);\n  cpuBackend.disposeIntermediateTensorInfo(complexInfo);\n  cpuBackend.disposeIntermediateTensorInfo(exponentInfo);\n  cpuBackend.disposeIntermediateTensorInfo(addPart);\n  cpuBackend.disposeIntermediateTensorInfo(subPart);\n  cpuBackend.disposeIntermediateTensorInfo(addPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(addPartImag);\n  cpuBackend.disposeIntermediateTensorInfo(subPartReal);\n  cpuBackend.disposeIntermediateTensorInfo(subPartImag);\n  cpuBackend.disposeIntermediateTensorInfo($real);\n  cpuBackend.disposeIntermediateTensorInfo($imag);\n\n  return {real: $realVals, imag: $imagVals};\n}\n\n// Calculate fourier transform by multplying sinusoid matrix.\nfunction fourierTransformByMatmul(\n    data: TypedArray, size: number, inverse: boolean): TypedArray {\n  const ret = new Float32Array(size * 2);\n  // TODO: Use matmul instead once it supports complex64 type.\n  for (let r = 0; r < size; r++) {\n    let real = 0.0;\n    let imag = 0.0;\n    for (let c = 0; c < size; c++) {\n      const e = backend_util.exponent(r * c, size, inverse);\n      const term = backend_util.getComplexWithIndex(data as Float32Array, c);\n      real += term.real * e.real - term.imag * e.imag;\n      imag += term.real * e.imag + term.imag * e.real;\n    }\n    if (inverse) {\n      real /= size;\n      imag /= size;\n    }\n    backend_util.assignToTypedArray(ret, real, imag, r);\n  }\n  return ret;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coordX = Math.round(imageWidth - col - 1);\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n\n            let outputValue = imageVals[outIdx];\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth) {\n              // set the output to the image value at the coordinate position.\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const floorDivImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.floor(a / b));\nexport const floorDiv =\n    binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {conv2D} from './Conv2D';\n\nexport function fusedConv2D(args: {\n  inputs: FusedConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = conv2D({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const resultOld = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  if (activation) {\n    const resultOld = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(resultOld);\n  }\n\n  return result;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {gatherNdImpl} from './GatherNd_Impl';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n  if (numSlices === 0) {\n    return backend.makeTensorInfo(resultShape, params.dtype, []);\n  }\n\n  const indicesData = backend.data.get(indices.dataId).values as TypedArray;\n  const paramsBuf = backend.bufferSync(params);\n  const outBuf = gatherNdImpl(\n      indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n      strides, params.shape, paramsSize);\n\n  return backend.makeTensorInfo(resultShape, params.dtype, outBuf.values);\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'cpu',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, true, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'cpu',\n  kernelFunc: ifft as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isFinite =\n    unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'cpu',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isInf =\n    unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'cpu',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const isNaN =\n    unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'cpu',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {linSpaceImpl} from './LinSpace_impl';\n\nexport function linSpace(args: {backend: MathBackendCPU, attrs: LinSpaceAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  const outVals = linSpaceImpl(start, stop, num);\n\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'cpu',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'cpu',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalAndImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a && b);\nexport const logicalAnd = binaryKernelFunc(\n    LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'cpu',\n  kernelFunc: logicalAnd\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const logicalNot =\n    unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'cpu',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const logicalOrImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => a || b);\nexport const logicalOr =\n    binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'cpu',\n  kernelFunc: logicalOr\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\nexport const lRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRNGrad(\n    args:\n        {inputs: LRNGradInputs, backend: MathBackendCPU, attrs: LRNGradAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(dy, 'LRNGrad');\n\n  const dySize = util.sizeFromShape(dy.shape);\n\n  const channels = dy.shape[3];\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const yValues = backend.data.get(y.dataId).values as TypedArray;\n  const result = new Float32Array(dySize);\n  const size = dySize;\n\n  for (let offset = 0; offset < size; offset++) {\n    const currentChannel = offset % channels;\n    const depthBegin =\n        (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n    const depthEnd = (offset - currentChannel) +\n        Math.min(channels, currentChannel + depthRadius + 1);\n\n    let norm = 0;\n    for (let k = depthBegin; k < depthEnd; k++) {\n      norm += Math.pow(xValues[k], 2);\n    }\n    norm = alpha * norm + bias;\n\n    for (let k = depthBegin; k < depthEnd; k++) {\n      let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n      if (offset === k) {\n        dyi += Math.pow(norm, -beta);\n      }\n      dyi *= dyValues[offset];\n      result[k] += dyi;\n    }\n  }\n\n  return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\n\nexport const lRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'cpu',\n  kernelFunc: lRNGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig} from '@tensorflow/tfjs-core';\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendCPU, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n  const cpuBackend = backend;\n  let xShape = x.shape;\n  const xRank = xShape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, xShape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n  if (permutedAxes != null) {\n    const newShape: number[] = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n\n    xShape = newShape;\n  }\n\n  assertNotComplex(x, 'max');\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, axes);\n\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n  const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n    outShape = newShape;\n  }\n\n  return {dataId, shape: outShape, dtype: x.dtype};\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'cpu',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function maxPool3D(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'maxPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'cpu',\n  kernelFunc: maxPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {maxPoolPositions, pool} from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    includeBatchInIndex: boolean, convInfo: backend_util.Conv2DInfo) {\n  const strides = util.computeStrides(xShape);\n  const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n  const maxPositions = maxPoolPositions(\n      xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n\n  return [maxPools.values, maxPositions.values];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, NumericDataType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function mirrorPad(args: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendCPU,\n  attrs: MirrorPadAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  assertNotComplex(x, 'mirrorPad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n  const end = paddings.map((p, i) => p[0] + x.shape[i]);\n  const offset = mode === 'reflect' ? 0 : 1;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  for (let i = 0; i < resultSize; i++) {\n    let coords = util.indexToLoc(i, resultRank, resultStrides);\n    for (let i = 0; i < resultRank; i++) {\n      if (coords[i] < start[i]) {\n        coords[i] = start[i] * 2 - coords[i] - offset;\n      } else if (coords[i] >= end[i]) {\n        coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n      }\n    }\n    coords = coords.map((c, i) => c - start[i]);\n\n    const inIndex = util.locToIndex(coords, xRank, xStrides);\n\n    resVals[i] = xVals[inIndex];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'cpu',\n  kernelFunc: mirrorPad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Mod} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const modImpl =\n    createSimpleBinaryKernelImpl(((aValue: number, bValue: number) => {\n      const rem = aValue % bValue;\n      if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n      } else {\n        return (rem + bValue) % bValue;\n      }\n    }));\n\nexport const mod = binaryKernelFunc(Mod, modImpl);\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'cpu',\n  kernelFunc: mod\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV3Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppression');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('zerosLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 0, dtype: x.dtype}});\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'cpu',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendCPU, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'cpu',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Pow} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const powImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'cpu',\n  kernelFunc: pow\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {rangeImpl} from './Range_impl';\n\nexport function range(args: {backend: MathBackendCPU, attrs: RangeAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, dtype, step} = attrs;\n\n  const values = rangeImpl(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n}\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'cpu',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'cpu',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeBilinearGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass and add the\n  // corresponding coefficient from dy to the gradient (with some\n  // interpolation).\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  // Reference implementation\n  // tslint:disable-next-line:max-line-length\n  // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  let offset = 0;\n  for (let b = 0; b < batch; b++) {\n    const bOffset = b * imagesStrides[0];\n    for (let r = 0; r < yHeight; r++) {\n      const dxR = r * heightScale;\n      const topDxRIndex = Math.floor(dxR);\n      const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n\n      const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n      const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n\n      const dxRLerp = dxR - topDxRIndex;\n      const inverseDxRLerp = 1.0 - dxRLerp;\n      for (let c = 0; c < yWidth; c++) {\n        const dxC = c * widthScale;\n        const leftDxCIndex = Math.floor(dxC);\n        const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n        const dxCLerp = dxC - leftDxCIndex;\n        const inverseDxCLerp = 1.0 - dxCLerp;\n\n        const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n        const topRightRCOffset =\n            topDxROffset + rightDxCIndex * imagesStrides[2];\n        const bottomLeftRCOffset =\n            bottomDxROffset + leftDxCIndex * imagesStrides[2];\n        const bottomRightRCOffset =\n            bottomDxROffset + rightDxCIndex * imagesStrides[2];\n\n        const inverseDxRLerpTimesInverseDxCLerp =\n            inverseDxRLerp * inverseDxCLerp;\n        const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n        const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n        const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n        for (let d = 0; d < depth; d++) {\n          const dyVal = dyValues[offset++];\n          output[topLeftRCOffset + d] +=\n              dyVal * inverseDxRLerpTimesInverseDxCLerp;\n          output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n          output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n          output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, xWidth, xHeight, depth], 'float32', output);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeNearestNeighbor');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  let outputOffset = 0;\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < newHeight; r++) {\n      const sourceFracRow = halfPixelCenters ?\n          effectiveRowSizeRatio * (r + 0.5) :\n          effectiveRowSizeRatio * r;\n      let sourceNearestRow = Math.min(\n          oldHeight - 1,\n          alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n      if (halfPixelCenters) {\n        sourceNearestRow = Math.max(0, sourceNearestRow);\n      }\n      const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        const sourceFracCol = halfPixelCenters ?\n            effectiveColSizeRatio * (c + 0.5) :\n            effectiveColSizeRatio * c;\n        let sourceNearestCol = Math.min(\n            oldWidth - 1,\n            alignCorners ? Math.round(sourceFracCol) :\n                           Math.floor(sourceFracCol));\n        if (halfPixelCenters) {\n          sourceNearestCol = Math.max(0, sourceNearestCol);\n        }\n        const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const newVal = xValues[colOffset + d];\n          output[outputOffset++] = newVal;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [batch, xHeight, xWidth, depth] = images.shape;\n  const [, yHeight, yWidth] = dy.shape;\n\n  const output = new Float32Array(batch * xHeight * xWidth * depth);\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n\n  // In the backwards pass, we want to find the pixels that were generated\n  // for each pixel in the input image the forward pass\n\n  const effectiveXSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n    (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n  ];\n\n  const effectiveYSize: [number, number] = [\n    (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n    (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n  ];\n\n  const heightScale = effectiveXSize[0] / effectiveYSize[0];\n  const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n  const invHeightScale = 1 / heightScale;\n  const invWidthScale = 1 / widthScale;\n\n  // This defines the size of the window of values around a particular\n  // index in dy that we want to search for contributions to dx.\n  const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n  const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n  // Loop over the output space.\n  for (let b = 0; b < batch; b++) {\n    const batchOffset = b * imagesStrides[0];\n    for (let r = 0; r < xHeight; r++) {\n      const rowOffset = batchOffset + r * imagesStrides[1];\n\n      // Compute bounds for where in dy we will look\n      const startRLerp = Math.floor(r * invHeightScale);\n      const startDyR = Math.floor(startRLerp - (winHeight / 2));\n      for (let c = 0; c < xWidth; c++) {\n        const colOffset = rowOffset + c * imagesStrides[2];\n\n        // Compute bounds for where in dy we will look\n        const startCLerp = Math.floor(c * invWidthScale);\n        const startDyC = Math.floor(startCLerp - (winWidth / 2));\n\n        for (let d = 0; d < depth; d++) {\n          let accum = 0;\n          // loop over dy\n\n          for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n            const dyR = dyRIndex + startDyR;\n            // Guard against the window exceeding the bounds of dy\n            if (dyR < 0 || dyR >= yHeight) {\n              continue;\n            }\n\n            const dyROffset = batchOffset + dyR * dyStrides[1];\n            const sourceFracRow = dyR * heightScale;\n            const sourceNearestRow = Math.min(\n                xHeight - 1,\n                alignCorners ? Math.round(sourceFracRow) :\n                               Math.floor(sourceFracRow));\n            if (r !== sourceNearestRow) {\n              continue;\n            }\n            for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n              const dyC = dyCIndex + startDyC;\n              // Guard against the window exceeding the bounds of dy\n              if (dyC < 0 || dyC >= yWidth) {\n                continue;\n              }\n\n              const dyCOffset = dyROffset + dyC * dyStrides[2];\n              const sourceFracCol = dyC * widthScale;\n              const sourceNearestCol = Math.min(\n                  xWidth - 1,\n                  alignCorners ? Math.round(sourceFracCol) :\n                                 Math.floor(sourceFracCol));\n\n              if (c === sourceNearestCol) {\n                accum += dyValues[dyCOffset + d];\n              }\n            }\n          }\n          output[colOffset + d] = accum;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'cpu',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const round = unaryKernelFunc(Round, (xi) => {\n  // The algorithm is based on banker's rounding.\n  const base = Math.floor(xi);\n  if (xi - base < 0.5) {\n    return Math.floor(xi);\n  } else if (xi - base > 0.5) {\n    return Math.ceil(xi);\n  } else {\n    if (base % 2.0 === 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'cpu',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {buffer, Rank, ShapeMap, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function scatterImpl<R extends Rank>(\n    indices: TensorBuffer<R>, updates: TensorBuffer<R>, shape: number[],\n    outputSize: number, sliceSize: number, numUpdates: number,\n    sliceRank: number, strides: number[], defaultValue: number,\n    sumDupeIndices: boolean): TensorBuffer<R> {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  const indicesData = indices.values as TypedArray;\n  const updatesData = updates.values as TypedArray;\n\n  if (outputSize === 0) {\n    return buffer(shape as ShapeMap[R], updates.dtype);\n  }\n\n  const outBuf = buffer(flattenShape, updates.dtype);\n  (outBuf.values as TypedArray).fill(defaultValue);\n\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] +=\n            updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n            updatesData[0] :\n            updatesData[i * sliceSize + k];\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\n\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n  if (xi >= 0) {\n    return scale * xi;\n  } else {\n    return scaleAlpha * (Math.exp(xi) - 1);\n  }\n});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'cpu',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n  if (xi < 0) {\n    return -1;\n  } else if (xi > 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'cpu',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'cpu',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'cpu',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseFillEmptyRowsImpl} from './SparseFillEmptyRows_impl';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendCPU\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $values = backend.data.get(values.dataId).values as TypedArray;\n  const $denseShape = backend.data.get(denseShape.dataId).values as TypedArray;\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImpl(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'cpu',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseReshapeImpl} from './SparseReshape_impl';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendCPU}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.data.get(inputShape.dataId).values as TypedArray);\n  const $inputIndices =\n      backend.data.get(inputIndices.dataId).values as TypedArray;\n  const targetShape =\n      Array.from(backend.data.get(newShape.dataId).values as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImpl(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'cpu',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n          ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n          ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentMean,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {sparseSegmentReductionImpl} from './SparseSegmentReduction_impl';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n         ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n         ${segmentIds.shape}`);\n  }\n\n  const $data = backend.data.get(data.dataId).values as TypedArray;\n  const $indices = backend.data.get(indices.dataId).values as TypedArray;\n  const $segmentIds = backend.data.get(segmentIds.dataId).values as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImpl(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: sparseSegmentSum,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, SplitVAttrs, SplitVInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig, KernelFunc, SplitV, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args: {inputs: SplitVInputs, backend: MathBackendCPU, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const begin = new Array(x.shape.length).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'cpu',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Step, StepAttrs} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n  const stepAttrs = attrs as {} as StepAttrs;\n  if (isNaN(xi)) {\n    return NaN;\n  } else {\n    return xi > 0 ? 1 : stepAttrs.alpha;\n  }\n});\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'cpu',\n  kernelFunc: step,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringSplitImpl} from './StringSplit_impl';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendCPU,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n  const $delimiter = backend.data.get(delimiter.dataId).values[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImpl($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'cpu',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'cpu',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'cpu',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {tileImpl} from './Tile_impl';\n\nexport function tile(\n    args: {inputs: TileInputs, backend: MathBackendCPU, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  assertNotComplex(x, 'tile');\n  const outBuf = tileImpl(backend.bufferSync(x), reps);\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'cpu',\n  kernelFunc: tile as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchStride + outY * rowStride + outX * colStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args: {inputs: UnpackInputs, backend: MathBackendCPU, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const valueRank = value.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(valueRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < valueRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const begin = new Array(valueRank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const tempRes = slice({inputs: {x: value}, backend, attrs: {begin, size}});\n    res[i] = reshape({inputs: {x: tempRes}, backend, attrs: {shape: outShape}});\n    backend.disposeIntermediateTensorInfo(tempRes);\n  }\n\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'cpu',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport { KernelConfig, registerKernel } from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPool3DGradConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipConfig} from './kernels/Clip';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputV2Config} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2dConfig} from './kernels/Dilation2D';\nimport {dilation2dBackpropFilterConfig} from './kernels/Dilation2DBackpropFilter';\nimport {dilation2dBackpropInputConfig} from './kernels/Dilation2DBackpropInput';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {lRNConfig} from './kernels/LRN';\nimport {lRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPool3DGradConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atanConfig,\n  atan2Config,\n  atanhConfig,\n  avgPoolConfig,\n  avgPool3DConfig,\n  avgPool3DGradConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipConfig,\n  complexConfig,\n  complexAbsConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputV2Config,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  diagConfig,\n  dilation2dConfig,\n  dilation2dBackpropInputConfig,\n  dilation2dBackpropFilterConfig,\n  realDivConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  logConfig,\n  log1pConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  lRNConfig,\n  lRNGradConfig,\n  maximumConfig,\n  maxPoolConfig,\n  maxPool3DConfig,\n  maxPool3DGradConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maxConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  reciprocalConfig,\n  reluConfig,\n  relu6Config,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transposeConfig,\n  transformConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.11.0';\nexport {version};\n"],"names":["assertNotComplex","tensor","opName","Array","isArray","forEach","t","util","assert","dtype","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","constructor","super","this","data","DataStorage","engine","nextDataId","write","values","shape","firstUse","env","get","backend_util","warn","dataId","id","set","refCount","makeTensorInfo","outId","length","isString","encodedValues","map","d","encodeString","has","incRef","decRef","move","numDataIds","read","readSync","complexTensorInfos","realValues","real","imagValues","imag","mergeRealAndImagArrays","bufferSync","decodedData","decodeString","Error","buffer","makeOutput","makeTensorFromDataId","disposeData","force","delete","disposeIntermediateTensorInfo","tensorInfo","time","f","start","now","kernelMs","memory","unreliable","reasons","where","condition","condVals","dispose","floatPrecision","epsilon","simpleAbsImpl","vals","resultValues","Float32Array","i","Math","abs","absConfig","kernelName","Abs","backendName","kernelFunc","args","x","inputs","cpuBackend","backend","sizeFromShape","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","newShape","assertAndGetBroadcastShape","resultRank","resultStrides","computeStrides","resultSize","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","loc","indexToLoc","aLoc","slice","aIndex","locToIndex","bLoc","bIndex","complex","realVals","imagVals","complexInfo","complexConfig","Complex","zeros","makeZerosTypedArray","identity","identityConfig","Identity","input","realVal","realConfig","Real","cast","attrs","zerosTensorInfo","floatX","realPart","hasEncodingLoss","Int32Array","from","xVals","zero","toTypedArray","resultData","resultShape","a","b","castConfig","Cast","binaryKernelFunc","name","simpleImpl","complexImpl","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","$aComplex","$aComplexVals","aReal","aImag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","createComplexBinaryKernelImpl","resultRealVals","resultImagVals","aIdx","bIdx","opResult","addImpl","addComplexImpl","add","Add","addConfig","bincountImpl","weightsVals","weightsDtype","weightsShape","size","weightsSize","outVals","value","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","numCols","outBuf","j","createSimpleUnaryImpl","newValues","unaryKernelFunc","xSize","getArrayFromDType","unaryKernelFuncFromImpl","unaryImpl","ceilImpl","xi","ceil","Ceil","ceilConfig","concatImpl","outShape","simplyConcat","offset","colOffset","tIdx","row","resIdx","col","equalImpl","equal","Equal","equalConfig","expImpl","exp","Exp","expConfig","expm1Impl","expm1","Expm1","expm1Config","floorImpl","floor","Floor","floorConfig","gatherNdImpl","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","index","flattenIndex","dim","push","k","gatherV2Impl","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","greaterImpl","greater","Greater","greaterConfig","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","lessImpl","less","Less","lessConfig","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceImpl","stop","num","step","logImpl","log","Log","logConfig","maxImpl","reduceSize","max","Number","isNaN","maximumImpl","aValue","bValue","maximum","Maximum","maximumConfig","minimumImpl","min","minimum","Minimum","minimumConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","negImpl","xShape","xDtype","minusOne","createScalarValue","negConfig","Neg","res","notEqualImpl","notEqual","NotEqual","notEqualConfig","transposeImpl","perm","xRank","xStrides","newStrides","newLoc","transpose","transposeConfig","Transpose","prodImpl","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","prodConfig","Prod","axis","keepDims","axes","parseAxisParam","permutation","getAxesPermutation","permutedX","intermediateTensorInfos","getInnerMostAxes","expandShapeToKeepDim","rangeImpl","numElements","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","sigmoidImpl","sigmoid","Sigmoid","sigmoidConfig","sliceImpl","begin","isContinous","slice_util","isSliceContinous","flatOffset","computeFlatOffset","subarray","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","$begin","$size","parseSliceParams","assertParamsValid","sliceConfig","Slice","sparseFillEmptyRowsImpl","indices","indicesShape","indicesDType","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","rank","rowsAreOrdered","lastIndicesRow","csrOffset","fill","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","outputShape","product","unknownIndex","missing","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","sparseSegmentReductionImpl","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","outputLength","reduce","output","end","uninitializedIndex","outIndex","nextIndex","sqrtImpl","Sqrt","sqrtConfig","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","stridedSliceImpl","StringNGramsOp","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","compute","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","empty","nGrams","outputStartIdx","dataLength","stringNGramsImpl","dataSplits","split","delimiters","skipEmpty","delimiter","indexOf","token","tokenStart","stringSplitImpl","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","stringToHashBucketFastImpl","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","subImpl","subComplexImpl","sub","Sub","subConfig","tileImpl","reps","comparePair","valueDiff","select","array","left","right","z","s","sd","sign","swap","topKImpl","sorted","lastDim","batch","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","uniqueImpl","$axis","uniqueElements","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","join","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","elu","Elu","eluConfig","leakyRelu","alpha","leakyReluConfig","LeakyRelu","preluImpl","xValue","prelu","preluConfig","Prelu","relu","Relu","reluConfig","relu6","Relu6","relu6Config","applyActivation","activation","preluActivationWeights","leakyreluAlpha","reshape","$shape","inferFromImplicitShape","$xSize","xData","reshapeConfig","Reshape","batchMatMul","transposeA","transposeB","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","blockSize","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","_fusedMatMulConfig","_FusedMatMul","bias","current","addRes","activationRes","intermediates","acos","Acos","acosConfig","acosh","Acosh","acoshConfig","addNConfig","AddN","tensors","currVals","allConfig","All","origAxes","permutedAxes","$x","assertAxesAreInnerMostDims","all","reshapedResult","anyConfig","Any","anyVal","argMaxConfig","ArgMax","outSize","maxIndex","argMinConfig","ArgMin","minIndex","asin","Asin","asinConfig","asinh","Asinh","asinhConfig","atan","Atan","atanConfig","atan2Impl","atan2","Atan2","atan2Config","atanh","Atanh","atanhConfig","pool","xValues","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","initialValue","NEGATIVE_INFINITY","POSITIVE_INFINITY","outputVals","outputBatchStrides","outputRowStrides","outputColStrides","outputBatchOffset","inputBatchOffset","inChannels","yR","outHeight","xRCorner","xRMin","xRMax","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","pixel","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","maxValue","maxPosition","wR","wC","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","avgPoolConfig","AvgPool","filterSize","pad","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterWidth","filterHeight","arraysEqual","inShape","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","avgPool3DGradConfig","AvgPool3DGrad","dy","filterDepth","dx","avgMultiplier","dyBuf","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","avgPoolGradConfig","AvgPoolGrad","dyData","dxR","dxC","dyRCorner","dyCCorner","dyR","dyC","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","xReshaped","xTransposed","xTransposedReshaped","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","clip","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipConfig","complexAbsConfig","ComplexAbs","complexVals","hypot","imagVal","imagConfig","Imag","computeOutShape","$inputs","filter","shapes","assertParamsConsistent","reals","imags","realConcated","imagConcated","r","inputs2D","innerSize","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","isChannelsLast","y","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","d1","xVal","d2","outChannels","conv2DConfig","Conv2D","conv2DBackpropFilterConfig","Conv2DBackpropFilter","filterShape","dW","topPad","dyVals","yRMin","yRMax","yCMin","yCMax","conv2DBackpropInputConfig","Conv2DBackpropInput","dyStrides","dxValues","dyValues","fltValues","fltS0","fltS1","fltS2","dyOffset","fltOffset","conv3DConfig","Conv3D","computeConv3DInfo","yF","xFCorner","wF","xF","wOffset2","yOffset4","xOffset4","wOffset4","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","dyS0","dyS1","dyS2","dyS3","xS0","xS1","xS2","xS3","frontPad","yFMin","yFMax","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","dxS0","dxS1","dxS2","dxS3","fltS3","xFMin","cos","Cos","cosConfig","cosh","Cosh","coshConfig","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","cumsumConfig","Cumsum","exclusive","reverse","permutedAxis","resultDtype","finalDim","indexAdjuster","prevIdx","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","h","inH","offsetH","w","inW","offsetD","inputIdx","depthwiseConv2dNative","$dilations","chMul","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dm","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","diagConfig","Diag","dilation2dConfig","Dilation2D","filterVals","filterRank","computeDilation2DInfo","outRank","hOut","hBeg","wOut","wBeg","curVal","MIN_SAFE_INTEGER","hIn","wIn","xIndex","filterIndex","val","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","toNestedArray","$filter","$dy","gradients","makeZerosNestedTypedArray","hMax","wMax","dilation2dBackpropInputConfig","Dilation2DBackpropInput","hInMax","wInMax","oldResult","sumConfig","Sum","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","out","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","splice","eluGradConfig","EluGrad","v","p","ERF_P","a1","ERF_A1","a2","ERF_A2","a3","ERF_A3","a4","ERF_A4","a5","ERF_A5","erf","Erf","erfConfig","$dim","expandDimsConfig","ExpandDims","realDivImpl","div","RealDiv","realDivConfig","fftBatch","inverse","innerDim","inputVals","real2D","imag2D","fftImpl","getComplexWithIndex","$realInfo","$imagInfo","inputSize","fftRadix2","realInfo","imagInfo","sizeInfo","sizeInfoCopy","divRealInfo","divImagInfo","divRealVals","divImagVals","rawOutput","ret","e","exponent","term","assignToTypedArray","fourierTransformByMatmul","splitRealAndImagArrays","half","evenComplex","complexWithEvenIndex","evenRealVals","evenImagVals","evenShape","evenRealInfo","evenImagInfo","evenTensorInfo","oddComplex","complexWithOddIndex","oddRealVals","oddImagVals","oddShape","oddRealInfo","oddImagInfo","oddTensorInfo","$evenComplex","$evenRealVals","$evenImagVals","$evenShape","$evenRealInfo","$evenImagInfo","$evenTensorInfo","$oddComplex","$oddRealVals","$oddImagVals","$oddShape","$oddRealInfo","$oddImagInfo","$oddTensorInfo","exponents","eShape","eRealInfo","eImagInfo","exponentInfo","addPart","subPart","addPartReal","subPartReal","addPartImag","subPartImag","$real","$imag","$realVals","$imagVals","fftConfig","FFT","innerDimensionSize","input2D","resultReshaped","inferDtype","fillValues","fillConfig","Fill","flipLeftRightConfig","FlipLeftRight","batchOffset","rowOffset","coordX","outIdx","outputValue","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedConv2DConfig","FusedConv2D","resultOld","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","gatherNdConfig","GatherNd","params","prepareAndValidate","gatherV2Config","GatherV2","batchDims","parsedAxis","indicesVals","axisDim","$batchDims","indicesSize","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","outerSize","dimSize","ifftConfig","IFFT","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","Infinity","isInfConfig","IsNan","isNaNConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","lRNConfig","LRN","depthRadius","beta","channels","maxD","sumAcrossChannels","currentChannel","beginSumOffset","endSumOffset","pow","lRNGradConfig","LRNGrad","dySize","yValues","depthBegin","depthEnd","norm","dyi","reductionIndices","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","maxPool3DConfig","MaxPool3D","maxPool3DGradConfig","MaxPool3DGrad","maxPosBuf","maxPool3dPositions","mask","maxPoolGradConfig","MaxPoolGrad","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","pooled","indexes","maxPools","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","minConfig","Min","mirrorPadConfig","MirrorPad","paddings","mode","coords","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","logitsRank","maxLogit","expandedShape","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom","alea","sampleId","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","oneHotConfig","OneHot","depth","onValue","offValue","indicesVal","zerosLike","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","assertShapesMatch","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","Pow","powConfig","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","effectiveInputSize","effectiveOutputSize","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","sourceNearestRow","sourceNearestCol","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","radians","fillValue","center","centerX","centerY","getImageCenter","sinFactor","sin","cosFactor","coordY","Round","base","roundConfig","scatterImpl","updates","numUpdates","sumDupeIndices","flattenShape","updatesData","scatterNdConfig","ScatterNd","calculateShapes","selectConfig","Select","conditionRank","tValues","eValues","scaleAlpha","SELU_SCALEALPHA","SELU_SCALE","selu","Selu","seluConfig","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","paddedXReshaped","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputData","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","squareConfig","Square","Step","stepAttrs","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","sliced","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","transformConfig","Transform","transforms","interpolation","fillMode","batchStride","rowStride","colStride","transformVals","transform","outY","outX","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","clamp","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","numSegments","numIters","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs","kernelConfig","registerKernel"],"mappings":"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EACFliC,GAAI,CAACphB,OAAQ,CAACD,EAAGsjD,GAAMnjD,QAAAA,EAAS+C,MAAO,CAACyM,KAAM,EAAGC,UAAU,KAC/DxB,EAAI9D,KAAKi5C,GACTvhC,EAAc1X,KAAK84C,GACnBphC,EAAc1X,KAAKqiC,GACnB3qB,EAAc1X,KAAK+4C,GACnBrhC,EAAc1X,KAAKg5C,GACnBthC,EAAc1X,KAAKi5C,GAGrB,MAAMtiD,EAASoxC,GAAK,CAACpyC,OAAQmO,EAAKjO,QAAAA,EAAS+C,MAAO,CAACyM,KAAM,KAIzD,OAFAqS,EAAcxnB,SAAQC,GAAK0F,EAAQhC,8BAA8B1D,KAE1DwG,IC2GHuiD,GAAgC,CACpC9hC,GACAhiB,EACAyiB,GACAG,GACAlc,EACAmc,GACAI,GACAQ,GACAG,GACAI,GACAK,GACAG,GACAG,GACAI,GACAG,GACAkF,GACAW,GACAI,GACAoB,GACAzK,GACAkL,GACAkB,GACAgB,GACAG,GACA/qB,EACAgE,EACA2nB,GACArtB,EACAstB,GACAsB,GACAkC,GACAU,GACAZ,GACAkC,GACAmB,GACA9B,GACAwC,GACAG,GACAC,GACA6C,GACAW,GACAE,GACAoB,GACAE,GACAG,GACAE,GACAE,GACA0B,GACAT,GACA8D,GACA9C,GACA1hB,GACAgjB,GACAt3B,EACAu4B,GACAn4B,EACAq4B,GACAj4B,EACAi9B,GACAO,GACAE,GACAt9B,EACAg+B,GACAC,GACAG,GACAE,GACAI,GACAh9B,EACAI,GACA5I,EACAsmC,GACAhZ,GACAoZ,GACAI,GACAE,GACArsB,GACA3R,GACAI,GACA69B,GACAr9B,GACAy9B,GACAI,GACAG,GACAI,GACAC,GACAW,GACAr+B,GACAi/B,GACAE,GACAE,GACAK,GACAE,GACAb,GACAqB,GACAI,GACAngC,GACAqgC,GACAU,GACAW,GACArhC,GACAM,GACA+hC,GACAU,GACAK,GACAxiC,GACAgjC,GACAU,GACAM,GACAE,GACAM,GACAr1B,GACAlO,GACAwjC,GACAlwC,EACAswC,GACAt1B,GACAG,GACAU,GACA00B,GACA6B,GACA4B,GACAM,GACAe,GACAI,GACAc,GACA3oC,GACAkpC,GACAG,GACAU,GACA3pC,GACA6pC,GACAE,GACAG,GACAhpC,GACA88B,GACAyM,GACAC,GACAQ,GACAO,GACAI,GACAM,GACAE,GACAI,GACA1nC,GACAgoC,GACA3nC,GACAgoC,GACAC,GACAgB,GACAG,GACAI,GACAtlC,GACAskB,GACAohB,GACAG,GACAC,GACAE,GACArxC,GACAuxC,GACAiC,GACAE,GACAI,GACA9Q,IAGF,IAAK,MAAMyR,KAAgBD,GACzBE,iBAAeD,gDC9VD"}