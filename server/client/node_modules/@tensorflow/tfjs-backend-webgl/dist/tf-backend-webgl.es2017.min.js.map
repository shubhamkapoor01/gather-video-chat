{"version":3,"file":"tf-backend-webgl.es2017.min.js","sources":["../../../../tfjs-backend-webgl/src/canvas_util.ts","../../../../tfjs-backend-webgl/src/tex_util.ts","../../../../tfjs-backend-webgl/src/webgl_util.ts","../../../../tfjs-backend-webgl/src/flags_webgl.ts","../../../../tfjs-backend-webgl/src/glsl_version.ts","../../../../tfjs-backend-webgl/src/shader_compiler_util.ts","../../../../tfjs-backend-webgl/src/shader_compiler.ts","../../../../tfjs-backend-webgl/src/gpgpu_math.ts","../../../../tfjs-backend-webgl/src/decode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/decode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_gpu.ts","../../../../tfjs-backend-webgl/src/encode_float_packed_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_gpu.ts","../../../../tfjs-backend-webgl/src/encode_matrix_packed_gpu.ts","../../../../tfjs-backend-webgl/src/gpgpu_util.ts","../../../../tfjs-backend-webgl/src/gpgpu_context.ts","../../../../../tfjs-backend-cpu/src/utils/binary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Add.ts","../../../../../tfjs-backend-cpu/src/utils/unary_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Ceil.ts","../../../../../tfjs-backend-cpu/src/kernels/Equal.ts","../../../../../tfjs-backend-cpu/src/kernels/Exp.ts","../../../../../tfjs-backend-cpu/src/kernels/Expm1.ts","../../../../../tfjs-backend-cpu/src/kernels/Floor.ts","../../../../../tfjs-backend-cpu/src/kernels/Greater.ts","../../../../../tfjs-backend-cpu/src/kernels/GreaterEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Less.ts","../../../../../tfjs-backend-cpu/src/kernels/LessEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Log.ts","../../../../../tfjs-backend-cpu/src/kernels/Maximum.ts","../../../../../tfjs-backend-cpu/src/kernels/Minimum.ts","../../../../../tfjs-backend-cpu/src/kernels/Multiply.ts","../../../../../tfjs-backend-cpu/src/kernels/NotEqual.ts","../../../../../tfjs-backend-cpu/src/kernels/Rsqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/Sigmoid.ts","../../../../../tfjs-backend-cpu/src/kernels/Sqrt.ts","../../../../../tfjs-backend-cpu/src/kernels/SquaredDifference.ts","../../../../../tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringSplit_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Sub.ts","../../../../../tfjs-backend-cpu/src/kernels/TopK_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Abs.ts","../../../../../tfjs-backend-cpu/src/kernels/Bincount_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Concat_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts","../../../../../tfjs-backend-cpu/src/kernels/GatherV2_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/LinSpace_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Max_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Neg.ts","../../../../../tfjs-backend-cpu/src/kernels/Prod.ts","../../../../../tfjs-backend-cpu/src/kernels/Range_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Slice.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/SparseSegmentReduction_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StridedSlice_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/StringToHashBucketFast_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Tile_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Transpose_impl.ts","../../../../../tfjs-backend-cpu/src/kernels/Unique_impl.ts","../../../../tfjs-backend-webgl/src/kernel_utils/shared.ts","../../../../tfjs-backend-webgl/src/packing_util.ts","../../../../tfjs-backend-webgl/src/pack_gpu.ts","../../../../tfjs-backend-webgl/src/reshape_packed_gpu.ts","../../../../tfjs-backend-webgl/src/texture_manager.ts","../../../../tfjs-backend-webgl/src/unaryop_gpu.ts","../../../../tfjs-backend-webgl/src/unaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/unpack_gpu.ts","../../../../tfjs-backend-webgl/src/backend_webgl.ts","../../../../tfjs-backend-webgl/src/webgl.ts","../../../../tfjs-backend-webgl/src/base.ts","../../../../tfjs-backend-webgl/src/binaryop_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Identity.ts","../../../../tfjs-backend-webgl/src/kernels/Complex.ts","../../../../tfjs-backend-webgl/src/kernels/LeakyRelu.ts","../../../../tfjs-backend-webgl/src/kernels/Prelu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/kernel_funcs_utils.ts","../../../../tfjs-backend-webgl/src/mulmat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/binaryop_complex_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Multiply.ts","../../../../tfjs-backend-webgl/src/kernels/Reshape.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reshape.ts","../../../../tfjs-backend-webgl/src/mean_gpu.ts","../../../../tfjs-backend-webgl/src/reduce_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/reduce.ts","../../../../tfjs-backend-webgl/src/transpose_gpu.ts","../../../../tfjs-backend-webgl/src/transpose_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Sum.ts","../../../../tfjs-backend-webgl/src/kernels/Sum_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Transpose.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul_impl.ts","../../../../tfjs-backend-webgl/src/kernels/_FusedMatMul.ts","../../../../tfjs-backend-webgl/src/kernels/Abs.ts","../../../../tfjs-backend-webgl/src/kernels/Acos.ts","../../../../tfjs-backend-webgl/src/kernels/Acosh.ts","../../../../tfjs-backend-webgl/src/kernels/Add.ts","../../../../tfjs-backend-webgl/src/addn_gpu.ts","../../../../tfjs-backend-webgl/src/addn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AddN.ts","../../../../tfjs-backend-webgl/src/kernels/All.ts","../../../../tfjs-backend-webgl/src/kernels/Any.ts","../../../../tfjs-backend-webgl/src/argminmax_gpu.ts","../../../../tfjs-backend-webgl/src/argminmax_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMax.ts","../../../../tfjs-backend-webgl/src/kernels/ArgMin.ts","../../../../tfjs-backend-webgl/src/kernels/Asin.ts","../../../../tfjs-backend-webgl/src/kernels/Asinh.ts","../../../../tfjs-backend-webgl/src/kernels/Atan.ts","../../../../tfjs-backend-webgl/src/kernels/Atan2.ts","../../../../tfjs-backend-webgl/src/kernels/Atanh.ts","../../../../tfjs-backend-webgl/src/pool_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3D.ts","../../../../tfjs-backend-webgl/src/avg_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/AvgPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/BatchMatMul.ts","../../../../tfjs-backend-webgl/src/batchnorm_gpu.ts","../../../../tfjs-backend-webgl/src/batchnorm_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/BatchNorm.ts","../../../../tfjs-backend-webgl/src/slice_gpu.ts","../../../../tfjs-backend-webgl/src/slice_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Slice.ts","../../../../tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts","../../../../tfjs-backend-webgl/src/kernels/Bincount.ts","../../../../tfjs-backend-webgl/src/kernels/BroadcastArgs.ts","../../../../tfjs-backend-webgl/src/kernels/NotEqual.ts","../../../../tfjs-backend-webgl/src/kernels/Real.ts","../../../../tfjs-backend-webgl/src/kernels/Cast.ts","../../../../tfjs-backend-webgl/src/kernel_utils/int.ts","../../../../tfjs-backend-webgl/src/kernels/Ceil.ts","../../../../tfjs-backend-webgl/src/clip_gpu.ts","../../../../tfjs-backend-webgl/src/clip_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ClipByValue.ts","../../../../tfjs-backend-webgl/src/complex_abs_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ComplexAbs.ts","../../../../tfjs-backend-webgl/src/concat_gpu.ts","../../../../tfjs-backend-webgl/src/concat_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Imag.ts","../../../../tfjs-backend-webgl/src/kernels/Concat_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Concat.ts","../../../../tfjs-backend-webgl/src/conv_gpu.ts","../../../../tfjs-backend-webgl/src/im2col_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2D.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropFilter.ts","../../../../tfjs-backend-webgl/src/kernels/Conv2DBackpropInput.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3D.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropFilterV2.ts","../../../../tfjs-backend-webgl/src/kernels/Conv3DBackpropInputV2.ts","../../../../tfjs-backend-webgl/src/kernels/Cos.ts","../../../../tfjs-backend-webgl/src/kernels/Cosh.ts","../../../../tfjs-backend-webgl/src/crop_and_resize_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/CropAndResize.ts","../../../../tfjs-backend-webgl/src/cumsum_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Cumsum.ts","../../../../tfjs-backend-webgl/src/kernels/DenseBincount.ts","../../../../tfjs-backend-webgl/src/depth_to_space_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/DepthToSpace.ts","../../../../tfjs-backend-webgl/src/conv_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/conv_packed_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNative.ts","../../../../tfjs-backend-webgl/src/conv_backprop_gpu_depthwise.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts","../../../../tfjs-backend-webgl/src/kernels/DepthwiseConv2dNativeBackpropInput.ts","../../../../tfjs-backend-webgl/src/diag_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Diag.ts","../../../../tfjs-backend-webgl/src/dilation_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Dilation2D.ts","../../../../tfjs-backend-webgl/src/kernels/Einsum.ts","../../../../tfjs-backend-webgl/src/kernels/Elu.ts","../../../../tfjs-backend-webgl/src/kernels/EluGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Equal.ts","../../../../tfjs-backend-webgl/src/kernels/Erf.ts","../../../../tfjs-backend-webgl/src/kernels/Exp.ts","../../../../tfjs-backend-webgl/src/kernels/ExpandDims.ts","../../../../tfjs-backend-webgl/src/kernels/Expm1.ts","../../../../tfjs-backend-webgl/src/fft_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FFT_impl.ts","../../../../tfjs-backend-webgl/src/kernels/FFT.ts","../../../../tfjs-backend-webgl/src/fill_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Fill.ts","../../../../tfjs-backend-webgl/src/flip_left_right_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FlipLeftRight.ts","../../../../tfjs-backend-webgl/src/kernels/Floor.ts","../../../../tfjs-backend-webgl/src/kernels/FloorDiv.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels_utils/from_pixels_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/FromPixels.ts","../../../../tfjs-backend-webgl/src/kernels/FusedConv2D.ts","../../../../tfjs-backend-webgl/src/kernels/FusedDepthwiseConv2D.ts","../../../../tfjs-backend-webgl/src/gather_nd_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherNd.ts","../../../../tfjs-backend-webgl/src/gather_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/GatherV2.ts","../../../../tfjs-backend-webgl/src/kernels/Greater.ts","../../../../tfjs-backend-webgl/src/kernels/GreaterEqual.ts","../../../../tfjs-backend-webgl/src/kernels/IFFT.ts","../../../../tfjs-backend-webgl/src/kernels/IsFinite.ts","../../../../tfjs-backend-webgl/src/kernels/IsInf.ts","../../../../tfjs-backend-webgl/src/kernels/IsNaN.ts","../../../../tfjs-backend-webgl/src/kernels/Less.ts","../../../../tfjs-backend-webgl/src/kernels/LessEqual.ts","../../../../tfjs-backend-webgl/src/kernels/LinSpace.ts","../../../../tfjs-backend-webgl/src/kernels/Log.ts","../../../../tfjs-backend-webgl/src/kernels/Log1p.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalAnd.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalNot.ts","../../../../tfjs-backend-webgl/src/kernels/LogicalOr.ts","../../../../tfjs-backend-webgl/src/lrn_gpu.ts","../../../../tfjs-backend-webgl/src/lrn_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRN.ts","../../../../tfjs-backend-webgl/src/lrn_grad_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/LRNGrad.ts","../../../../tfjs-backend-webgl/src/kernels/Max.ts","../../../../tfjs-backend-webgl/src/kernels/Max_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Maximum.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3D.ts","../../../../tfjs-backend-webgl/src/max_pool_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPool3DGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolGrad.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax.ts","../../../../tfjs-backend-webgl/src/kernels/MaxPoolWithArgmax_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Mean.ts","../../../../tfjs-backend-webgl/src/kernels/Mean_impl.ts","../../../../tfjs-backend-webgl/src/kernels/Min.ts","../../../../tfjs-backend-webgl/src/kernels/Minimum.ts","../../../../tfjs-backend-webgl/src/mirror_pad_gpu.ts","../../../../tfjs-backend-webgl/src/mirror_pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/MirrorPad.ts","../../../../tfjs-backend-webgl/src/kernels/Mod.ts","../../../../tfjs-backend-webgl/src/multinomial_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RealDiv.ts","../../../../tfjs-backend-webgl/src/kernels/Sub.ts","../../../../tfjs-backend-webgl/src/kernels/Softmax.ts","../../../../tfjs-backend-webgl/src/kernels/Multinomial.ts","../../../../tfjs-backend-webgl/src/kernels/Neg.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV3.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV4.ts","../../../../tfjs-backend-webgl/src/kernels/NonMaxSuppressionV5.ts","../../../../tfjs-backend-webgl/src/onehot_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/OneHot.ts","../../../../tfjs-backend-webgl/src/kernels/ZerosLike.ts","../../../../tfjs-backend-webgl/src/kernels/OnesLike.ts","../../../../tfjs-backend-webgl/src/kernels/Pack.ts","../../../../tfjs-backend-webgl/src/pad_gpu.ts","../../../../tfjs-backend-webgl/src/pad_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/PadV2.ts","../../../../tfjs-backend-webgl/src/kernels/Pow.ts","../../../../tfjs-backend-webgl/src/kernels/Prod.ts","../../../../tfjs-backend-webgl/src/kernels/Range.ts","../../../../tfjs-backend-webgl/src/kernels/Reciprocal.ts","../../../../tfjs-backend-webgl/src/kernels/Relu.ts","../../../../tfjs-backend-webgl/src/kernels/Relu6.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_gpu.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinear.ts","../../../../tfjs-backend-webgl/src/resize_bilinear_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeBilinearGrad.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_gpu.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighbor.ts","../../../../tfjs-backend-webgl/src/resize_nearest_neighbor_backprop_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ResizeNearestNeighborGrad.ts","../../../../tfjs-backend-webgl/src/reverse_gpu.ts","../../../../tfjs-backend-webgl/src/reverse_packed_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Reverse.ts","../../../../tfjs-backend-webgl/src/rotate_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/RotateWithOffset.ts","../../../../tfjs-backend-webgl/src/kernels/Round.ts","../../../../tfjs-backend-webgl/src/kernels/Rsqrt.ts","../../../../tfjs-backend-webgl/src/scatter_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/ScatterNd.ts","../../../../tfjs-backend-webgl/src/select_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Select.ts","../../../../tfjs-backend-webgl/src/kernels/Selu.ts","../../../../tfjs-backend-webgl/src/kernels/Sigmoid.ts","../../../../tfjs-backend-webgl/src/kernels/Sign.ts","../../../../tfjs-backend-webgl/src/kernels/Sin.ts","../../../../tfjs-backend-webgl/src/kernels/Sinh.ts","../../../../tfjs-backend-webgl/src/kernels/Softplus.ts","../../../../tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts","../../../../tfjs-backend-webgl/src/kernels/SparseFillEmptyRows.ts","../../../../tfjs-backend-webgl/src/kernels/SparseReshape.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentMean.ts","../../../../tfjs-backend-webgl/src/kernels/SparseSegmentSum.ts","../../../../tfjs-backend-webgl/src/kernels/SparseToDense.ts","../../../../tfjs-backend-webgl/src/kernels/SplitV.ts","../../../../tfjs-backend-webgl/src/kernels/Sqrt.ts","../../../../tfjs-backend-webgl/src/kernels/Square.ts","../../../../tfjs-backend-webgl/src/kernels/SquaredDifference.ts","../../../../tfjs-backend-webgl/src/kernels/Step.ts","../../../../tfjs-backend-webgl/src/strided_slice_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/StridedSlice.ts","../../../../tfjs-backend-webgl/src/kernels/StringNGrams.ts","../../../../tfjs-backend-webgl/src/kernels/StringSplit.ts","../../../../tfjs-backend-webgl/src/kernels/StringToHashBucketFast.ts","../../../../tfjs-backend-webgl/src/kernels/Tan.ts","../../../../tfjs-backend-webgl/src/kernels/Tanh.ts","../../../../tfjs-backend-webgl/src/tile_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Tile.ts","../../../../tfjs-backend-webgl/src/top_k_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/TopK.ts","../../../../tfjs-backend-webgl/src/transform_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/Transform.ts","../../../../tfjs-backend-webgl/src/kernels/Unique.ts","../../../../tfjs-backend-webgl/src/kernels/Unpack.ts","../../../../tfjs-backend-webgl/src/segment_gpu.ts","../../../../tfjs-backend-webgl/src/kernels/UnsortedSegmentSum.ts","../../../../tfjs-backend-webgl/src/register_all_kernels.ts","../../../../tfjs-backend-webgl/src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(webGLVersion: number): WebGLRenderingContext {\n  if (!(webGLVersion in contexts)) {\n    const newCtx = getWebGLRenderingContext(webGLVersion);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion: number): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = createCanvas(webGLVersion);\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: WebGLTexture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n  }\n  downloadTextureFormat = gl.RGBA;\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {getTextureConfig} from './tex_util';\n\nexport function callAndCheck<T>(gl: WebGLRenderingContext, func: () => T): T {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\n\nfunction checkWebGLError(gl: WebGLRenderingContext) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\n\nexport function canBeRepresented(num: number): boolean {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 ||\n      (MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16)) {\n    return true;\n  }\n  return false;\n}\n\nexport function getWebGLErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\n\nexport function getExtensionOrThrow(\n    gl: WebGLRenderingContext, extensionName: string): {} {\n  return throwIfNull<{}>(\n      gl, () => gl.getExtension(extensionName),\n      'Extension \"' + extensionName + '\" not supported on this browser.');\n}\n\nexport function createVertexShader(\n    gl: WebGLRenderingContext, vertexShaderSource: string): WebGLShader {\n  const vertexShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.VERTEX_SHADER),\n      'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\n\nexport function createFragmentShader(\n    gl: WebGLRenderingContext, fragmentShaderSource: string): WebGLShader {\n  const fragmentShader: WebGLShader = throwIfNull<WebGLShader>(\n      gl, () => gl.createShader(gl.FRAGMENT_SHADER),\n      'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(\n        fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\n\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nfunction logShaderSourceAndInfoLog(\n    shaderSource: string, shaderInfoLog: string) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n\n  const lineNumber = +lineNumberRegexResult[1];\n\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map(\n      (line, lineNumber) =>\n          util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(\n      `%c ${util.rightPad(errorLine[0], maxLineLength)}`,\n      'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\n\nexport function createProgram(gl: WebGLRenderingContext): WebGLProgram {\n  return throwIfNull<WebGLProgram>(\n      gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\n\nexport function linkProgram(gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n\nexport function validateProgram(\n    gl: WebGLRenderingContext, program: WebGLProgram) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\n\nexport function createStaticVertexBuffer(\n    gl: WebGLRenderingContext, data: Float32Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function createStaticIndexBuffer(\n    gl: WebGLRenderingContext, data: Uint16Array): WebGLBuffer {\n  const buffer: WebGLBuffer = throwIfNull<WebGLBuffer>(\n      gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\n\nexport function getNumChannels(): number {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\n\nexport function createTexture(gl: WebGLRenderingContext): WebGLTexture {\n  return throwIfNull<WebGLTexture>(\n      gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\n\nexport function validateTextureSize(width: number, height: number) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if ((width <= 0) || (height <= 0)) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if ((width > maxTextureSize) || (height > maxTextureSize)) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error(\n        'Requested texture size ' + requested +\n        ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\n\nexport function createFramebuffer(gl: WebGLRenderingContext): WebGLFramebuffer {\n  return throwIfNull<WebGLFramebuffer>(\n      gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\n\nexport function bindVertexBufferToProgramAttribute(\n    gl: WebGLRenderingContext, program: WebGLProgram, attribute: string,\n    buffer: WebGLBuffer, arrayEntriesPerItem: number, itemStrideInBytes: number,\n    itemOffsetInBytes: number): boolean {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(\n      gl,\n      () => gl.vertexAttribPointer(\n          loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes,\n          itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\n\nexport function bindTextureUnit(\n    gl: WebGLRenderingContext, texture: WebGLTexture, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\n\nexport function unbindTextureUnit(\n    gl: WebGLRenderingContext, textureUnit: number) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function getProgramUniformLocationOrThrow(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return throwIfNull<WebGLUniformLocation>(\n      gl, () => gl.getUniformLocation(program, uniformName),\n      'uniform \"' + uniformName + '\" not present in program.');\n}\n\nexport function getProgramUniformLocation(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    uniformName: string): WebGLUniformLocation {\n  return gl.getUniformLocation(program, uniformName);\n}\n\nexport function bindTextureToProgramUniformSampler(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    uniformSamplerLocation: WebGLUniformLocation, textureUnit: number) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\n\nexport function bindCanvasToFramebuffer(gl: WebGLRenderingContext) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\n\nexport function bindColorTextureToFramebuffer(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\n\nexport function unbindColorTextureFromFramebuffer(\n    gl: WebGLRenderingContext, framebuffer: WebGLFramebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(\n      gl,\n      () => gl.framebufferTexture2D(\n          gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\n\nexport function validateFramebuffer(gl: WebGLRenderingContext) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error(\n        'Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\n\nexport function getFramebufferErrorMessage(\n    gl: WebGLRenderingContext, status: number): string {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\n\nfunction throwIfNull<T>(\n    gl: WebGLRenderingContext, returnTOrNull: () => T | null,\n    failureMessage: string): T {\n  const tOrNull: T|null = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\n\nfunction validateTextureUnit(gl: WebGLRenderingContext, textureUnit: number) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\n\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [\n    shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]\n  ];\n}\n\nexport function getShapeAs3D(shape: number[]): [number, number, number] {\n  let shapeAs3D: [number, number, number] = [1, 1, 1];\n  const isScalar = shape.length === 0 || (shape.length === 1 && shape[0] === 1);\n  if (!isScalar) {\n    shapeAs3D =\n        [getBatchDim(shape), ...getRowsCols(shape)] as [number, number, number];\n  }\n  return shapeAs3D;\n}\n\nexport function getTextureShapeFromLogicalShape(\n    logShape: number[], isPacked = false): [number, number] {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map(\n        (d, i) => i >= logShape.length - 2 ?\n            util.nearestLargerEven(logShape[i]) :\n            logShape[i]);\n\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n\n  let size = util.sizeFromShape(logShape);\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    return [1, size];\n  } else if (\n      logShape.length === 2 && logShape[0] <= maxTexSize &&\n      logShape[1] <= maxTexSize) {\n    return logShape as [number, number];\n  } else if (\n      logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize &&\n      logShape[2] <= maxTexSize) {\n    return [logShape[0] * logShape[1], logShape[2]];\n  } else if (\n      logShape.length === 3 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2]];\n  } else if (\n      logShape.length === 4 &&\n      logShape[0] * logShape[1] * logShape[2] <= maxTexSize &&\n      logShape[3] <= maxTexSize) {\n    return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (\n      logShape.length === 4 && logShape[0] <= maxTexSize &&\n      logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  } else {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n\n      const batchDim = getBatchDim(logShape);\n      let rows = 2, cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      return util.sizeToSquarishShape(size).map(d => d * 2) as [number, number];\n    }\n    return util.sizeToSquarishShape(size);\n  }\n}\n\nfunction isEven(n: number): boolean {\n  return n % 2 === 0;\n}\n\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1: number[], shape2: number[]): boolean {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n\n  if (!shape1.length || !shape2.length) {  // One of the shapes is a scalar.\n    return true;\n  }\n\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 ||\n      shape2[1] === 0) {\n    return true;\n  }\n\n  if (shape1.length !== shape2.length) {  // One of the shapes is a vector.\n    const shape1Cols = shape1.slice(-1)[0];\n    const shape2Cols = shape2.slice(-1)[0];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n\n    if (isEven(shape1Cols) && isEven(shape2Cols) &&\n        (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE: number;\nlet MAX_TEXTURES_IN_SHADER: number;\n\nexport function getWebGLMaxTextureSize(webGLVersion: number): number {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\n\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\n\nexport function getMaxTexturesInShader(webGLVersion: number): number {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\n\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion: number):\n    number {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n\n  let queryTimerVersion: number;\n  const gl = getWebGLContext(webGLVersion);\n\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') &&\n      webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\n\nexport function hasExtension(gl: WebGLRenderingContext, extensionName: string) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\n\nexport function isWebGLVersionEnabled(webGLVersion: 1|2) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\n\nexport function isCapableOfRenderingToFloatTexture(webGLVersion: number):\n    boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion: number): boolean {\n  if (webGLVersion === 0) {\n    return false;\n  }\n\n  const gl = getWebGLContext(webGLVersion);\n\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension =\n          gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(\n          gl, textureHalfFloatExtension);\n    }\n\n    return false;\n  }\n\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n\nfunction createFloatTextureAndBindToFramebuffer(gl: WebGLRenderingContext):\n    boolean {\n  const texConfig = getTextureConfig(gl);\n\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nfunction createHalfFloatTextureAndBindToFramebuffer(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension: any): boolean {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(\n      gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0,\n      texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(\n      gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n  const isFrameBufferComplete =\n      gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n\n  return isFrameBufferComplete;\n}\n\nexport function isWebGLFenceEnabled(webGLVersion: number) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n\n  // tslint:disable-next-line:no-any\n  const isEnabled = (gl as any).fenceSync != null;\n  return isEnabled;\n}\n\nexport function assertNotComplex(\n    tensor: TensorInfo|TensorInfo[], opName: string): void {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(\n          t.dtype !== 'complex64',\n          () => `${opName} does not support complex64 tensors ` +\n              'in the WebGL backend.');\n    }\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {device_util, env} from '@tensorflow/tfjs-core';\n\nimport {getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled} from './webgl_util';\n\nconst ENV = env();\n\n/**\n * This file contains WebGL-specific flag registrations.\n */\n\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\n\nENV.registerFlag(\n    'WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack binary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack unary ops. */\nENV.registerFlag(\n    'WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack array ops. */\nENV.registerFlag(\n    'WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack image ops. */\nENV.registerFlag(\n    'WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURE_SIZE',\n    () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n\n/** The maximum texture dimension. */\nENV.registerFlag(\n    'WEBGL_MAX_TEXTURES_IN_SHADER',\n    () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag(\n    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE',\n    () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 &&\n        !device_util.isMobile());\n\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag(\n    'WEBGL_RENDER_FLOAT32_CAPABLE',\n    () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ?\n      false :\n      ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag(\n    'WEBGL_DOWNLOAD_FLOAT_ENABLED',\n    () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/** Whether the fence API is available. */\nENV.registerFlag(\n    'WEBGL_FENCE_API_ENABLED',\n    () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag(\n    'WEBGL_DELETE_TEXTURE_THRESHOLD',\n    () => {\n      return -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` +\n            `delete) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag(\n    'WEBGL_FLUSH_THRESHOLD',\n    () => {\n      return device_util.isMobile() ? 1 : -1;\n    },\n    threshold => {\n      if (threshold < 0 && threshold !== -1) {\n        throw new Error(\n            `WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` +\n            `manual flush) or at least 0, but got ${threshold}.`);\n      }\n    });\n\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '@tensorflow/tfjs-core';\n\nexport type GLSL = {\n  version: string,\n  attribute: string,\n  varyingVs: string,\n  varyingFs: string,\n  texture2D: string,\n  output: string,\n  defineOutput: string,\n  defineSpecialNaN: string,\n  defineSpecialInf: string,\n  defineRound: string\n};\n\nexport function getGlslDifferences(): GLSL {\n  let version: string;\n  let attribute: string;\n  let varyingVs: string;\n  let varyingFs: string;\n  let texture2D: string;\n  let output: string;\n  let defineOutput: string;\n  let defineSpecialNaN: string;\n  let defineSpecialInf: string;\n  let defineRound: string;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly.\n    defineSpecialNaN = `\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    `;\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  source: string;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n\n  const webGLProgram = gpgpu.createProgram(source);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inTexShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] =\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    program,\n    source,\n    webGLProgram,\n    uniformLocations,\n    customUniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture, varLoc, i);\n  });\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: [number, number, number];\n  packedInputs = false;\n  packedOutput = true;\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport {PackingScheme} from './tex_util';\n\nexport class DecodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: [number, number, number];\n  outPackingScheme = PackingScheme.DENSE;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${\n        this.enableShapeUniforms ?\n            shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n                ['r', 'c', 'd'], outputShape) :\n            shader_util.getLogicalCoordinatesFromFlatIndex(\n                ['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram} from './gpgpu_math';\nimport {ENCODE_FLOAT_SNIPPET} from './shader_compiler_util';\nimport {TextureUsage} from './tex_util';\n\nexport class EncodeFloatPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = false;\n  outTexUsage = TextureUsage.DOWNLOAD;\n\n  constructor(outputShape: [number, number, number]) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\n\nexport class EncodeMatrixPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${\n            this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${\n            this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n\n    this.userCode = `\n        ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): WebGLTexture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          tex2d, 0, internalFormat, width, height, 0, textureFormat,\n          textureType, null));\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return texture;\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLTexture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.texImage2D(\n          gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n          texelDataType, dataForUpload));\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA,\n            gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n            pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                HTMLVideoElement|ImageBitmap));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext, setWebGLContext} from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport {TextureConfig} from './tex_util';\nimport {WebGL1DisjointQueryTimerExtension, WebGL2DisjointQueryTimerExtension} from './webgl_types';\nimport * as webgl_util from './webgl_util';\n\nexport interface FenceContext {\n  query: WebGLQuery|WebGLSync;\n  isFencePassed(): boolean;\n}\n\nexport class GPGPUContext {\n  gl: WebGLRenderingContext;\n  textureFloatExtension: {};\n  textureHalfFloatExtension: {};\n  colorBufferFloatExtension: {};\n  colorBufferHalfFloatExtension: {};\n  disjointQueryTimerExtension: WebGL2DisjointQueryTimerExtension|\n      WebGL1DisjointQueryTimerExtension;\n  vertexBuffer: WebGLBuffer;\n  indexBuffer: WebGLBuffer;\n  framebuffer: WebGLFramebuffer;\n  outputTexture: WebGLTexture|null = null;\n  program: WebGLProgram|null = null;\n  private disposed = false;\n  private disjoint: boolean;\n  private vertexShader: WebGLShader;\n  textureConfig: TextureConfig;\n\n  constructor(gl?: WebGLRenderingContext) {\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n\n      this.textureFloatExtension =\n          webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support half float textures, yet the ' +\n            'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error(\n            'GL context does not support color renderable half floats, yet ' +\n            'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension =\n            this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n\n    this.textureConfig =\n        tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n\n  private get debug(): boolean {\n    return env().getBool('DEBUG');\n  }\n\n  public dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound WebGLProgram.' +\n          ' This is probably a resource leak, delete the program with ' +\n          'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn(\n          'Disposing a GPGPUContext that still has a bound output matrix ' +\n          'texture.  This is probably a resource leak, delete the output ' +\n          'matrix texture with GPGPUContext.deleteMatrixTexture before ' +\n          'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(\n        gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n\n  public createFloat32MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createFloat16MatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createUnsignedBytesMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public uploadPixelDataToTexture(\n      texture: WebGLTexture,\n      pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      ImageBitmap) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n\n  public uploadDenseMatrixToTexture(\n      texture: WebGLTexture, width: number, height: number, data: TypedArray) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(\n        this.gl, texture, width, height, data, this.textureConfig);\n  }\n\n  public createFloat16PackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public createPackedMatrixTexture(rows: number, columns: number):\n      WebGLTexture {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(\n        this.gl, rows, columns, this.textureConfig);\n  }\n\n  public deleteMatrixTexture(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n\n  public downloadByteEncodedFloatMatrixFromOutputTexture(\n      texture: WebGLTexture, rows: number, columns: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(\n            this.gl, rows, columns, this.textureConfig));\n  }\n\n  public downloadPackedMatrixFromBuffer(\n      buffer: WebGLBuffer, batch: number, rows: number, columns: number,\n      physicalRows: number, physicalCols: number): Float32Array {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(\n        this.gl, buffer, batch, rows, columns, physicalRows, physicalCols,\n        this.textureConfig);\n  }\n\n  public downloadFloat32MatrixFromBuffer(buffer: WebGLBuffer, size: number):\n      Float32Array {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n\n  public createBufferFromTexture(\n      texture: WebGLTexture, rows: number, columns: number): WebGLBuffer {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(\n        this.gl as WebGL2RenderingContext, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n\n  public createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let query: WebGLQuery|WebGLSync;\n    let isFencePassed: () => boolean;\n\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl as WebGL2RenderingContext;\n\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED ||\n            status === gl2.CONDITION_SATISFIED;\n      };\n\n      query = sync;\n    } else if (\n        env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(\n          query,\n          env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n\n    return {query, isFencePassed};\n  }\n\n  public downloadMatrixFromPackedTexture(\n      texture: WebGLTexture, physicalRows: number,\n      physicalCols: number): Float32Array {\n    return this.downloadMatrixDriver(\n        texture,\n        () => gpgpu_util.downloadMatrixFromPackedOutputTexture(\n            this.gl, physicalRows, physicalCols));\n  }\n\n  private vertexAttrsAreBound = false;\n\n  public createProgram(fragmentShaderSource: string): WebGLProgram {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    const fragmentShader: WebGLShader =\n        webgl_util.createFragmentShader(gl, fragmentShaderSource);\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program: WebGLProgram = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(\n        gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program);\n    }\n    if (!this.vertexAttrsAreBound) {\n      this.setProgram(program);\n      this.vertexAttrsAreBound = gpgpu_util.bindVertexProgramAttributeStreams(\n          gl, this.program, this.vertexBuffer);\n    }\n    return program;\n  }\n\n  public deleteProgram(program: WebGLProgram) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n    }\n  }\n\n  public setProgram(program: WebGLProgram|null) {\n    this.throwIfDisposed();\n    this.program = program;\n    if ((this.program != null) && this.debug) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n\n  public getUniformLocation(\n      program: WebGLProgram, uniformName: string,\n      shouldThrow = true): WebGLUniformLocation {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(\n          this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(\n          this.gl, program, uniformName);\n    }\n  }\n\n  public getAttributeLocation(program: WebGLProgram, attribute: string):\n      number {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(\n        this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n\n  public getUniformLocationNoThrow(program: WebGLProgram, uniformName: string):\n      WebGLUniformLocation {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n\n  public setInputMatrixTexture(\n      inputMatrixTexture: WebGLTexture, uniformLocation: WebGLUniformLocation,\n      textureUnit: number) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(\n        this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n\n  public setOutputMatrixTexture(\n      outputMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n\n  public setOutputPackedMatrixTexture(\n      outputPackedMatrixTexture: WebGLTexture, rows: number, columns: number) {\n    this.throwIfDisposed();\n    const [width, height] =\n        tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n\n  public setOutputMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    this.setOutputMatrixWriteRegionDriver(\n        startColumn, startRow, numColumns, numRows);\n  }\n\n  public setOutputPackedMatrixWriteRegion(\n      startRow: number, numRows: number, startColumn: number,\n      numColumns: number) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n\n  public debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n\n  public executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(\n        gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n\n  public blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n\n  private getQueryTimerExtension(): WebGL1DisjointQueryTimerExtension\n      |WebGL2DisjointQueryTimerExtension {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension =\n          webgl_util.getExtensionOrThrow(\n              this.gl,\n              env().getNumber(\n                  'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ?\n                  'EXT_disjoint_timer_query_webgl2' :\n                  'EXT_disjoint_timer_query') as\n              WebGL1DisjointQueryTimerExtension |\n          WebGL2DisjointQueryTimerExtension;\n    }\n    return this.disjointQueryTimerExtension;\n  }\n\n  private getQueryTimerExtensionWebGL2(): WebGL2DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension();\n  }\n\n  private getQueryTimerExtensionWebGL1(): WebGL1DisjointQueryTimerExtension {\n    return this.getQueryTimerExtension() as WebGL1DisjointQueryTimerExtension;\n  }\n\n  beginQuery(): WebGLQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT() as WebGLQuery;\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n\n  public async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await util.repeatedTry(\n        () => this.disposed ||  // while testing contexts are created / disposed\n                                // in rapid succession, so without this check we\n                                // may poll for the query timer indefinitely\n            this.isQueryAvailable(\n                query,\n                env().getNumber(\n                    'WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(\n        query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n\n  private getQueryTime(query: WebGLQuery, queryTimerVersion: number): number {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const timeElapsedNanos =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n\n  private isQueryAvailable(query: WebGLQuery, queryTimerVersion: number):\n      boolean {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.getQueryTimerExtensionWebGL2();\n\n      const available =\n          gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n\n      const available =\n          ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n\n      return available && !this.disjoint;\n    }\n  }\n\n  pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n\n  private bindTextureToFrameBuffer(texture: WebGLTexture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(\n        this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n\n  private unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(\n          this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n\n  private downloadMatrixDriver(\n      texture: WebGLTexture,\n      downloadAndDecode: () => Float32Array): Float32Array {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n\n    return result;\n  }\n\n  private setOutputMatrixTextureDriver(\n      outputMatrixTextureMaybePacked: WebGLTexture, width: number,\n      height: number) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(\n        gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n\n  private setOutputMatrixWriteRegionDriver(\n      x: number, y: number, width: number, height: number) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(\n        this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n\n  private throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n\n  private throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean,\n  resolveFn: () => void\n};\n\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const addImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => a + b));\nexport const addComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal + bReal, imag: aImag + bImag};\n    }));\n\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NumericDataType, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op: SimpleUnaryOperation):\n    SimpleUnaryImpl {\n  return (values, dtype, attrs) => {\n    const newValues =\n        util.getTypedArrayFromDType(dtype as NumericDataType, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const equalImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a === b) ? 1 : 0);\nexport const equal =\n    binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a > b) ? 1 : 0);\nexport const greater =\n    binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const greaterEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(\n    GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Less} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a < b) ? 1 : 0);\nexport const less =\n    binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const lessEqualImpl =\n    createSimpleBinaryKernelImpl((a: number, b: number) => (a <= b) ? 1 : 0);\nexport const lessEqual =\n    binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Maximum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const maximumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.max(aValue as number, bValue as number)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Minimum} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const minimumImpl = createSimpleBinaryKernelImpl(\n    ((aValue, bValue) => Math.min(aValue as number, bValue as number)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Multiply} from '@tensorflow/tfjs-core';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const multiplyImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue * bValue));\nexport const multiplyComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n      };\n    }));\n\nexport const multiply =\n    binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NotEqual} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const notEqualImpl =\n    createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual =\n    binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Rsqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFuncFromImpl} from '../utils/unary_utils';\n\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sigmoidImpl =\n    createSimpleUnaryImpl((xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid =\n    unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {createSimpleUnaryImpl} from '../utils/unary_impl';\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\nexport const sqrtImpl = createSimpleUnaryImpl((xi) => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc} from '../utils/binary_utils';\n\nexport const squaredDifferenceImpl =\n    createSimpleBinaryKernelImpl(((a: number, b: number) => {\n      const diff = a - b;\n      return diff * diff;\n    }));\nexport const squaredDifference =\n    binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {binaryKernelFunc, createComplexBinaryKernelImpl} from '../utils/binary_utils';\n\nexport const subImpl = createSimpleBinaryKernelImpl(\n    ((aValue: number, bValue: number) => aValue - bValue));\nexport const subComplexImpl =\n    createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n      return {real: aReal - bReal, imag: aImag - bImag};\n    }));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function concatImpl(\n    inputs: Array<{vals: BackendValues, shape: number[]}>, outShape: number[],\n    dtype: DataType, simplyConcat: boolean): TypedArray|string[] {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n\n      (outVals as TypedArray).set(input.vals as TypedArray, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ?\n          backend_util.fromUint8ToStringArray(input.vals as Uint8Array[]) :\n          input.vals as TypedArray;\n\n      let tIdx = 0;\n\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n\n      colOffset += input.shape[1];\n    });\n  }\n\n  return outVals;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    outBuf.values[i] = xBuf.values[originalIndex];\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function linSpaceImpl(\n    start: number, stop: number, num: number): TypedArray {\n  const step = (stop - start) / (num - 1);\n\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function prodImpl(\n    xShape: number[], xDtype: DataType, xVals: TypedArray,\n    reductionAxes: number[]):\n    {outVals: TypedArray, outShape: number[], outDtype: DataType} {\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(\n                      util.sizeFromShape(outShape), outDtype) as TypedArray;\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n\n  return {outVals, outShape, outDtype};\n}\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendCPU, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'prod');\n\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  const xVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  const {outVals, outShape, outDtype} =\n      prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n    }\n    if (row >= denseRows) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(`only one output dimension may be -1, not both ${\n            unknownIndex} and ${d}`);\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(`size ${d} must be non-negative, not ${size}`);\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          'reshape cannot infer the missing ' +\n          'input size for an empty tensor unless all ' +\n          'specified input sizes are non-zero');\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${\n          product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(`Input to reshape is a tensor with ${\n        denseSize} dense values, but the requested shape has ${\n        outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseSegmentReductionImpl(\n    input: TypedArray, inputShape: number[], inputDType: DataType,\n    indices: TypedArray, segmentIds: TypedArray, isMean = false,\n    defaultValue = 0): [TypedArray, number[]] {\n  const numIndices = indices.length;\n  if (numIndices !== segmentIds.length) {\n    throw new Error(`segmentIds and indices should have same size.`);\n  }\n\n  // Flatten the array to two dimensions\n  const inputFlat: number[] = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne =\n      numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n\n  if (outputRows < 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n\n  const outputLength =\n      outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength) as TypedArray;\n\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n\n  if (outputRows <= 0) {\n    throw new Error(`segment ids must be >= 0`);\n  }\n\n  let start = 0, end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(`segment ids are not increasing`);\n      }\n    }\n\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(`Segment id ${outIndex} out of range [0, ${\n          outputRows}), possibly because segmentIds input is not sorted.`);\n    }\n\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(`Bad: indices[${i}] == ${indices[i]} out of range [0, ${\n            inputFlat[0]})`);\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n\n  return [output, outputShape];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function stridedSliceImpl<R extends Rank>(\n    outShape: number[], xBuf: TensorBuffer<R>, strides: number[],\n    begin: number[]): TensorBuffer<R> {\n  const outBuf = buffer(outShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n\n    const newLoc: number[] = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function stringToHashBucketFastImpl(\n    input: Uint8Array[], numBuckets: number): TypedArray {\n  const output = util.getArrayFromDType('int32', input.length) as TypedArray;\n\n  for (let i = 0; i < input.length; ++i) {\n    output[i] =\n        util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n\n  return output;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {util} from '@tensorflow/tfjs-core';\n\nexport function transposeImpl(\n    xVals: TypedArray, xShape: number[], dtype: DataType, perm: number[],\n    newShape: number[]): TypedArray {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n\n  const result = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(newShape));\n\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n\n    // Permute location.\n    const newLoc: number[] = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendValues, DataType, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function uniqueImpl(\n    values: BackendValues, axis: number, shape: number[], dtype: DataType): {\n  outputValues: BackendValues,\n  outputShape: number[],\n  indices: BackendValues\n} {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements: {[key: string]: number} = {};\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values as TypedArray);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices: number[] = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element: string;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n\n    // Dedup and update various indices.\n    if (uniqueElements[element] !== undefined) {\n      indices[i] = uniqueElements[element];\n    } else {\n      const uniqueIndex = Object.keys(uniqueElements).length;\n      uniqueElements[element] = uniqueIndex;\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = Object.keys(uniqueElements).length;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n\n  return {\n    outputValues: outputBuffer.values as BackendValues,\n    outputShape,\n    indices,\n  };\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    if (rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', rank);\n      const dtype = getCoordsDataType(rank);\n      const outOfBoundsCondition =\n          getOutOfBoundsCondition(rank, outputShape, channels);\n      const setup = getSetup(\n          rank, outputShape[outputShape.length - 1],\n          outputShape[outputShape.length - 2], channels);\n      const output = getOutput(outputShape, channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n}\n\nfunction getSourceCoordsArr(rank: number, dims: string[]): string[] {\n  const coords = [];\n\n  for (let row = 0; row <= 1; row++) {\n    for (let col = 0; col <= 1; col++) {\n      let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n      for (let d = 2; d < rank; d++) {\n        coord = `${dims[dims.length - 1 - d]},` + coord;\n      }\n\n      coords.push(coord);\n    }\n  }\n  return coords;\n}\n\nfunction getOutOfBoundsCondition(\n    rank: number, shape: number[], dims: string[]): string {\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\nfunction getSetup(\n    rank: number, cols: number, rows: number, dims: string[]): string {\n  if (rank === 1) {\n    return '';\n  }\n\n  const innerDims = dims.slice(-2);\n\n  return `\n    int r = ${innerDims[0]};\n    int c = ${innerDims[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${cols};\n    bool rEdge = rp1 >= ${rows};\n  `;\n}\n\nfunction getOutput(shape: number[], dims: string[]): string {\n  const rank = shape.length;\n  const sourceCoords = getSourceCoordsArr(rank, dims);\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  return `getA(${sourceCoords[0]}),\n          cEdge ? 0. : getA(${sourceCoords[1]}),\n          rEdge ? 0. : getA(${sourceCoords[2]}),\n          rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class ReshapePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'inputShape', type: 'ivec3' as const }];\n\n  constructor(outputShape: [number, number, number], inputShape: [\n    number, number, number\n  ]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nfunction getReshapedInputCoords(\n    shape: [number, number, number], enableShapeUniforms: boolean): string {\n  const coordsFromIndexSnippet = enableShapeUniforms ?\n      shader_util.getLogicalCoordinatesFromFlatIndexByUniform(\n          ['r', 'c', 'd'], 'inputShape') :\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport {getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture} from './gpgpu_util';\nimport {getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureConfig, TextureUsage} from './tex_util';\n\nexport class TextureManager {\n  private numUsedTextures = 0;\n  private numFreeTextures = 0;\n  private _numBytesAllocated = 0;\n  private _numBytesFree = 0;  // How many bytes that have been allocated\n                              // are available for reuse.\n  private freeTextures: {[shape: string]: WebGLTexture[]} = {};\n  private logEnabled = false;\n  private usedTextures: {[shape: string]: WebGLTexture[]} = {};\n\n  constructor(private gpgpu: GPGPUContext) {}\n\n  acquireTexture(\n      shapeRC: [number, number], usage: TextureUsage,\n      isPacked: boolean): WebGLTexture {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].shift();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n\n    let newTexture: WebGLTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture =\n          this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture =\n          this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (\n        physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture =\n          this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n\n    return newTexture;\n  }\n\n  releaseTexture(\n      texture: WebGLTexture, shape: [number, number],\n      logicalTexType: TextureUsage, isPacked: boolean): void {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType =\n        getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    const texBytes = computeBytes(\n        shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig,\n        isPacked);\n    const deleteTexThreshold = env().get('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 &&\n        this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n\n    this.numUsedTextures--;\n\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList.indexOf(texture);\n    if (texIndex < 0) {\n      throw new Error(\n          'Cannot release a texture that was never provided by this ' +\n          'texture manager');\n    }\n    texList.splice(texIndex, 1);\n    this.log();\n  }\n\n  private log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log(\n        'Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`,\n        `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${\n        Math.round(100 * freeRatio)}%)`);\n  }\n\n  get numBytesAllocated(): number {\n    return this._numBytesAllocated;\n  }\n\n  get numBytesFree(): number {\n    return this._numBytesFree;\n  }\n\n  getNumUsedTextures(): number {\n    return this.numUsedTextures;\n  }\n\n  getNumFreeTextures(): number {\n    return this.numFreeTextures;\n  }\n\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex);\n      });\n    }\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\n\nfunction numBytesForInternalFormat(\n    gl: WebGLRenderingContext, internalFormat: number): number {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\n\nexport function computeBytes(\n    shape: [number, number], physicalTexType: PhysicalTextureType,\n    gl: WebGLRenderingContext, textureConfig: TextureConfig,\n    isPacked: boolean): number {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat =\n      internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n\n  let numElements: number;\n  if (isPacked) {\n    const [packedWidth, packedHeight] =\n        getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n\n  } else {\n    const [width, height] =\n        getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\n\nfunction internalFormatForPhysicalTexType(\n    physicalTexType: PhysicalTextureType,\n    textureConfig: TextureConfig): number {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\n\nfunction getPhysicalTextureForRendering(isPacked: boolean):\n    PhysicalTextureType {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\n\nfunction getPhysicalFromLogicalTextureType(\n    logicalTexType: TextureUsage, isPacked: boolean): PhysicalTextureType {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (\n      logicalTexType === TextureUsage.DOWNLOAD ||\n      logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\n\nfunction getKeyFromTextureShape(\n    shapeRowsCol: [number, number], physicalTexType: PhysicalTextureType,\n    isPacked: boolean): string {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const LINEAR = `return x;`;\n\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport class UnaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  outputShape: number[];\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataType, DataValues, engine, env, kernel_impls, KernelBackend, MemoryInfo, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpgpu?: GPGPUContext) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    if (gpgpu == null) {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpu = new GPGPUContext(gl);\n      this.canvas = gl.canvas;\n      this.gpgpuCreatedLocally = true;\n    } else {\n      this.gpgpu = gpgpu;\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n      this.canvas = gpgpu.gl.canvas;\n    }\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n        env().getNumber('WEBGL_VERSION') === 2) {\n      throw new Error(\n          `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n          `WEBGL_VERSION=2 not yet supported.`);\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu\n                       .downloadMatrixFromPackedTexture(\n                           tmpData.texture, ...tex_util.getDenseTexShape(shape))\n                       .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals =\n        this.gpgpu\n            .downloadByteEncodedFloatMatrixFromOutputTexture(\n                tmpData.texture, tmpData.texShape[0], tmpData.texShape[1])\n            .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  async time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n      res['kernelMs'] = util.sum(kernelMs);\n      res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n              .map(d => `${d.name}: ${d.ms}`)\n              .join(', ');\n    } else {\n      res['kernelMs'] = {\n        error: 'WebGL query timers are not supported in this environment.'\n      };\n    }\n\n    this.uploadWaitMs = 0;\n    this.downloadWaitMs = 0;\n    return res;\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(\n        outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId): TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    const denseTexShape = tex_util.getDenseTexShape(shapeAs3D);\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [denseTexShape];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      } else if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      this.uploadToGPU(input.dataId);\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customUniformValues);\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray = values instanceof Uint8Array\n                          || values instanceof Uint8ClampedArray;\n\n      if (isPacked) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      const tempDenseInputHandle = this.makeTensorInfo([height, width], dtype);\n      if (isByteArray) {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.PIXELS;\n      } else {\n        this.texData.get(tempDenseInputHandle.dataId).usage =\n            TextureUsage.UPLOAD;\n      }\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): WebGLTexture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\n\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\n\nexport {MathBackendWebGL, WebGLMemoryInfo, WebGLTimingInfo} from './backend_webgl';\nexport {setWebGLContext} from './canvas_util';\nexport {GPGPUContext} from './gpgpu_context';\nexport {GPGPUProgram} from './gpgpu_math';\n// WebGL specific utils.\nexport {gpgpu_util, webgl_util};\n\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat(): void {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n","/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// base.ts is the webgl backend without auto kernel registration.\n\nimport {device_util, registerBackend} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from './backend_webgl';\nexport {version as version_webgl} from './version';\n\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n\n// Export webgl utilities\nexport * from './webgl';\n\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport {forceHalfFloat} from './webgl';\nexport const webgl = {forceHalfFloat};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Identity, IdentityInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function identity(\n    args: {inputs: IdentityInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  backend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: x.shape, dtype: x.dtype};\n}\n\nexport const identityConfig: KernelConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as {} as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Prelu, PreluInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) :\n      new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, env, KernelFunc, TypedArray, UnaryInputs, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {complex} from '../kernels/Complex';\nimport {LEAKYRELU, LEAKYRELU_PACKED} from '../kernels/LeakyRelu';\nimport {PRELU, PRELU_PACKED} from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nimport {SimpleBinaryKernelImplCPU, SimpleUnaryKernelImplCPU} from './shared';\n\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\n\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\ntype UnaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  cpuKernelImpl?: SimpleUnaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc(\n    {opSnippet, packedOpSnippet, cpuKernelImpl, dtype}: UnaryKernelFuncConfig):\n    KernelFunc {\n  return ({inputs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values as TypedArray, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program: UnaryOpProgram|UnaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n\ntype BinaryKernelFuncConfig = {\n  opSnippet: string,\n  packedOpSnippet?: string,\n  checkOutOfBounds?: boolean,\n  supportsComplex?: boolean,\n  cpuKernelImpl?: SimpleBinaryKernelImplCPU,\n  dtype?: DataType\n};\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}: BinaryKernelFuncConfig): KernelFunc {\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n\n      const [real, imag] = [\n        [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n        [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n      ].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(\n            program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n\n      const complexOutput =\n          complex({inputs: {real, imag}, backend: webglBackend});\n\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n\n      return complexOutput;\n    }\n\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' ||\n         webglBackend.shouldExecuteOnCPU([a, b])) &&\n        cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values as TypedArray;\n      const bVals = webglBackend.texData.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const [outValues, outShape] =\n          cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n        packedOpSnippet != null;\n    let program: BinaryOpProgram|BinaryOpPackedProgram;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(\n          packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\n\nexport function mapActivationToShaderProgram(\n    activation: backend_util.Activation, packed = false): string {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${\n      activation} has not been implemented for the WebGL backend.`);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class MatMulPackedProgram implements GPGPUProgram {\n  variableNames = ['matrixA', 'matrixB'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      aShape: [number, number, number], bShape: [number, number, number],\n      outputShape: [number, number, number], transposeA = false,\n      transposeB = false, addBias = false, activation: string = null,\n      hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `int(min(float(rc.x), ${aShape[0] - 1}.))`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `int(min(float(rc.x), ${bShape[0] - 1}.))`;\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          int batchA = ${batchASnippet};\n          int batchB = ${batchBSnippet};\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\n\nexport class BinaryOpComplexProgram implements GPGPUProgram {\n  variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(op: string, aShape: number[], bShape: number[]) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReshapePackedProgram} from '../reshape_packed_gpu';\nimport {getBatchDim, getRowsCols} from '../webgl_util';\n\nexport function packedReshape(\n    input: TensorInfo, afterShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const input3DShape =\n      [getBatchDim(input.shape),\n       ...getRowsCols(input.shape)] as [number, number, number];\n  const input3D: TensorInfo = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D =\n      [getBatchDim(afterShape),\n       ...getRowsCols(afterShape)] as [number, number, number];\n\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(\n      program, [input3D], input.dtype, customValues,\n      preventEagerUnpackingOfOutput);\n  return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MeanProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(reduceInfo: backend_util.ReduceInfo, divisor?: number) {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${\n          util.isInt(denominator) ? denominator.toPrecision(2) :\n                                    denominator}, ones);`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ReduceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo,\n      reduceType: 'all'|'any'|'max'|'min'|'sum'|'prod') {\n    const {windowSize, batchSize, inSize, outSize} = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n\n    let initializationValue = '0.0';\n    let compareOp = ``;\n\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n\n    let vecType = `vec4`;\n\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposeProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\n\nfunction getSwitchedCoords(newDim: number[]): string {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder =\n      ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {transposeImplCPU} from '../kernel_utils/shared';\nimport {TransposeProgram} from '../transpose_gpu';\nimport {TransposePackedProgram} from '../transpose_packed_gpu';\n\nexport function transposeImpl(\n    x: TensorInfo, perm: number[], backend: MathBackendWebGL): TensorInfo {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new TransposePackedProgram(x.shape, perm) :\n      new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport {transposeImplCPU};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {sumImpl} from './Sum_impl';\n\nexport function sum(\n    args: {inputs: SumInputs, attrs: SumAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  return sumImpl(x, axis, keepDims, backend);\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, sumOutType, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function sumImpl(\n    x: TensorInfo, axis: number|number[], keepDims: boolean,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionIndices = axis;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape(\n      {inputs: {x: sumInput}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const outType = sumOutType(x.dtype);\n\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\n\ntype BatchMatMulConfig = {\n  a: TensorInfo,\n  b: TensorInfo,\n  transposeA: boolean,\n  transposeB: boolean,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: BatchMatMulConfig): TensorInfo {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n\n  const batchDimsCompatible =\n      batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n\n  util.assert(\n      aRank >= 2 && bRank >= 2 && batchDimsCompatible,\n      () => `Error in matMul: the input batch dimensions must either be the ` +\n          `same or at least one input batch dimension must be 1. Got input ` +\n          `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n\n  const outShapeOuterDims =\n      batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n\n  util.assert(\n      innerShapeA === innerShapeB,\n      () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n          `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n          `${b.shape} and transposeA=${transposeA}` +\n          ` and transposeB=${transposeB} must match.`);\n\n  const a3dShape: [number, number, number] = transposeA ?\n      [batchDimA, innerShapeA, outerShapeA] :\n      [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape: [number, number, number] = transposeB ?\n      [batchDimB, outerShapeB, innerShapeB] :\n      [batchDimB, innerShapeB, outerShapeB];\n\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({inputs: {x: a}, backend, attrs: {shape: a3dShape}});\n  const b3d = reshape({inputs: {x: b}, backend, attrs: {shape: b3dShape}});\n\n  const intermediates: TensorInfo[] = [a3d, b3d];\n\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ?\n      mapActivationToShaderProgram(activation, true) :\n      null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights ||\n      hasLeakyreluAlpha || fusedActivation != null;\n  let out: TensorInfo;\n\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) &&\n      sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({inputs: {x: a3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({inputs: {x: b3d}, backend, attrs: {perm: [0, 2, 1]}});\n      intermediates.push(bVec);\n    }\n\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {x: aVec},\n        backend,\n        attrs: {shape: [batchDim, sharedDim, 1]}\n      });\n\n      intermediates.push(aVec3d);\n    }\n\n    const axis = outerShapeB === 1 ? 2 : 1;\n\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {x: bVec},\n        backend,\n        attrs: {shape: [batchDim, 1, sharedDim]}\n      });\n\n      intermediates.push(bVec3d);\n    }\n\n    const product = multiply({inputs: {a: aVec3d, b: bVec3d}, backend});\n    out = sum({inputs: {x: product}, backend, attrs: {axis, keepDims: true}});\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n\n    const program = new MatMulPackedProgram(\n        a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA,\n        transposeB, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n\n    const inputs: TensorInfo[] = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: outShape}});\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\n\nexport const acos = unaryKernelFunc({opSnippet: ACOS});\n\nexport const acosConfig: KernelConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos,\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Acosh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\n\nexport const acosh = unaryKernelFunc({opSnippet: ACOSH});\n\nexport const acoshConfig: KernelConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Add, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {addImplCPU as cpuAdd} from '../kernel_utils/shared';\n\nconst ADD = 'return a + b;';\n\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\n\nexport const addConfig: KernelConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AddNPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(outputShape: number[], shapes: number[][]) {\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const snippets: string[] = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n\n    // Calculate the sum of all elements.\n    const operation = this.variableNames\n                          .map(variable => {\n                            return `v${variable}`;\n                          })\n                          .join(' + ');\n\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Any, AnyAttrs, AnyInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function any(\n    args: {inputs: AnyInputs, backend: MathBackendWebGL, attrs: AnyAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const anyConfig: KernelConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMax, ArgMaxAttrs, ArgMaxInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\n\nimport {transpose} from './Transpose';\n\nexport function argMax(\n    args:\n        {inputs: ArgMaxInputs, backend: MathBackendWebGL, attrs: ArgMaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMaxConfig: KernelConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {argMinMaxReduce} from '../kernel_utils/arg_min_max';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args:\n        {inputs: ArgMinInputs, backend: MathBackendWebGL, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asin, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\n\nexport const asin = unaryKernelFunc({opSnippet: ASIN});\n\nexport const asinConfig: KernelConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Asinh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\n\nexport const asinh = unaryKernelFunc({opSnippet: ASINH});\n\nexport const asinhConfig: KernelConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\n\nexport const atan = unaryKernelFunc({opSnippet: ATAN});\n\nexport const atanConfig: KernelConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc, CHECK_NAN_SNIPPET_BINARY, CHECK_NAN_SNIPPET_BINARY_PACKED} from '../kernel_utils/kernel_funcs_utils';\n\nconst ATAN2 = CHECK_NAN_SNIPPET_BINARY + `\n  return atan(a, b);\n`;\n\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_BINARY_PACKED + `\n  return result;\n`;\n\nexport const atan2 =\n    binaryKernelFunc({opSnippet: ATAN2, packedOpSnippet: ATAN2_PACKED});\n\nexport const atan2Config: KernelConfig = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atanh, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\n\nexport const atanh = unaryKernelFunc({opSnippet: ATANH});\n\nexport const atanhConfig: KernelConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Pool2DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${\n        convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr =\n        `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${\n          flattenPositions ? (includeBatchInIndex ? batchFlattenPositionStr :\n                                                    flattenPositionStr) :\n                             `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n\nexport class Pool3DProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv3DInfo, poolType: 'max'|'avg',\n      computePositions: boolean, flattenPositions = false,\n      includeBatchInIndex = false) {\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n\n    const isAvgPool = poolType === 'avg';\n\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n\n    if (computePositions) {\n      const compareOp = '>=';\n\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${\n          flattenPositions ?\n              (includeBatchInIndex ?\n                   `(((batch * ${convInfo.inDepth} + xD) * ${\n                       convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${\n                       convInfo.inChannels} + ch` :\n                   `((xD * ${convInfo.inHeight} + xR) * ${\n                       convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch`) :\n              `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n\n    const compareOp = 'max';\n\n    let returnValue = `${poolType}(${poolType}(${poolType}(` +\n        'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / count`;\n    }\n\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n          setOutput(${returnValue});\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool, AvgPoolAttrs, AvgPoolInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function avgPool(args: {\n  inputs: AvgPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPoolConfig: KernelConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class AvgPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class AvgPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool3DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function avgPool3DGrad(args: {\n  inputs: AvgPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGrad3DConfig: KernelConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {AvgPool2DBackpropProgram} from '../avg_pool_backprop_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {batchMatMulImpl} from './BatchMatMul_impl';\n\nexport function batchMatMul(args: {\n  inputs: BatchMatMulInputs,\n  attrs: BatchMatMulAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b} = inputs;\n  const {transposeA, transposeB} = attrs;\n\n  return batchMatMulImpl({a, b, transposeA, transposeB, backend});\n}\n\nexport const batchMatMulConfig: KernelConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SlicePackedProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n\n    const innerDims =\n        this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel =\n        `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n\n    const sourceLocSetup = this.rank <= 4 ?\n        `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` :\n        destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`)\n            .join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sliceImplCPU} from '../kernel_utils/shared';\nimport {SliceProgram} from '../slice_gpu';\nimport {SlicePackedProgram} from '../slice_packed_gpu';\n\nfunction shallowSlice(\n    x: TensorInfo, begin: number[], size: number[], backend: MathBackendWebGL) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset =\n      slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendWebGL, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(\n        xTexData.values as TypedArray, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n\n  const {isPacked} = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n        new SlicePackedProgram($size) :\n        new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Bincount, BincountAttrs, BincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU} from '../kernel_utils/shared';\n\nexport function bincount(args: {\n  inputs: BincountInputs,\n  backend: MathBackendWebGL,\n  attrs: BincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size} = attrs;\n\n  const xVals = backend.readSync(x.dataId) as TypedArray;\n  const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n  const outVals =\n      bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\n\nexport const bincountConfig: KernelConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BroadcastArgs, BroadcastArgsInputs, KernelConfig, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function broadcastArgs(args: {\n  inputs: BroadcastArgsInputs,\n  backend: MathBackendWebGL,\n}): TensorInfo {\n  const {inputs, backend} = args;\n  const {s0, s1} = inputs;\n\n  const s0Vals = backend.readSync(s0.dataId) as TypedArray;\n  const s1Vals = backend.readSync(s1.dataId) as TypedArray;\n\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(\n      Array.from(s0Vals), Array.from(s1Vals));\n\n  return backend.makeTensorInfo(\n      [broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\n\nexport const broadcastArgsConfig: KernelConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgl',\n  kernelFunc: broadcastArgs\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NotEqual} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {notEqualImplCPU} from '../kernel_utils/shared';\n\nconst NOT_EQUAL = `return float(a != b);`;\n\nexport const notEqual = binaryKernelFunc(\n    {opSnippet: NOT_EQUAL, cpuKernelImpl: notEqualImplCPU, dtype: 'bool'});\n\nexport const notEqualConfig: KernelConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.real}, backend});\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {UnaryOpProgram} from '../unaryop_gpu';\n\nconst TO_INT = `return float(int(x));`;\n\nexport function int(input: TensorInfo, backend: MathBackendWebGL): TensorInfo {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {dataId: output.dataId, shape: output.shape, dtype: output.dtype};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Ceil, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {ceilImplCPU} from '../kernel_utils/shared';\n\nconst CEIL = `return ceil(x);`;\n\nexport const ceil = unaryKernelFunc(\n    {opSnippet: CEIL, packedOpSnippet: CEIL, cpuKernelImpl: ceilImplCPU});\n\nexport const ceilConfig: KernelConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class ClipPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  userCode: string;\n  outputShape: number[];\n  customUniforms = [\n    {name: 'minVal', type: 'float' as UniformType},\n    {name: 'maxVal', type: 'float' as UniformType}\n  ];\n\n  constructor(aShape: number[]) {\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ClipByValue, ClipByValueAttrs, ClipByValueInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ClipProgram} from '../clip_gpu';\nimport {ClipPackedProgram} from '../clip_packed_gpu';\n\nexport function clipByValue(args: {\n  inputs: ClipByValueInputs,\n  backend: MathBackendWebGL,\n  attrs: ClipByValueAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {clipValueMin, clipValueMax} = attrs;\n\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\n\nexport const clipByValueConfig: KernelConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ComplexAbsProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ComplexAbsProgram} from '../complex_abs_gpu';\n\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(\n    complexTensor: TensorInfo, complexPart: TensorInfo): TensorInfo {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\n\nexport function complexAbs(\n    args: {inputs: ComplexAbsInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xData = backend.texData.get(x.dataId);\n\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real),\n    makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag),\n  ];\n\n  return backend.runWebGLProgram(\n      program, programInputs, programInputs[0].dtype);\n}\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ConcatProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes: Array<[number, number]>) {\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(\n          `else if (yC < ${offsets[i]}) ` +\n          `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Imag, ImagInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function imag(args: {inputs: ImagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n  const inputData = backend.texData.get(input.dataId);\n\n  return identity({inputs: {x: inputData.complexTensorInfos.imag}, backend});\n}\n\nexport const imagConfig: KernelConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(inputs.length / 2);\n    const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n    const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n\n    const result = concatImpl([leftSide, rightSide], axis, backend);\n\n    backend.disposeIntermediateTensorInfo(leftSide);\n    backend.disposeIntermediateTensorInfo(rightSide);\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivationWeights = false,\n      hasLeakyreluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n\nexport class Conv3DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${\n        strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec3' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[1] && pos < outShape[0]) {' :\n        `if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Im2ColPackedProgram} from '../im2col_packed_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\nimport {MatMulPackedProgram} from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\n\nimport {batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD} from './BatchMatMul_impl';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\n\ntype Conv2DConfig = {\n  x: TensorInfo,\n  filter: TensorInfo,\n  convInfo: backend_util.Conv2DInfo,\n  backend: MathBackendWebGL,\n  bias?: TensorInfo,\n  preluActivationWeights?: TensorInfo,\n  leakyreluAlpha?: number,\n  activation?: backend_util.Activation\n};\n\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked =\n      (outerShapeX === 1 || outerShapeFilter === 1) &&\n      sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked &&\n      isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 &&\n      util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped: TensorInfo = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(\n        webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape),\n        () => `packed reshape ${xTexData.shape} to ${\n            xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(\n        pointwiseConvTexData.isPacked,\n        () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n\n    out = identity({inputs: {x: pointwiseConv}, backend});\n    out.shape = convInfo.outShape;\n\n    intermediates.push(pointwiseConv);\n  } else {\n    const targetShape = isChannelsLast ? xShape[0] * xShape[1] * xShape[2] :\n                                         xShape[0] * xShape[2] * xShape[3];\n    const xReshaped = reshape({\n      inputs: {x},\n      backend,\n      attrs: {shape: [1, targetShape, convInfo.inChannels]}\n    });\n    const filterReshaped = reshape({\n      inputs: {x: filter},\n      backend,\n      attrs: {shape: [1, convInfo.inChannels, convInfo.outChannels]}\n    });\n    const result = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      transposeA,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n\n    out = reshape(\n        {inputs: {x: result}, backend, attrs: {shape: convInfo.outShape}});\n\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}: Conv2DConfig) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n\n  const isChannelsLast = dataFormat === 'channelsLast';\n\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n\n  const intermediates: TensorInfo[] = [];\n\n  const xSqueezed =\n      reshape({inputs: {x}, backend, attrs: {shape: x.shape.slice(1)}});\n  const w2Row = reshape({\n    inputs: {x: filter},\n    backend,\n    attrs: {shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]}\n  });\n\n  intermediates.push(xSqueezed);\n  intermediates.push(w2Row);\n\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [\n    xSqueezed.shape, [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels],\n    [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]\n  ];\n  const im2Col = backend.runWebGLProgram(\n      im2ColProgram, [xSqueezed], 'float32', customValues);\n  const im2ColReshaped = reshape({\n    inputs: {x: im2Col},\n    backend,\n    attrs: {shape: [1, x2ColShape[0], x2ColShape[1]]}\n  });\n\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation =\n      activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(\n      im2ColReshaped.shape as [number, number, number],\n      w2Row.shape as [number, number, number],\n      [1, numCols, convInfo.outChannels], transposeA, transposeB, hasBias,\n      fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs: TensorInfo[] = [im2ColReshaped, w2Row];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n\n  const outShape = isChannelsLast ?\n      [1, outHeight, outWidth, convInfo.outChannels] :\n      [1, convInfo.outChannels, outHeight, outWidth];\n  const out =\n      reshape({inputs: {x: product}, backend, attrs: {shape: outShape}});\n\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return out;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Conv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              if (${isChannelsLast}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class Conv3DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  attrs: Conv2DBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  attrs: Conv2DBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const program = new Conv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3D, Conv3DAttrs, Conv3DInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DProgram} from '../conv_gpu';\n\nexport function conv3D(\n    args:\n        {inputs: Conv3DInputs, attrs: Conv3DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number],\n      filter.shape as [number, number, number, number, number], strides,\n      dilations, pad);\n\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\n\nexport const conv3DConfig: KernelConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerFilterProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  attrs: Conv3DBackpropFilterV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv3DDerInputProgram} from '../conv_backprop_gpu';\n\nexport function conv3DBackpropInput(args: {\n  inputs: Conv3DBackpropInputV2Inputs,\n  attrs: Conv3DBackpropInputV2Attrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {pad, strides, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv3DInfo(\n      inputShape, filter.shape as [number, number, number, number, number],\n      strides, 1 /* dilations */, pad);\n\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const conv3DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cos, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\n\nexport const cos = unaryKernelFunc({opSnippet: COS});\n\nexport const cosConfig: KernelConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Cosh, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\n\nexport const cosh = unaryKernelFunc({opSnippet: COSH});\n\nexport const coshConfig: KernelConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class CropAndResizeProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Boxes', 'BoxInd'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      imageShape: [number, number, number, number], boxShape: [number, number],\n      cropSize: [number, number], method: 'bilinear'|'nearest',\n      extrapolationValue: number) {\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes, ] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n\n    const [inputHeightFloat, inputWidthFloat] =\n        [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ?\n        [\n          `${(imageHeight - 1) / (cropHeight - 1)}`,\n          '(y2-y1) * height_ratio',\n          `y1*${inputHeightFloat} + float(y)*(height_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (y1+y2) * ${inputHeightFloat}`,\n        ];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ?\n        [\n          `${(imageWidth - 1) / (cropWidth - 1)}`,\n          '(x2-x1) * width_ratio',\n          `x1*${inputWidthFloat} + float(x)*(width_scale)`,\n        ] :\n        [\n          '0.0',\n          '0.0',\n          `0.5 * (x1+x2) * ${inputWidthFloat}`,\n        ];\n\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CropAndResizeProgram} from '../crop_and_resize_gpu';\n\nexport const cropAndResize = (args: {\n  inputs: CropAndResizeInputs,\n  backend: MathBackendWebGL,\n  attrs: CropAndResizeAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {image, boxes, boxInd} = inputs;\n  const {cropSize, method, extrapolationValue} = attrs;\n\n  const program = new CropAndResizeProgram(\n      image.shape as [number, number, number, number],\n      boxes.shape as [number, number], cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\n\nexport const cropAndResizeConfig: KernelConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class CumSumProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'index', type: 'float' as UniformType}];\n\n  constructor(shape: number[], exclusive: boolean, reverse: boolean) {\n    this.outputShape = shape;\n    const rank = shape.length;\n    const val = exclusive ? '0.0' : `getX(${getCoords(rank, 'coords')})`;\n    const length = shape[shape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cumsum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = (reverse ? 'end + pow2' : 'end - pow2');\n    }\n\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords')};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords')} = idx;\n          val += getX(${getCoords(rank, 'coords')});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\n\nfunction getCoords(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n\nfunction getFinalCoord(rank: number, name: string): string {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw Error(`Cumulative sum for rank ${rank} is not yet supported`);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Cumsum, CumsumAttrs, CumsumInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CumSumProgram} from '../cumsum_gpu';\n\nimport {identity} from './Identity';\nimport {transpose} from './Transpose';\n\nexport function cumsum(\n    args:\n        {inputs: CumsumInputs, backend: MathBackendWebGL, attrs: CumsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, exclusive, reverse} = attrs;\n\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(\n        `WebGL cumsum shader expects an inner-most axis=${\n            x.shape.length - 1} ` +\n        `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({inputs: {x: permutedX}, backend});\n  // Use cumsum parallel algorithm, ref:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumSumProgram(permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result =\n        backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cumsum, shift the end result in the direction of sum\n  // and add 0 to the front index.\n  if (exclusive) {\n    const program = new CumSumProgram(permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose(\n        {inputs: {x: result}, backend, attrs: {perm: reversePermutation}});\n\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n\n    return reverseTransposedResult;\n  }\n\n  return result;\n}\n\nexport const cumsumConfig: KernelConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthToSpaceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  blockSize: number;\n  dataFormat: string;\n\n  constructor(\n      outputShape: number[], blockSize: number, dataFormat: 'NHWC'|'NCHW') {\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n\n  private getHeightCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n\n  private getWidthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n\n  private getDepthCoordString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n\n  private getOutputDepthSize(): number {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n\n  private getInputSamplingString(): string {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConvPacked2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${\n                  colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n\n            const nextTexelOffset = padLeft % 2 === 0 ?\n                util.nearestLargerEven(dilationWidth) :\n                dilationWidth;\n\n            if ((dilationWidth % 2 === 0 && padLeft % 2 === 1) ||\n                (dilationWidth % 2 !== 0 && padLeft % 2 !== 1)) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                  colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex}Ready == 0) {\n                      xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${colIndex}Ready = 1;\n                    }\n                    `;\n              }\n\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.xy);\n                  `;\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                    colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {  // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                colIndex + 1}.zw);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${\n                colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${\n                  colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DepthwiseConv2DDerFilterProgram implements GPGPUProgram {\n  variableNames = ['x', 'dy'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.filterShape;\n\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class DepthwiseConv2DDerInputProgram implements GPGPUProgram {\n  variableNames = ['dy', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerFilterProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DDerInputProgram} from '../conv_backprop_gpu_depthwise';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class DiagProgram implements GPGPUProgram {\n  variableNames = ['X'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(size: number) {\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class Dilation2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.outShape;\n\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n\n    const {top: padTop, left: padLeft} = padInfo;\n\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Einsum, EinsumAttrs, EinsumInputs, KernelConfig, KernelFunc, Tensor, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {multiply} from './Multiply';\nimport {reshape} from './Reshape';\nimport {sum} from './Sum';\nimport {transpose} from './Transpose';\n\nexport function einsum(\n    args:\n        {inputs: EinsumInputs, backend: MathBackendWebGL, attrs: EinsumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {equation} = attrs;\n  const tensors = inputs as Tensor[];\n\n  const {allDims, summedDims, idDims} =\n      backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {path, steps} = backend_util.getEinsumComputePath(summedDims, idDims);\n\n  const nSteps = steps.length;\n  let out: TensorInfo|null = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose: TensorInfo[] = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {permutationIndices: perm, expandDims: dimsToExpand} =\n          backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x: TensorInfo;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({inputs: {x: tensors[idTerm]}, backend, attrs: {perm}});\n        tensorsToDispose.push(x);\n      }\n      const targetShape: number[] = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({inputs: {x}, backend, attrs: {shape: targetShape}});\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({inputs: {a: x, b: out}, backend}) as TensorInfo;\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {x: out},\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n\n  return out;\n}\n\nexport const einsumConfig: KernelConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Elu, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\n\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\n\nconst elu = unaryKernelFunc({opSnippet: ELU, packedOpSnippet: ELU_PACKED});\n\nexport const eluConfig: KernelConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {EluGrad, EluGradInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nconst ELU_DER = `return (b >= 1.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const eluGrad =\n    (args: {inputs: EluGradInputs, backend: MathBackendWebGL}): TensorInfo => {\n      const {inputs, backend} = args;\n      const {dy, y} = inputs;\n\n      const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n          new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) :\n          new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n      return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n    };\n\nexport const eluGradConfig: KernelConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Equal, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {equalImplCPU} from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\n\nconst EQUAL = `return float(a == b);`;\n\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU,\n});\n\nexport const equalConfig: KernelConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Erf, KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\n\nexport const erf = unaryKernelFunc({opSnippet: ERF});\n\nexport const erfConfig: KernelConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Exp, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expImplCPU} from '../kernel_utils/shared';\n\nexport const EXP = `return exp(x);`;\nexport const exp = unaryKernelFunc({\n  opSnippet: EXP,\n  packedOpSnippet: EXP,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32',\n});\n\nexport const expConfig: KernelConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from './Reshape';\n\nexport function expandDims(args: {\n  inputs: ExpandDimsInputs,\n  attrs: ExpandDimsAttrs,\n  backend: MathBackendWebGL\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {dim} = attrs;\n  const {input} = inputs;\n\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(\n        -(inputRank + 1) <= dim,\n        () => `Axis must be in the interval [${- (inputRank + 1)}, ${\n            inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n\n  return reshape({inputs: {x: input}, backend, attrs: {shape: newShape}});\n}\n\nexport const expandDimsConfig: KernelConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Expm1, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {expm1ImplCPU} from '../kernel_utils/shared';\n\nconst EXPM1 = `return exp(x) - 1.0;`;\n\nexport const expm1 = unaryKernelFunc(\n    {opSnippet: EXPM1, packedOpSnippet: EXPM1, cpuKernelImpl: expm1ImplCPU});\n\nexport const expm1Config: KernelConfig = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FFTProgram implements GPGPUProgram {\n  variableNames = ['real', 'imag'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      component: 'real'|'imag', inputShape: [number, number],\n      inverse: boolean) {\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n\n    const exponentMultiplierSnippet =\n        inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n\n    let opString: string;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(\n          `FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, false /* inverse */, backend);\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class FillProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(shape: number[], value: number) {\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FillProgram} from '../fill_gpu';\n\nexport function fill(args: {backend: MathBackendWebGL, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value} = attrs;\n  let {dtype} = attrs;\n\n  dtype = dtype || util.inferDtype(value);\n\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value as string);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value as number);\n    const customValues = [[value as number]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class FlipLeftRightProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(imageShape: [number, number, number, number]) {\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {FlipLeftRight, FlipLeftRightInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FlipLeftRightProgram} from '../flip_left_right_gpu';\n\nexport const flipLeftRightConfig: KernelConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, backend}) => {\n    const {image} = inputs as FlipLeftRightInputs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new FlipLeftRightProgram((image as Tensor4D).shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n","\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Floor, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {floorImplCPU} from '../kernel_utils/shared';\n\nconst FLOOR = `return floor(x);`;\n\nexport const floor = unaryKernelFunc(\n    {opSnippet: FLOOR, packedOpSnippet: FLOOR, cpuKernelImpl: floorImplCPU});\n\nexport const floorConfig: KernelConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FloorDiv, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\n\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\n\nexport const floorDiv = binaryKernelFunc(\n    {opSnippet: INT_DIV, packedOpSnippet: INT_DIV_PACKED, dtype: 'int32'});\n\nexport const floorDivConfig: KernelConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from '../../glsl_version';\nimport {GPGPUProgram} from '../../gpgpu_math';\n\nexport class FromPixelsPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  packedInputs = false;\n  packedOutput = true;\n\n  constructor(outputShape: number[]) {\n    const glsl = getGlslDifferences();\n    const [height, width, ] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap,\n        0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n    const inputs: TensorInfo[] = [x, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: number[], axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('int(getIndices(resRC.x, resRC.z))');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Greater, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterImplCPU} from '../kernel_utils/shared';\n\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\n\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\n\nexport const greaterConfig: KernelConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GreaterEqual, KernelConfig, KernelFunc} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {greaterEqualImplCPU} from '../kernel_utils/shared';\n\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\n\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\n\nexport const greaterEqualConfig: KernelConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IFFT, IFFTInputs, KernelConfig, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {fftImpl} from './FFT_impl';\n\nexport function ifft(args: {inputs: IFFTInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  return fftImpl(input, true /* inverse */, backend);\n}\n\nexport const ifftConfig: KernelConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsFinite, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\n\nexport const isFinite = unaryKernelFunc({opSnippet: IS_FINITE, dtype: 'bool'});\n\nexport const isFiniteConfig: KernelConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsInf, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_INF = `return float(isinf(x));`;\n\nexport const isInf = unaryKernelFunc({opSnippet: IS_INF, dtype: 'bool'});\n\nexport const isInfConfig: KernelConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IsNan, KernelConfig} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst IS_NAN = `return float(isnan(x));`;\n\nexport const isNaN = unaryKernelFunc({opSnippet: IS_NAN, dtype: 'bool'});\n\nexport const isNaNConfig: KernelConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Less} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessImplCPU} from '../kernel_utils/shared';\n\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\n\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessConfig: KernelConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LessEqual} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {lessEqualImplCPU} from '../kernel_utils/shared';\n\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\n\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\n\nexport const lessEqualConfig: KernelConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LinSpace, LinSpaceAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {linSpaceImplCPU} from '../kernel_utils/shared';\n\nexport function linSpace(\n    args: {backend: MathBackendWebGL, attrs: LinSpaceAttrs}): TensorInfo {\n  const {backend, attrs} = args;\n  const {start, stop, num} = attrs;\n\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\n\nexport const linSpaceConfig: KernelConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Log} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {logImplCPU} from '../kernel_utils/shared';\n\nconst LOG = `if (x < 0.0) return NAN;\n  return log(x);`;\n\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n`;\n\nexport const log = unaryKernelFunc(\n    {opSnippet: LOG, packedOpSnippet: LOG_PACKED, cpuKernelImpl: logImplCPU});\n\nexport const logConfig: KernelConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Log1p} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOG1P = `return log(1.0 + x);`;\n\nexport const log1p = unaryKernelFunc({opSnippet: LOG1P});\n\nexport const log1pConfig: KernelConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalAnd} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\n\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\n\nexport const logicalAndConfig: KernelConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, LogicalNot} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\n\nexport const logicalNot = unaryKernelFunc({opSnippet: LOGICAL_NOT});\n\nexport const logicalNotConfig: KernelConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LogicalOr} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\n\nexport const logicalOr = binaryKernelFunc(\n    {opSnippet: LOGICAL_OR, packedOpSnippet: LOGICAL_OR_PACKED, dtype: 'bool'});\n\nexport const logicalOrConfig: KernelConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[] = [];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      xShape: number[], radius: number, bias: number, alpha: number,\n      beta: number) {\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNProgram} from '../lrn_gpu';\nimport {LRNPackedProgram} from '../lrn_packed_gpu';\n\nexport const lrn =\n    (args: {inputs: LRNInputs, backend: MathBackendWebGL, attrs: LRNAttrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {depthRadius, bias, alpha, beta} = attrs;\n\n          const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n              new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) :\n              new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n          return backend.runWebGLProgram(program, [x], x.dtype);\n        };\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class LRNGradProgram implements GPGPUProgram {\n  variableNames = ['inputImage', 'outputImage', 'dy'];\n  outputShape: number[] = [];\n  userCode: string;\n  depthRadius: number;\n  bias: number;\n  alpha: number;\n  beta: number;\n  depth: number;\n\n  constructor(\n      inputShape: number[], depthRadius: number, bias: number, alpha: number,\n      beta: number) {\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRNGrad, LRNGradAttrs, LRNGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {LRNGradProgram} from '../lrn_grad_gpu';\n\nexport const lrnGrad = (args: {\n  inputs: LRNGradInputs,\n  backend: MathBackendWebGL,\n  attrs: LRNGradAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x, y, dy} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig: KernelConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelFunc, Max, MaxAttrs, MaxInputs, TensorInfo} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {maxImplCPU} from '../kernel_utils/shared';\n\nimport {maxImpl} from './Max_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport function max(\n    args: {inputs: MaxInputs, backend: MathBackendWebGL, attrs: MaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {reductionIndices, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values as TypedArray;\n\n      const newShape: number[] = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues =\n          transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values as TypedArray;\n\n    const outValues =\n        maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n\n  return out;\n}\n\nexport const maxConfig: KernelConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function maxImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Maximum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {maximumImplCPU} from '../kernel_utils/shared';\n\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\n\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\n\nexport const maximumConfig: KernelConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\nimport {identity} from './Identity';\n\nexport function maxPool(args: {\n  inputs: MaxPoolInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({inputs: {x}, backend});\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3D, MaxPool3DAttrs, MaxPool3DInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3d(args: {\n  inputs: MaxPool3DInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dataFormat, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\n\nexport const maxPool3DConfig: KernelConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class MaxPool2DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n\nexport class MaxPool3DBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy', 'maxPos'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(convInfo: backend_util.Conv3DInfo) {\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n\n    const lastIndex =\n        effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool3DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool3DProgram} from '../pool_gpu';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations: [number, number, number] = [1, 1, 1];\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n\n  const maxPool3dPositionsProgram =\n      new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions =\n      backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\n\nexport const maxPoolGrad3DConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    util.assert(\n        x.shape.length === 4,\n        () => `Error in maxPool: input must be rank 4 but got rank ${\n            x.shape.length}.`);\n    const dilations: [number, number] = [1, 1];\n    util.assert(\n        backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n        () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n            `Got strides ${strides} and dilations '${dilations}'`);\n\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        dilations, pad);\n\n    const [result, indexes] =\n        maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Pool2DProgram} from '../pool_gpu';\n\nexport function maxPoolWithArgmaxImpl(\n    x: TensorInfo, includeBatchInIndex: boolean,\n    convInfo: backend_util.Conv2DInfo,\n    backend: MathBackendWebGL): TensorInfo[] {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as {} as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {reshape} from '../kernels/Reshape';\n\nexport function meanImpl(\n    x: TensorInfo, reduceShape: number[], outShape: number[],\n    backend: MathBackendWebGL): TensorInfo {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput =\n      reshape({inputs: {x}, attrs: {shape: [batchSize, inSize]}, backend});\n\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput =\n      reshape({inputs: {x: reduced}, attrs: {shape: outShape}, backend});\n\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  return reshapedOutput;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendWebGL, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Minimum} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_gpu';\nimport {CHECK_NAN_SNIPPET as CHECK_NAN_SNIPPET_PACKED} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {minimumImplCPU} from '../kernel_utils/shared';\n\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\n\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  ` +\n    CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\n\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\n\nexport const minimumConfig: KernelConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, MirrorPad, MirrorPadAttrs, MirrorPadInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MirrorPadProgram} from '../mirror_pad_gpu';\nimport {MirrorPadPackedProgram} from '../mirror_pad_packed_gpu';\n\nexport const mirrorPadKernelFunc: (params: {\n  inputs: MirrorPadInputs,\n  backend: MathBackendWebGL,\n  attrs: MirrorPadAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x} = inputs;\n  const {paddings, mode} = attrs;\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new MirrorPadPackedProgram(x.shape, paddings, mode) :\n      new MirrorPadProgram(x.shape, paddings, mode);\n\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n};\n\nexport const mirrorPadConfig: KernelConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Mod} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\n\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED,\n});\n\nexport const modConfig: KernelConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class MultinomialProgram implements GPGPUProgram {\n  variableNames = ['probs'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'seed', type: 'float' as UniformType}];\n\n  constructor(batchSize: number, numOutcomes: number, numSamples: number) {\n    this.outputShape = [batchSize, numSamples];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\n\nexport const realDiv = binaryKernelFunc(\n    {opSnippet: DIV, packedOpSnippet: DIV_PACKED, checkOutOfBounds: true});\n\nexport const realDivConfig: KernelConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sub} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {subImplCPU as cpuSub} from '../kernel_utils/shared';\n\nconst SUB = 'return a - b;';\n\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\n\nexport const subConfig: KernelConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {realDiv} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(args: {\n  inputs: SoftmaxInputs,\n  backend: MathBackendWebGL,\n  attrs: SoftmaxAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const axes = util.parseAxisParam([dim], logits.shape);\n\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitsReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitsReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumExpReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const res =\n      realDiv({inputs: {a: b, b: sumExpReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n\n  return res;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Neg, NegInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {negImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst NEG = `return -x;`;\n\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args: {inputs: NegInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] =\n        negImplCPU(xData.values as TypedArray, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV3, NonMaxSuppressionV3Attrs, NonMaxSuppressionV3Inputs, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV3(args: {\n  inputs: NonMaxSuppressionV3Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV3Attrs\n}) {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices} = nonMaxSuppressionV3Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n\n  return backend.makeTensorInfo(\n      [selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\n\nexport const nonMaxSuppressionV3Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV4, NonMaxSuppressionV4Attrs, NonMaxSuppressionV4Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV4(args: {\n  inputs: NonMaxSuppressionV4Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV4Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize} =\n      attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const {selectedIndices, validOutputs} = nonMaxSuppressionV4Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      padToMaxOutputSize);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n  ];\n}\n\nexport const nonMaxSuppressionV4Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendWebGL} from '../backend_webgl';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendWebGL,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  backend_util.warn(\n      'tf.nonMaxSuppression() in webgl locks the UI thread. ' +\n      'Call tf.nonMaxSuppressionAsync() instead');\n\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  const boxesVals = backend.readSync(boxes.dataId) as TypedArray;\n  const scoresVals = backend.readSync(scores.dataId) as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class OneHotProgram implements GPGPUProgram {\n  variableNames = ['indices'];\n  outputShape: number[];\n  userCode: string;\n\n  // Caching uniform location for speed.\n  seedLoc: WebGLUniformLocation;\n\n  constructor(\n      numIndices: number, depth: number, onValue: number, offValue: number) {\n    this.outputShape = [numIndices, depth];\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {OneHotProgram} from '../onehot_gpu';\nimport {reshape} from './Reshape';\n\nexport const oneHot = (args: {\n  inputs: OneHotInputs,\n  backend: MathBackendWebGL,\n  attrs: OneHotAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped =\n      reshape({inputs: {x: indices}, backend, attrs: {shape: [indicesSize]}});\n  const result = backend.runWebGLProgram(program, [reshaped], indices.dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n\n  const outShape = [...indices.shape, depth];\n  const out = reshape({inputs: {x: result}, backend, attrs: {shape: outShape}});\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, ZerosLike, ZerosLikeInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\n\nexport function zerosLike(\n    args: {inputs: ZerosLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = zerosLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\n\nexport const zerosLikeConfig: KernelConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({attrs: {shape: x.shape, dtype: x.dtype, value: 1}, backend});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pow} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET} from '../binaryop_packed_gpu';\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\n\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  ` +\n    CHECK_NAN_SNIPPET + `\n  return result;\n`;\n\nexport const pow =\n    binaryKernelFunc({opSnippet: POW, packedOpSnippet: POW_PACKED});\n\nexport const powConfig: KernelConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Range, RangeAttrs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {rangeImplCPU} from '../kernel_utils/shared';\n\nexport const range =\n    (args: {backend: MathBackendWebGL, attrs: RangeAttrs}): TensorInfo => {\n      const {backend, attrs} = args;\n      const {start, stop, step, dtype} = attrs;\n      const values = rangeImplCPU(start, stop, step, dtype);\n      return backend.makeTensorInfo([values.length], dtype, values);\n    };\n\nexport const rangeConfig: KernelConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Reciprocal} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst RECIPROCAL = `return 1.0 / x;`;\n\nexport const reciprocal = unaryKernelFunc({opSnippet: RECIPROCAL});\n\nexport const reciprocalConfig: KernelConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu =\n    unaryKernelFunc({opSnippet: RELU, packedOpSnippet: RELU_PACKED});\n\nexport const reluConfig: KernelConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Relu6} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {CHECK_NAN_SNIPPET} from '../unaryop_gpu';\n\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n\nexport const relu6 =\n    unaryKernelFunc({opSnippet: RELU6, packedOpSnippet: RELU6_PACKED});\n\nexport const relu6Config: KernelConfig = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6 as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeBilinearBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinearGrad, ResizeBilinearGradAttrs, ResizeBilinearGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearBackpropProgram} from '../resize_bilinear_backprop_gpu';\n\nexport function resizeBilinearGrad(args: {\n  inputs: ResizeBilinearGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeBilinearBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeBilinearGradConfig: KernelConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` +\n          `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeighborProgram} from '../resize_nearest_neighbor_gpu';\nimport {ResizeNearestNeighborPackedProgram} from '../resize_nearest_neighbor_packed_gpu';\n\nexport function resizeNearestNeighbor(args: {\n  inputs: ResizeNearestNeighborInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeNearestNeighborPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeNearestNeighborProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\n\nexport const resizeNearestNeighborConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeigborBackpropProgram implements GPGPUProgram {\n  variableNames = ['dy'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      dyShape: [number, number, number, number],\n      inputShape: [number, number, number, number], alignCorners: boolean) {\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth, ] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n\n    const effectiveXSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n      (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n\n    const effectiveYSize: [number, number] = [\n      (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n      (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeNearestNeighborGrad, ResizeNearestNeighborGradAttrs, ResizeNearestNeighborGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeNearestNeigborBackpropProgram} from '../resize_nearest_neighbor_backprop_gpu';\n\nexport function resizeNearestNeighborGrad(args: {\n  inputs: ResizeNearestNeighborGradInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeNearestNeighborGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images, dy} = inputs;\n  const {alignCorners} = attrs;\n\n  const program = new ResizeNearestNeigborBackpropProgram(\n      dy.shape as [number, number, number, number],\n      images.shape as [number, number, number, number], alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\n\nexport const resizeNearestNeighborGradConfig: KernelConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReverseProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = (i: number) => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ReversePackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(xShape: number[], axis: number[]) {\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(\n          `WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn =\n        `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n\n    function getR(channels: string[]): string {\n      return getChannel(channels);\n    }\n\n    function getG(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getB(channels: string[]): string {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getA(channels: string[]): string {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n\n    function getChannel(channels: string[]): string {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n\n    function getInCoord(i: number, channels1: string[]): string {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\nexport class RotateProgram implements GPGPUProgram {\n  variableNames = ['Image'];\n  outputShape: number[] = [];\n  userCode: string;\n  customUniforms = [{name: 'params', type: 'vec4' as UniformType}];\n  constructor(\n      imageShape: [number, number, number, number],\n      fillValue: number|[number, number, number]) {\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${\n        imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Tensor4D} from '@tensorflow/tfjs-core';\nimport {RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {RotateProgram} from '../rotate_gpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const program = new RotateProgram((image as Tensor4D).shape, fillValue);\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues =\n        [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(\n        program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Round} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\n\nexport const round = unaryKernelFunc({opSnippet: ROUND});\n\nexport const roundConfig: KernelConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Rsqrt} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {rsqrtImplCPU} from '../kernel_utils/shared';\n\nconst RSQRT = `return inversesqrt(x);`;\n\nexport const rsqrt =\n    unaryKernelFunc({opSnippet: RSQRT, cpuKernelImpl: rsqrtImplCPU});\n\nexport const rsqrtConfig: KernelConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ScatterProgram implements GPGPUProgram {\n  variableNames = ['updates', 'indices', 'defaultValue'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      updateSize: number, sliceDim: number, indicesRank: number,\n      updatesRank: number, strides: number[], shape: number[],\n      summingDupeIndex = true) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SelectProgram} from '../select_gpu';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  const program =\n      new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(\n      program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Selu} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\n\nexport const selu = unaryKernelFunc({opSnippet: SELU});\n\nexport const seluConfig: KernelConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sigmoid} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sigmoidImplCPU} from '../kernel_utils/shared';\n\nconst SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n\nexport const sigmoid = unaryKernelFunc({\n  opSnippet: SIGMOID,\n  packedOpSnippet: SIGMOID,\n  cpuKernelImpl: sigmoidImplCPU\n});\n\nexport const sigmoidConfig: KernelConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sign} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\n\nexport const sign = unaryKernelFunc({opSnippet: SIGN});\n\nexport const signConfig: KernelConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sin} from '@tensorflow/tfjs-core';\n\nimport {CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\n\nexport const sin = unaryKernelFunc({opSnippet: SIN});\n\nexport const sinConfig: KernelConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Sinh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\n\nexport const sinh = unaryKernelFunc({opSnippet: SINH});\n\nexport const sinhConfig: KernelConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\n\nexport const softplus = unaryKernelFunc({opSnippet: SOFTPLUS});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseFillEmptyRows, SparseFillEmptyRowsInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseFillEmptyRowsImplCPU} from '../kernel_utils/shared';\n\nexport function sparseFillEmptyRows(args: {\n  inputs: SparseFillEmptyRowsInputs,\n  backend: MathBackendWebGL\n}): [TensorInfo, TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {indices, values, denseShape, defaultValue} = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $values = backend.readSync(values.dataId) as TypedArray;\n  const $denseShape = backend.readSync(denseShape.dataId) as TypedArray;\n  const $defaultValue =\n      backend.readSync(defaultValue.dataId)[0] as number;\n\n  const [outputIndices, outputIndicesShape, outputValues,\n         emptyRowIndicator, reverseIndexMap] =\n      sparseFillEmptyRowsImplCPU(\n          $indices, indices.shape, indices.dtype, $values, values.dtype,\n          $denseShape, $defaultValue);\n  return [\n    backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n    backend.makeTensorInfo(\n        [outputIndicesShape[0]], values.dtype, outputValues),\n    backend.makeTensorInfo(\n        [emptyRowIndicator.length], 'bool',\n        new Uint8Array(\n            emptyRowIndicator.map((value: boolean) => Number(value)))),\n    backend.makeTensorInfo(\n        [reverseIndexMap.length], indices.dtype,\n        new Int32Array(reverseIndexMap)),\n  ];\n}\n\nexport const sparseFillEmptyRowsConfig: KernelConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentMean, SparseSegmentMeanInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentMean(\n    args: {inputs: SparseSegmentMeanInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentMeanConfig: KernelConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendWebGL,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n\n  const sumDupeIndices = false;\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, sparseIndices.shape.length,\n      sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n\n  const res = backend.runWebGLProgram(\n      program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: outputShape}});\n\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SplitV, SplitVAttrs, SplitVInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {slice} from './Slice';\n\nexport function splitV(\n    args:\n        {inputs: SplitVInputs, backend: MathBackendWebGL, attrs: SplitVAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {numOrSizeSplits, axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT =\n        slice({inputs: {x}, backend, attrs: {begin, size: sliceSize}});\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\n\nexport const splitVConfig: KernelConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Sqrt} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\nimport {sqrtImplCPU} from '../kernel_utils/shared';\n\nconst SQRT = `return sqrt(x);`;\n\nexport const sqrt = unaryKernelFunc(\n    {opSnippet: SQRT, packedOpSnippet: SQRT, cpuKernelImpl: sqrtImplCPU});\n\nexport const sqrtConfig: KernelConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Square} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARE = `return x * x;`;\n\nexport const square = unaryKernelFunc({opSnippet: SQUARE});\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SquaredDifference} from '@tensorflow/tfjs-core';\n\nimport {binaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\n\nexport const squaredDifference = binaryKernelFunc(\n    {opSnippet: SQUARED_DIFFERENCE, packedOpSnippet: SQUARED_DIFFERENCE});\n\nexport const squaredDifferenceConfig: KernelConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Step, StepAttrs, TensorInfo, UnaryInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {CHECK_NAN_SNIPPET, UnaryOpProgram} from '../unaryop_gpu';\n\nexport function step(\n    {inputs, attrs, backend}:\n        {inputs: UnaryInputs, attrs: StepAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {x} = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const stepConfig: KernelConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, Rank, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stridedSliceImplCPU} from '../kernel_utils/shared';\nimport {StridedSliceProgram} from '../strided_slice_gpu';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendWebGL,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId) as TypedArray;\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values) as TensorBuffer<Rank>;\n      const resultValues =\n          stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program =\n          new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: finalShape}});\n\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringSplit, StringSplitAttrs, StringSplitInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringSplitImplCPU} from '../kernel_utils/shared';\n\nexport function stringSplit(args: {\n  inputs: StringSplitInputs,\n  backend: MathBackendWebGL,\n  attrs: StringSplitAttrs\n}): [TensorInfo, TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {skipEmpty} = attrs;\n  const {input, delimiter} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(\n        `Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n  const $delimiter = backend.readSync(delimiter.dataId)[0] as Uint8Array;\n\n  const [indices, values, shape] =\n      stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [\n    backend.makeTensorInfo([outputSize, 2], 'int32', indices),\n    backend.makeTensorInfo([outputSize], 'string', values),\n    backend.makeTensorInfo([2], 'int32', new Int32Array(shape))\n  ];\n}\n\nexport const stringSplitConfig: KernelConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringToHashBucketFastImplCPU} from '../kernel_utils/shared';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendWebGL,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.readSync(input.dataId) as Uint8Array[];\n\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tan} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TAN = `return tan(x);`;\n\nexport const tan = unaryKernelFunc({opSnippet: TAN});\n\nexport const tanConfig: KernelConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Tanh} from '@tensorflow/tfjs-core';\nimport {unaryKernelFunc} from '../kernel_utils/kernel_funcs_utils';\n\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\n\nexport const tanh = unaryKernelFunc({opSnippet: TANH});\n\nexport const tanhConfig: KernelConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh,\n};\n","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {UniformType} from './shader_compiler';\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK.\n  // |firstPass|indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'negativeInf', type: 'float' as UniformType},\n    {name: 'dir', type: 'int' as UniformType},\n    {name: 'inc', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\n\nexport class MergeProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  // |n| Size of the original input of TopK\n  // |firstPass| indicates if this is the first time swap is being used which\n  // means no indices input containing the top K is present yet.\n  // |k| Top k elements desired\n  customUniforms = [\n    {name: 'n', type: 'int' as UniformType},\n    {name: 'firstPass', type: 'int' as UniformType},\n    {name: 'k', type: 'int' as UniformType}\n  ];\n\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape: number[]) {\n    this.outputShape = shape;\n\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {topKImplCPU} from '../kernel_utils/shared';\nimport {MergeProgram, SwapProgram} from '../top_k_gpu';\nimport {fill} from './Fill';\nimport {gatherV2} from './GatherV2';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nfunction disposeIntermediateTensorInfoOrNull(\n    backend: MathBackendWebGL, tensorInfo: TensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\n\nfunction roundUpToPow2(num: number) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendWebGL, attrs: TopKAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD =\n      env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD =\n      env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n\n  if (backend.shouldExecuteOnCPU([x]) ||\n      lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD ||\n      k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const [allTopKVals, allTopKIndices] =\n        topKImplCPU(xVals, xShape, x.dtype as NumericDataType, k, sorted);\n\n    return [\n      backend.makeTensorInfo(\n          allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n      backend.makeTensorInfo(\n          allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n  }\n\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [\n      backend.makeTensorInfo(xShape, x.dtype, []),\n      backend.makeTensorInfo(xShape, 'int32', [])\n    ];\n  }\n\n  if (lastDim === 1 /* firstPass */) {\n    return [\n      x, fill({attrs: {shape: xShape, dtype: 'int32', value: 0}, backend})\n    ];\n  }\n\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape(\n      {inputs: {x: xUnPacked}, attrs: {shape: [batch, lastDim]}, backend});\n\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices: TensorInfo = null;\n\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n\n  const runSwap = (dir: number, inc: number, shape: number[]) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues =\n        [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices =\n        backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice(\n      {inputs: {x: indices}, backend, attrs: {begin: 0, size: [batch, k]}});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  // Gather values on last dimension\n  let values = gatherV2(\n      {inputs: {x: x2D, indices}, backend, attrs: {axis: 1, batchDims: 1}});\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n\n  prevIndices = indices;\n  indices = reshape({inputs: {x: indices}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n\n  const prevValues = values;\n  values = reshape({inputs: {x: values}, attrs: {shape: newShape}, backend});\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n\n  return [values, indices];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class TransformProgram implements GPGPUProgram {\n  variableNames = ['Image', 'Transforms'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      imageHeight: number, imageWidth: number,\n      interpolation: 'nearest'|'bilinear',\n      fillMode: 'constant'|'reflect'|'wrap'|'nearest', fillValue: number,\n      outShape: [number, number, number, number]) {\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${\n        imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transform, TransformAttrs, TransformInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TransformProgram} from '../transform_gpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  backend: MathBackendWebGL,\n  attrs: TransformAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape =\n      [batch, outHeight, outWidth,\n       numChannels] as [number, number, number, number];\n\n  const program = new TransformProgram(\n      imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {uniqueImplCPU} from '../kernel_utils/shared';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function unique(\n    args:\n        {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendWebGL}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  // For now, always forward calculation to the CPU backend.\n  console.warn(\n      'WARNING: ',\n      'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {outputValues, outputShape, indices} =\n      uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique as {} as KernelFunc,\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class SegmentOpProgram implements GPGPUProgram {\n  variableNames = ['x', 'segmentIds'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      segOpInfo: backend_util.segment_util.SegOpInfo,\n      segOpType: 'unsortedSegmentSum') {\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {KernelConfig, registerKernel} from '@tensorflow/tfjs-core';\n\nimport {_fusedMatMulConfig} from './kernels/_FusedMatMul';\nimport {absConfig} from './kernels/Abs';\nimport {acosConfig} from './kernels/Acos';\nimport {acoshConfig} from './kernels/Acosh';\nimport {addConfig} from './kernels/Add';\nimport {addNConfig} from './kernels/AddN';\nimport {allConfig} from './kernels/All';\nimport {anyConfig} from './kernels/Any';\nimport {argMaxConfig} from './kernels/ArgMax';\nimport {argMinConfig} from './kernels/ArgMin';\nimport {asinConfig} from './kernels/Asin';\nimport {asinhConfig} from './kernels/Asinh';\nimport {atanConfig} from './kernels/Atan';\nimport {atan2Config} from './kernels/Atan2';\nimport {atanhConfig} from './kernels/Atanh';\nimport {avgPoolConfig} from './kernels/AvgPool';\nimport {avgPool3DConfig} from './kernels/AvgPool3D';\nimport {avgPoolGrad3DConfig} from './kernels/AvgPool3DGrad';\nimport {avgPoolGradConfig} from './kernels/AvgPoolGrad';\nimport {batchMatMulConfig} from './kernels/BatchMatMul';\nimport {batchNormConfig} from './kernels/BatchNorm';\nimport {batchToSpaceNDConfig} from './kernels/BatchToSpaceND';\nimport {bincountConfig} from './kernels/Bincount';\nimport {broadcastArgsConfig} from './kernels/BroadcastArgs';\nimport {castConfig} from './kernels/Cast';\nimport {ceilConfig} from './kernels/Ceil';\nimport {clipByValueConfig} from './kernels/ClipByValue';\nimport {complexConfig} from './kernels/Complex';\nimport {complexAbsConfig} from './kernels/ComplexAbs';\nimport {concatConfig} from './kernels/Concat';\nimport {conv2DConfig} from './kernels/Conv2D';\nimport {conv2DBackpropFilterConfig} from './kernels/Conv2DBackpropFilter';\nimport {conv2DBackpropInputConfig} from './kernels/Conv2DBackpropInput';\nimport {conv3DConfig} from './kernels/Conv3D';\nimport {conv3DBackpropFilterV2Config} from './kernels/Conv3DBackpropFilterV2';\nimport {conv3DBackpropInputConfig} from './kernels/Conv3DBackpropInputV2';\nimport {cosConfig} from './kernels/Cos';\nimport {coshConfig} from './kernels/Cosh';\nimport {cropAndResizeConfig} from './kernels/CropAndResize';\nimport {cumsumConfig} from './kernels/Cumsum';\nimport {denseBincountConfig} from './kernels/DenseBincount';\nimport {depthToSpaceConfig} from './kernels/DepthToSpace';\nimport {depthwiseConv2dNativeConfig} from './kernels/DepthwiseConv2dNative';\nimport {depthwiseConv2dNativeBackpropFilterConfig} from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport {depthwiseConv2dNativeBackpropInputConfig} from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport {diagConfig} from './kernels/Diag';\nimport {dilation2DConfig} from './kernels/Dilation2D';\nimport {einsumConfig} from './kernels/Einsum';\nimport {eluConfig} from './kernels/Elu';\nimport {eluGradConfig} from './kernels/EluGrad';\nimport {equalConfig} from './kernels/Equal';\nimport {erfConfig} from './kernels/Erf';\nimport {expConfig} from './kernels/Exp';\nimport {expandDimsConfig} from './kernels/ExpandDims';\nimport {expm1Config} from './kernels/Expm1';\nimport {fftConfig} from './kernels/FFT';\nimport {fillConfig} from './kernels/Fill';\nimport {flipLeftRightConfig} from './kernels/FlipLeftRight';\nimport {floorConfig} from './kernels/Floor';\nimport {floorDivConfig} from './kernels/FloorDiv';\nimport {fromPixelsConfig} from './kernels/FromPixels';\nimport {fusedConv2DConfig} from './kernels/FusedConv2D';\nimport {fusedDepthwiseConv2DConfig} from './kernels/FusedDepthwiseConv2D';\nimport {gatherNdConfig} from './kernels/GatherNd';\nimport {gatherV2Config} from './kernels/GatherV2';\nimport {greaterConfig} from './kernels/Greater';\nimport {greaterEqualConfig} from './kernels/GreaterEqual';\nimport {identityConfig} from './kernels/Identity';\nimport {ifftConfig} from './kernels/IFFT';\nimport {imagConfig} from './kernels/Imag';\nimport {isFiniteConfig} from './kernels/IsFinite';\nimport {isInfConfig} from './kernels/IsInf';\nimport {isNaNConfig} from './kernels/IsNaN';\nimport {leakyReluConfig} from './kernels/LeakyRelu';\nimport {lessConfig} from './kernels/Less';\nimport {lessEqualConfig} from './kernels/LessEqual';\nimport {linSpaceConfig} from './kernels/LinSpace';\nimport {logConfig} from './kernels/Log';\nimport {log1pConfig} from './kernels/Log1p';\nimport {logicalAndConfig} from './kernels/LogicalAnd';\nimport {logicalNotConfig} from './kernels/LogicalNot';\nimport {logicalOrConfig} from './kernels/LogicalOr';\nimport {LRNConfig} from './kernels/LRN';\nimport {LRNGradConfig} from './kernels/LRNGrad';\nimport {maxConfig} from './kernels/Max';\nimport {maximumConfig} from './kernels/Maximum';\nimport {maxPoolConfig} from './kernels/MaxPool';\nimport {maxPool3DConfig} from './kernels/MaxPool3D';\nimport {maxPoolGrad3DConfig} from './kernels/MaxPool3DGrad';\nimport {maxPoolGradConfig} from './kernels/MaxPoolGrad';\nimport {maxPoolWithArgmaxConfig} from './kernels/MaxPoolWithArgmax';\nimport {meanConfig} from './kernels/Mean';\nimport {minConfig} from './kernels/Min';\nimport {minimumConfig} from './kernels/Minimum';\nimport {mirrorPadConfig} from './kernels/MirrorPad';\nimport {modConfig} from './kernels/Mod';\nimport {multinomialConfig} from './kernels/Multinomial';\nimport {multiplyConfig} from './kernels/Multiply';\nimport {negConfig} from './kernels/Neg';\nimport {nonMaxSuppressionV3Config} from './kernels/NonMaxSuppressionV3';\nimport {nonMaxSuppressionV4Config} from './kernels/NonMaxSuppressionV4';\nimport {nonMaxSuppressionV5Config} from './kernels/NonMaxSuppressionV5';\nimport {notEqualConfig} from './kernels/NotEqual';\nimport {oneHotConfig} from './kernels/OneHot';\nimport {onesLikeConfig} from './kernels/OnesLike';\nimport {packConfig} from './kernels/Pack';\nimport {padV2Config} from './kernels/PadV2';\nimport {powConfig} from './kernels/Pow';\nimport {preluConfig} from './kernels/Prelu';\nimport {prodConfig} from './kernels/Prod';\nimport {rangeConfig} from './kernels/Range';\nimport {realConfig} from './kernels/Real';\nimport {realDivConfig} from './kernels/RealDiv';\nimport {reciprocalConfig} from './kernels/Reciprocal';\nimport {reluConfig} from './kernels/Relu';\nimport {relu6Config} from './kernels/Relu6';\nimport {reshapeConfig} from './kernels/Reshape';\nimport {resizeBilinearConfig} from './kernels/ResizeBilinear';\nimport {resizeBilinearGradConfig} from './kernels/ResizeBilinearGrad';\nimport {resizeNearestNeighborConfig} from './kernels/ResizeNearestNeighbor';\nimport {resizeNearestNeighborGradConfig} from './kernels/ResizeNearestNeighborGrad';\nimport {reverseConfig} from './kernels/Reverse';\nimport {rotateWithOffsetConfig} from './kernels/RotateWithOffset';\nimport {roundConfig} from './kernels/Round';\nimport {rsqrtConfig} from './kernels/Rsqrt';\nimport {scatterNdConfig} from './kernels/ScatterNd';\nimport {selectConfig} from './kernels/Select';\nimport {seluConfig} from './kernels/Selu';\nimport {sigmoidConfig} from './kernels/Sigmoid';\nimport {signConfig} from './kernels/Sign';\nimport {sinConfig} from './kernels/Sin';\nimport {sinhConfig} from './kernels/Sinh';\nimport {sliceConfig} from './kernels/Slice';\nimport {softmaxConfig} from './kernels/Softmax';\nimport {softplusConfig} from './kernels/Softplus';\nimport {spaceToBatchNDConfig} from './kernels/SpaceToBatchND';\nimport {sparseFillEmptyRowsConfig} from './kernels/SparseFillEmptyRows';\nimport {sparseReshapeConfig} from './kernels/SparseReshape';\nimport {sparseSegmentMeanConfig} from './kernels/SparseSegmentMean';\nimport {sparseSegmentSumConfig} from './kernels/SparseSegmentSum';\nimport {sparseToDenseConfig} from './kernels/SparseToDense';\nimport {splitVConfig} from './kernels/SplitV';\nimport {sqrtConfig} from './kernels/Sqrt';\nimport {squareConfig} from './kernels/Square';\nimport {squaredDifferenceConfig} from './kernels/SquaredDifference';\nimport {stepConfig} from './kernels/Step';\nimport {stridedSliceConfig} from './kernels/StridedSlice';\nimport {stringNGramsConfig} from './kernels/StringNGrams';\nimport {stringSplitConfig} from './kernels/StringSplit';\nimport {stringToHashBucketFastConfig} from './kernels/StringToHashBucketFast';\nimport {subConfig} from './kernels/Sub';\nimport {sumConfig} from './kernels/Sum';\nimport {tanConfig} from './kernels/Tan';\nimport {tanhConfig} from './kernels/Tanh';\nimport {tileConfig} from './kernels/Tile';\nimport {topKConfig} from './kernels/TopK';\nimport {transformConfig} from './kernels/Transform';\nimport {transposeConfig} from './kernels/Transpose';\nimport {uniqueConfig} from './kernels/Unique';\nimport {unpackConfig} from './kernels/Unpack';\nimport {unsortedSegmentSumConfig} from './kernels/UnsortedSegmentSum';\nimport {zerosLikeConfig} from './kernels/ZerosLike';\n\n// List all kernel configs here\nconst kernelConfigs: KernelConfig[] = [\n  LRNConfig,\n  LRNGradConfig,\n  _fusedMatMulConfig,\n  absConfig,\n  acosConfig,\n  acoshConfig,\n  addConfig,\n  addNConfig,\n  allConfig,\n  anyConfig,\n  argMaxConfig,\n  argMinConfig,\n  asinConfig,\n  asinhConfig,\n  atan2Config,\n  atanConfig,\n  atanhConfig,\n  avgPool3DConfig,\n  avgPoolConfig,\n  avgPoolGrad3DConfig,\n  avgPoolGradConfig,\n  batchMatMulConfig,\n  batchNormConfig,\n  batchToSpaceNDConfig,\n  bincountConfig,\n  broadcastArgsConfig,\n  castConfig,\n  ceilConfig,\n  clipByValueConfig,\n  complexAbsConfig,\n  complexConfig,\n  concatConfig,\n  conv2DBackpropFilterConfig,\n  conv2DBackpropInputConfig,\n  conv2DConfig,\n  conv3DBackpropFilterV2Config,\n  conv3DBackpropInputConfig,\n  conv3DConfig,\n  cosConfig,\n  coshConfig,\n  cropAndResizeConfig,\n  cumsumConfig,\n  denseBincountConfig,\n  depthToSpaceConfig,\n  depthwiseConv2dNativeBackpropFilterConfig,\n  depthwiseConv2dNativeBackpropInputConfig,\n  depthwiseConv2dNativeConfig,\n  diagConfig,\n  dilation2DConfig,\n  einsumConfig,\n  eluConfig,\n  eluGradConfig,\n  equalConfig,\n  erfConfig,\n  expConfig,\n  expandDimsConfig,\n  expm1Config,\n  fftConfig,\n  fillConfig,\n  flipLeftRightConfig,\n  floorConfig,\n  floorDivConfig,\n  fromPixelsConfig,\n  fusedConv2DConfig,\n  fusedDepthwiseConv2DConfig,\n  gatherNdConfig,\n  gatherV2Config,\n  greaterConfig,\n  greaterEqualConfig,\n  identityConfig,\n  ifftConfig,\n  imagConfig,\n  isFiniteConfig,\n  isInfConfig,\n  isNaNConfig,\n  leakyReluConfig,\n  lessConfig,\n  lessEqualConfig,\n  linSpaceConfig,\n  log1pConfig,\n  logConfig,\n  logicalAndConfig,\n  logicalNotConfig,\n  logicalOrConfig,\n  maxConfig,\n  maxPool3DConfig,\n  maxPoolConfig,\n  maxPoolGrad3DConfig,\n  maxPoolGradConfig,\n  maxPoolWithArgmaxConfig,\n  maximumConfig,\n  meanConfig,\n  minConfig,\n  minimumConfig,\n  mirrorPadConfig,\n  modConfig,\n  multinomialConfig,\n  multiplyConfig,\n  negConfig,\n  nonMaxSuppressionV3Config,\n  nonMaxSuppressionV4Config,\n  nonMaxSuppressionV5Config,\n  notEqualConfig,\n  oneHotConfig,\n  onesLikeConfig,\n  packConfig,\n  padV2Config,\n  powConfig,\n  preluConfig,\n  prodConfig,\n  rangeConfig,\n  realConfig,\n  realDivConfig,\n  reciprocalConfig,\n  relu6Config,\n  reluConfig,\n  reshapeConfig,\n  resizeBilinearConfig,\n  resizeBilinearGradConfig,\n  resizeNearestNeighborConfig,\n  resizeNearestNeighborGradConfig,\n  reverseConfig,\n  rotateWithOffsetConfig,\n  roundConfig,\n  rsqrtConfig,\n  scatterNdConfig,\n  selectConfig,\n  seluConfig,\n  sigmoidConfig,\n  signConfig,\n  sinConfig,\n  sinhConfig,\n  sliceConfig,\n  softmaxConfig,\n  softplusConfig,\n  spaceToBatchNDConfig,\n  sparseFillEmptyRowsConfig,\n  sparseReshapeConfig,\n  sparseSegmentMeanConfig,\n  sparseSegmentSumConfig,\n  sparseToDenseConfig,\n  splitVConfig,\n  sqrtConfig,\n  squareConfig,\n  squaredDifferenceConfig,\n  stepConfig,\n  stridedSliceConfig,\n  stringNGramsConfig,\n  stringSplitConfig,\n  stringToHashBucketFastConfig,\n  subConfig,\n  sumConfig,\n  tanConfig,\n  tanhConfig,\n  tileConfig,\n  topKConfig,\n  transformConfig,\n  transposeConfig,\n  uniqueConfig,\n  unpackConfig,\n  unsortedSegmentSumConfig,\n  zerosLikeConfig\n];\n\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '3.11.0';\nexport {version};\n"],"names":["contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","setWebGLContext","webGLVersion","gl","getWebGLContext","newCtx","Error","canvas","OffscreenCanvas","document","createElement","createCanvas","addEventListener","ev","preventDefault","getContext","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getDenseTexShape","shape","size","util","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getPackedMatrixTextureShapeWidthHeight","max","getTextureConfig","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","env","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA","HALF_FLOAT_OES","callAndCheck","func","returnValue","getBool","error","getError","NO_ERROR","getWebGLErrorMessage","checkWebGLError","canBeRepresented","num","abs","status","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL","getExtensionOrThrow","extensionName","throwIfNull","getExtension","createVertexShader","vertexShaderSource","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","createFragmentShader","fragmentShaderSource","fragmentShader","FRAGMENT_SHADER","shaderInfoLog","lineNumberRegexResult","lineNumberRegex","exec","lineNumber","shaderLines","split","pad","length","toString","linesWithLineNumbers","map","line","rightPad","maxLineLength","i","beforeErrorLines","slice","errorLine","afterErrorLines","join","logShaderSourceAndInfoLog","createProgram","linkProgram","program","getProgramParameter","LINK_STATUS","getProgramInfoLog","validateProgram","VALIDATE_STATUS","createStaticVertexBuffer","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","createStaticIndexBuffer","ELEMENT_ARRAY_BUFFER","createTexture","validateTextureSize","width","height","maxTextureSize","createFramebuffer","bindVertexBufferToProgramAttribute","attribute","arrayEntriesPerItem","itemStrideInBytes","itemOffsetInBytes","loc","getAttribLocation","vertexAttribPointer","enableVertexAttribArray","bindTextureUnit","texture","textureUnit","validateTextureUnit","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","getProgramUniformLocationOrThrow","uniformName","getUniformLocation","getProgramUniformLocation","bindTextureToProgramUniformSampler","uniformSamplerLocation","uniform1i","bindColorTextureToFramebuffer","framebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","unbindColorTextureFromFramebuffer","validateFramebuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","getFramebufferErrorMessage","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_UNSUPPORTED","returnTOrNull","failureMessage","tOrNull","maxTextureUnit","MAX_COMBINED_TEXTURE_IMAGE_UNITS","glTextureUnit","getBatchDim","dimsToSkip","getRowsCols","getShapeAs3D","shapeAs3D","getTextureShapeFromLogicalShape","logShape","isPacked","maxTexSize","d","nearestLargerEven","squeezeResult","squeezeShape","newShape","batchDim","cols","isEven","n","isReshapeFree","shape1","shape2","arraysEqual","shape1Cols","shape2Cols","MAX_TEXTURE_SIZE","MAX_TEXTURES_IN_SHADER","getWebGLMaxTextureSize","getParameter","getMaxTexturesInShader","MAX_TEXTURE_IMAGE_UNITS","min","getWebGLDisjointQueryTimerVersion","queryTimerVersion","hasExtension","isWebGLVersionEnabled","e","isCapableOfRenderingToFloatTexture","createFloatTextureAndBindToFramebuffer","isDownloadFloatTextureEnabled","COLOR_BUFFER_HALF_FLOAT","texConfig","texImage2D","frameBuffer","isFrameBufferComplete","deleteTexture","deleteFramebuffer","createHalfFloatTextureAndBindToFramebuffer","isWebGLFenceEnabled","fenceSync","assertNotComplex","tensor","opName","Array","isArray","forEach","t","assert","dtype","viewport","scissor","ENV","getGlslDifferences","version","varyingVs","varyingFs","texture2D","output","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","getLogicalCoordinatesFromFlatIndex","coords","index","strides","computeStrides","stride","getOutputLogicalCoordinatesFromFlatIndexByUniform","_","getLogicalCoordinatesFromFlatIndexByUniform","variableName","indicesArr","numCoords","symbolicallyComputeStrides","getFlatIndexFrom3D","registerFlag","get","device_util","isMobile","threshold","ENCODE_FLOAT_SNIPPET","getBroadcastDims","backend_util","makeShader","inputsInfo","outputShape","prefixSnippets","x","shapeInfo","logicalShape","isUniform","push","name","enableShapeUniforms","uniformShape","getUniformInfoFromShape","packedInputs","texShape","customUniforms","type","arrayIndex","inputPrefixSnippet","inputSamplingSnippet","inInfo","outShapeInfo","usesPackedTextures","res","getPackedSamplerFromInInfo","getSamplerFromInInfo","inShape","outShape","inputInfo","texName","texFuncSnippet","charAt","toUpperCase","funcName","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","isInputScalar","isOutputScalar","indexOf","getPackedSamplerAtOutputCoords","outTexShape","inTexShape","flatOffset","getSamplerAtOutputCoords","getInputSamplingSnippet","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","getShaderPrefix","getOutputScalarCoords","packedTexShape","getOutputPacked1DCoords","texelsInLogicalRow","getOutputPacked2DCoords","texelsInBatch","getOutputPacked3DCoords","texelsInBatchN","batches","b","getOutputPackedNDCoords","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutput1DCoords","getOutput2DCoords","shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform","coordsFromIndexSnippet","shader_util.getLogicalCoordinatesFromFlatIndex","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","userCode","texNumR","texNumC","offset","getFlatOffsetUniformName","tNumR","tNumC","getSamplerScalar","getUniformSampler","getSampler1D","keptDims","squeezedShape","params","squeezeInputInfo","getSqueezedParams","getSampler2D","stride0","stride1","getSampler3D","stride2","stride2Str","stride1Str","stride0Str","getSampler4D","stride3","getSampler5D","stride4","getSampler6D","getPackedSamplerScalar","getPackedSampler1D","valuesPerRow","getPackedSampler2D","getPackedSampler3D","rank","getPackedSamplerND","inSize","useSqueezePackedShape","useSqueezeShape","newInputInfo","JSON","parse","stringify","validateBinaryAndProgram","shapeInfos","inputs","shapeA","input","shapeB","texShapeA","texShapeB","texData","useShapeUniforms","DecodeMatrixProgram","constructor","this","DENSE","DecodeMatrixPackedProgram","EncodeFloatProgram","DOWNLOAD","EncodeFloatPackedProgram","EncodeMatrixProgram","inputIsUnsignedByte","shader_util.getFlatIndexFrom3D","EncodeMatrixPackedProgram","mainLoop","row","col","channel","webgl_util.createVertexShader","createVertexBuffer","webgl_util.createStaticVertexBuffer","Float32Array","createIndexBuffer","webgl_util.createStaticIndexBuffer","Uint16Array","createAndConfigureTexture","internalFormat","textureFormat","textureType","webgl_util.validateTextureSize","webgl_util.createTexture","tex2d","webgl_util.callAndCheck","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getInternalFormatForFloat32MatrixTexture","textureConfig","createFloat32MatrixTexture","tex_util.getUnpackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16MatrixTexture","createFloat16MatrixTexture","getInternalFormatForUnsignedBytesMatrixTexture","createUnsignedBytesMatrixTexture","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","createPackedMatrixTexture","tex_util.getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","vertexBuffer","webgl_util.bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","dataForUpload","texelDataType","Uint8Array","set","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","PIXEL_PACK_BUFFER","bufferSizeBytes","bytesPerFloat","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","downloadPackedMatrixFromBuffer","batch","physicalRows","physicalCols","tex_util.getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA","GPGPUContext","glVersion","COLOR_BUFFER_FLOAT","TEXTURE_FLOAT","TEXTURE_HALF_FLOAT","textureFloatExtension","webgl_util.getExtensionOrThrow","webgl_util.hasExtension","colorBufferFloatExtension","colorBufferHalfFloatExtension","gpgpu_util.createVertexBuffer","indexBuffer","gpgpu_util.createIndexBuffer","webgl_util.createFramebuffer","tex_util.getTextureConfig","debug","dispose","disposed","warn","outputTexture","finish","deleteBuffer","throwIfDisposed","gpgpu_util.createFloat32MatrixTexture","gpgpu_util.createFloat16MatrixTexture","gpgpu_util.createUnsignedBytesMatrixTexture","gpgpu_util.uploadPixelDataToTexture","gpgpu_util.uploadDenseMatrixToTexture","gpgpu_util.createFloat16PackedMatrixTexture","gpgpu_util.createPackedMatrixTexture","deleteMatrixTexture","webgl_util.unbindColorTextureFromFramebuffer","downloadMatrixDriver","gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture","gpgpu_util.downloadPackedMatrixFromBuffer","gpgpu_util.downloadFloat32MatrixFromBuffer","createBufferFromTexture","bindTextureToFrameBuffer","result","gpgpu_util.createBufferFromOutputTexture","unbindTextureToFrameBuffer","createAndWaitForFence","fenceContext","createFence","pollFence","query","isFencePassed","sync","SYNC_GPU_COMMANDS_COMPLETE","flush","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","beginQuery","endQuery","isQueryAvailable","downloadMatrixFromPackedTexture","gpgpu_util.downloadMatrixFromPackedOutputTexture","webgl_util.createFragmentShader","gpgpu_util.createVertexShader","webgl_util.createProgram","attachShader","webgl_util.linkProgram","webgl_util.validateProgram","vertexAttrsAreBound","setProgram","gpgpu_util.bindVertexProgramAttributeStreams","deleteProgram","useProgram","shouldThrow","webgl_util.getProgramUniformLocationOrThrow","webgl_util.getProgramUniformLocation","getAttributeLocation","getUniformLocationNoThrow","setInputMatrixTexture","inputMatrixTexture","uniformLocation","throwIfNoProgram","webgl_util.bindTextureToProgramUniformSampler","setOutputMatrixTexture","outputMatrixTexture","setOutputMatrixTextureDriver","setOutputPackedMatrixTexture","outputPackedMatrixTexture","setOutputMatrixWriteRegion","startRow","numRows","startColumn","numColumns","setOutputMatrixWriteRegionDriver","setOutputPackedMatrixWriteRegion","debugValidate","webgl_util.validateFramebuffer","executeProgram","drawElements","TRIANGLES","UNSIGNED_SHORT","blockUntilAllProgramsCompleted","getQueryTimerExtension","disjointQueryTimerExtension","getQueryTimerExtensionWebGL2","getQueryTimerExtensionWebGL1","ext","createQuery","TIME_ELAPSED_EXT","createQueryEXT","beginQueryEXT","endQueryEXT","waitForQueryAndGetTime","repeatedTry","getQueryTime","getQueryParameter","QUERY_RESULT","getQueryObjectEXT","QUERY_RESULT_EXT","available","QUERY_RESULT_AVAILABLE","disjoint","GPU_DISJOINT_EXT","QUERY_RESULT_AVAILABLE_EXT","Promise","resolve","addItemToPoll","pollItems","arr","linearSearchLastTrue","itemsToPoll","isDoneFn","resolveFn","webgl_util.bindColorTextureToFramebuffer","downloadAndDecode","outputMatrixTextureMaybePacked","y","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","assertAndGetBroadcastShape","resultRank","resultStrides","resultSize","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","bBroadcastDims","indexToLoc","aLoc","aIndex","locToIndex","bLoc","bIndex","addImpl","a","createSimpleUnaryImpl","values","attrs","newValues","ceilImpl","xi","equalImpl","expImpl","exp","expm1Impl","expm1","floorImpl","floor","greaterImpl","greaterEqualImpl","lessImpl","lessEqualImpl","logImpl","maximumImpl","aValue","bValue","minimumImpl","multiplyImpl","notEqualImpl","rsqrtImpl","sqrt","sigmoidImpl","sqrtImpl","squaredDifferenceImpl","diff","StringNGramsOp","separator","nGramWidths","leftPad","padWidth","preserveShortSequences","encodeString","preserveShort","getPadWidth","nGramWidth","getNumNGrams","createNGrams","splitIndex","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","nGram","nextNGramIndex","appendToNGram","str","value","compute","splits","inputDataSize","splitsSize","prevSplit","validSplits","numBatchItems","nGramsSplits","getArrayFromDType","empty","nGrams","outputStartIdx","dataLength","delimiters","skipEmpty","subarray","delimiter","f","token","tokenStart","subImpl","comparePair","valueDiff","select","array","k","left","right","z","sd","sign","j","swap","vals","resultValues","xVals","weightsVals","weightsDtype","weightsShape","weightsSize","outVals","makeZerosTypedArray","xBuf","weightsBuf","binaryOutput","numCols","outBuf","simplyConcat","colOffset","decodedData","fromUint8ToStringArray","tIdx","resIdx","indicesData","paramsBuf","numSlices","sliceRank","sliceSize","paramsShape","paramsSize","flattenIndex","dim","indicesBuf","flattenOutputShape","originalLoc","batchIdx","indicesIdx","indicesIndex","originalIndex","start","stop","step","reduceSize","Number","isNaN","xShape","xDtype","minusOne","createScalarValue","reductionAxes","reduceShape","computeOutAndReduceShapes","outDtype","upcastType","prod","numElements","begin","isContinous","slice_util","isSliceContinous","xStrides","computeFlatOffset","inBuf","outLoc","inLoc","idx","fromStringArrayToUint8","indices","indicesShape","indicesDType","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","reverseIndexMap","rowsAreOrdered","lastIndicesRow","csrOffset","fill","allRowsFull","rowEmpty","outputIndices","outputValues","fullIndicesCount","filledCount","outputI","startingIndex","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","nnz","outputRank","product","unknownIndex","missing","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","id","segmentIds","isMean","numIndices","inputFlat","numCol","outputRows","outputLength","reduce","end","uninitializedIndex","outIndex","nextIndex","newLoc","dataSplits","batchSize","tokens","maxNumEntries","prevTokensLength","nEntries","c","numBuckets","fingerPrint64","modulo","getLowBitsUnsigned","reps","sorted","lastDim","allTopKVals","allTopKIndices","valAndInd","sort","outOffset","topKVals","topKIndices","perm","xRank","xSize","newStrides","axis","$axis","parseAxisParam","uniqueElements","Int32Array","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","axisValues","m","undefined","uniqueIndex","Object","keys","outputTmpShape","outputBuffer","uniqueElementIndex","addImplCPU","bincountImpl","bincountImplCPU","bincountReduceImpl","bincountReduceImplCPU","ceilImplCPU","concatImpl","concatImplCPU","equalImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterImplCPU","greaterEqualImplCPU","lessImplCPU","lessEqualImplCPU","linSpaceImpl","linSpaceImplCPU","logImplCPU","maxImpl","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImpl","negImplCPU","notEqualImplCPU","prodImpl","prodImplCPU","rangeImpl","rangeImplCPU","rsqrtImplCPU","sigmoidImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","sparseFillEmptyRowsImpl","sparseFillEmptyRowsImplCPU","sparseReshapeImpl","sparseReshapeImplCPU","sparseSegmentReductionImpl","sparseSegmentReductionImplCPU","sqrtImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","stringSplitImpl","stringSplitImplCPU","stringToHashBucketFastImpl","stringToHashBucketFastImplCPU","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU","shared","getVecChannels","getChannels","PackProgram","channels","outOfBoundsCondition","dims","cond","getOutOfBoundsCondition","setup","innerDims","getSetup","sourceCoords","coord","getSourceCoordsArr","getOutput","ReshapePackedProgram","thisRC","shader_util.getLogicalCoordinatesFromFlatIndexByUniform","TextureManager","gpgpu","acquireTexture","shapeRC","usage","physicalTexType","getPhysicalFromLogicalTextureType","shapeKey","getKeyFromTextureShape","freeTextures","usedTextures","texBytes","computeBytes","numFreeTextures","numUsedTextures","_numBytesFree","newTexture","shift","PACKED_2X2_FLOAT32","PACKED_2X2_FLOAT16","UNPACKED_FLOAT32","UNPACKED_FLOAT16","PACKED_4X1_UNSIGNED_BYTE","_numBytesAllocated","releaseTexture","logicalTexType","deleteTexThreshold","texList","texIndex","splice","logEnabled","total","freeRatio","round","numBytesAllocated","numBytesFree","getNumUsedTextures","getNumFreeTextures","tex","internalFormatForPhysicalTexType","packedWidth","packedHeight","numBytesForInternalFormat","UPLOAD","RENDER","getPhysicalTextureForRendering","PIXELS","shapeRowsCol","UnaryOpProgram","opSnippet","ABS","CLONE","UnaryOpPackedProgram","UnpackProgram","getSourceCoords","whereImpl","kernel_impls","binaryCaches","CPU_HANDOFF_SIZE_THRESHOLD","MathBackendWebGL","KernelBackend","super","WeakMap","WeakSet","binaryCache","gpgpuCreatedLocally","textureManager","numMBBeforeWarning","global","screen","window","devicePixelRatio","DataStorage","engine","nextDataId","numDataIds","pendingDeletes","write","checkNumericalProblems","dataId","refCount","has","incRef","decRef","move","disposeIntermediateTensorInfo","tensorInfo","disposeData","readSync","complexTensorInfos","unary_op.CLONE","runWebGLProgram","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","now","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","read","pendingRead","subscribers","tmpDownloadTarget","decode","tmpData","tex_util.getDenseTexShape","ps","all","dTypeVals","delete","pendingDisposal","removeDataId","bufferSync","decodeString","webgl_util.canBeRepresented","tmpTarget","shouldUsePackedProgram","webgl_util.getShapeAs3D","timerAvailable","time","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","filter","flattenedActiveTimerNames","uploadWaitMs","kernelMs","wallMs","sum","ms","memory","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesInGPUFree","startTimer","startMs","endMs","endTimer","timerQuery","force","add","releaseGPUData","key","origDataId","dataRefCount","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","sizeThreshold","every","getGPGPUContext","where","condition","condVals","dataSync","packedUnaryOp","outInfo","compileAndRun","makeTensorFromDataId","outValues","makeOutput","unary_op.ABS","makeTensorInfo","isString","encodedValues","unpackTensor","packTensor","packedReshape","afterShape","input3DShape","webgl_util.getBatchDim","webgl_util.getRowsCols","input3D","afterShapeAs3D","customValues","denseTexShape","outputDtype","customUniformValues","preventEagerUnpackingOfOutput","outData","packedOutput","outPackingScheme","tex_util.PackingScheme","texelShape","outTexUsage","dataToDispose","inputsData","uniformValues","webgl_util.isReshapeFree","savedInput","outputData","keyInputs","concat","hasOffset","xTexShape","shader_compiler.getUniformInfoFromShape","rank1","rank2","rank34","isLogicalShapTexShapeEqual","isScalar","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","gpgpu_math.makeShaderKey","binary","getAndSaveBinary","inputInfos","variableNames","inShapeInfos","source","shader_compiler.makeShader","webGLProgram","infLoc","nanLoc","uniformLocations","inShapesLocations","inTexShapesLocations","varName","outShapeLocation","outTexShapeLocation","outShapeStridesLocation","customUniformLocations","gpgpu_math.compileProgram","outTex","uniform1f","Infinity","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniform1iv","uniform2iv","uniform3iv","uniform4iv","uniform2i","uniform1fv","outShapeLoc","customLoc","customValue","uniform2fv","uniform3fv","uniform4fv","gpgpu_math.runProgram","info","glFlushThreshold","lastGlFlushTime","unpacked","getBinary","getTextureManager","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","tidy","debugFlag","underflowCheckValue","scalar","epsilon","webgl_util.getTextureShapeFromLogicalShape","isByteArray","Uint8ClampedArray","tempDenseInputHandle","preventEagerUnpacking","encodedOutputTarget","outputTexData","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","bytesPerElement","forceHalfFloat","isBrowser","registerBackend","webgl","BinaryOpProgram","BinaryOpPackedProgram","checkOutOfBounds","checkOutOfBoundsString","identity","args","backend","identityConfig","kernelName","Identity","backendName","kernelFunc","complex","complexInfo","realTensorInfo","imagTensorInfo","complexConfig","Complex","LEAKYRELU","LEAKYRELU_PACKED","leakyReluConfig","LeakyRelu","$alpha","PRELU","PRELU_PACKED","preluConfig","Prelu","unaryKernelFunc","packedOpSnippet","cpuKernelImpl","webglBackend","$dtype","xData","binaryKernelFunc","supportsComplex","aData","bData","complexParts","aPart","bPart","aHandle","bHandle","complexOutput","decodedAVals","decodedBVals","out","mapActivationToShaderProgram","activation","packed","CHECK_NAN_SNIPPET","MatMulPackedProgram","transposeA","transposeB","addBias","hasPreluActivation","hasLeakyreluActivation","sharedDim","sharedDimensionPacked","aSample","bSample","aSwizzle","bSwizzle","activationSnippet","applyActivationSnippet","addBiasSnippet","batchASnippet","batchBSnippet","COMPLEX_MULTIPLY","BinaryOpComplexProgram","MUL","multiply","realProgram","binaryop_complex_gpu.COMPLEX_MULTIPLY","imagProgram","realPart","imagPart","cpuMultiply","multiplyConfig","Multiply","reshape","$shape","inferFromImplicitShape","$xSize","xTexData","reshapeConfig","Reshape","MeanProgram","reduceInfo","divisor","windowSize","outSize","windowSizeNearestVec4","windowSizeVec4Remainder","updateSnippet","denominator","isInt","toPrecision","ReduceProgram","reduceType","initializationValue","compareOp","vecType","reductionType","reductionStages","stages","computeOptimalWindowSize","getReductionStages","previousResult","TransposeProgram","newDim","switched","originalOrder","switchedCoords","getSwitchedCoords","TransposePackedProgram","outputOrder","switchedOrder","nextColumn","getc","keepDims","reductionIndices","origAxes","axes","permutedAxes","getAxesPermutation","sumInputIsTransposed","sumInput","getInnerMostAxes","assertAxesAreInnerMostDims","sumOutShape","expandShapeToKeepDim","reshapedInput","reduced","sumOutType","sumImpl","sumConfig","Sum","transpose","cpuTranspose","transposeConfig","Transpose","batchMatMulImpl","bias","preluActivationWeights","leakyreluAlpha","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","a3dShape","b3dShape","a3d","b3d","intermediates","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","aVec","bVec","shouldReshapeB","aVec3d","bVec3d","$leakyreluAlpha","outReshaped","_fusedMatMulConfig","_FusedMatMul","absConfig","Abs","acos","acosConfig","Acos","acosh","acoshConfig","Acosh","ADD","addKernelFunc","cpuAdd","addConfig","Add","AddNProgram","shapes","snippets","variable","operation","AddNPackedProgram","addNConfig","AddN","addN","tensors","midIndex","leftSide","rightSide","d1","d2","allConfig","All","permutedX","a2D","anyConfig","Any","ArgMinMaxProgram","firstPass","compOp","indexSnippet","ArgMinMaxPackedProgram","sourceLocSetup","sourceRank","sourceLocDType","inChannel","intChannels","srcRCoords","srcGCoords","srcBCoords","srcACoords","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","argReduce","bestIndicesA","argReducePacked","argMinMaxReduce","intermediateTensorInfos","xtexData","xUnPacked","reshaped","argMaxConfig","ArgMax","$x","argMinConfig","ArgMin","asin","asinConfig","Asin","asinh","asinhConfig","Asinh","atan","atanConfig","Atan","atan2","CHECK_NAN_SNIPPET_BINARY","atan2Config","Atan2","atanh","atanhConfig","Atanh","Pool2DProgram","convInfo","poolType","computePositions","flattenPositions","includeBatchInIndex","filterWidth","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","isAvgPool","batchFlattenPositionStr","inHeight","inWidth","inChannels","flattenPositionStr","filterWidthNearestVec4","filterWidthVec4Remainder","Pool3DProgram","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","inDepth","avgPoolConfig","AvgPool","filterSize","dimRoundingMode","eitherStridesOrDilationsAreOne","computePool2DInfo","filterHeight","avgPoolProgram","avgPool3DConfig","AvgPool3D","dataFormat","computePool3DInfo","AvgPool2DBackpropProgram","avgMultiplier","outHeight","outWidth","AvgPool3DBackpropProgram","filterDepth","outDepth","avgPoolGrad3DConfig","AvgPool3DGrad","dy","avgPoolBackpropProgram","avgPoolGradConfig","AvgPoolGrad","batchMatMulConfig","BatchMatMul","BatchNormProgram","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","offsetSnippet","scaleSnippet","BatchNormPackedProgram","batchNormConfig","FusedBatchNorm","mean","variance","scale","finalInputs","SliceProgram","destSize","getCoords","body","SlicePackedProgram","sourceLoc","getChannel","upperRow","lowerRow","$begin","$size","parseSliceParams","assertParamsValid","newTexData","assign","shallowSlice","sliceConfig","Slice","batchToSpaceNDConfig","BatchToSpaceND","blockShape","crops","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","reshapedIntermediate2","sliced","bincountConfig","Bincount","weights","broadcastArgsConfig","BroadcastArgs","s0","s1","s0Vals","s1Vals","broadcastShape","from","notEqual","notEqualConfig","NotEqual","realConfig","Real","castConfig","Cast","cast","zerosTensor","tf","zeros","floatX","hasEncodingLoss","int","zerosTensorInfo","CEIL","ceilConfig","Ceil","ClipProgram","ClipPackedProgram","clipByValueConfig","ClipByValue","clipValueMin","clipValueMax","ComplexAbsProgram","makeComplexComponentTensorInfo","complexTensor","complexPart","complexAbsConfig","ComplexAbs","programInputs","ConcatProgram","computeOutShape","offsets","lastIndex","lastShift","ConcatPackedProgram","lastChannels","allChannels","getValueSnippet","shiftedChannels","channelIdx","imagConfig","Imag","reals","imags","realConcated","imagConcated","r","runOnCpu","tensors2D","innerSize","inputsValShapes","finalOutShape","computeTensors2D","reshapedResult","$inputs","assertParamsConsistent","concatConfig","Concat","Conv2DProgram","inputDepthNearestVec4","inputDepthVec4Remainder","isChannelsLast","rowDim","colDim","channelDim","Conv3DProgram","Im2ColPackedProgram","boundsCheckingSnippet","unrolled","conv2dByMatMul","sharedMatMulDim","outerShapeX","outerShapeFilter","outChannels","xReshaped","originalXTexDataShape","filterReshaped","pointwiseConv","pointwiseConvTexData","conv2dWithIm2Row","x2ColShape","xSqueezed","w2Row","im2ColProgram","im2Col","im2ColReshaped","matmulProgram","conv2DConfig","Conv2D","dilations","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","Conv2DDerFilterProgram","filterShape","Conv2DDerInputProgram","Conv3DDerFilterProgram","Conv3DDerInputProgram","conv2DBackpropFilterConfig","Conv2DBackpropFilter","conv2DBackpropInputConfig","Conv2DBackpropInput","conv3DConfig","Conv3D","computeConv3DInfo","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","conv3DBackpropInputConfig","Conv3DBackpropInputV2","cos","CHECK_NAN_SNIPPET_UNARY","cosConfig","Cos","cosh","coshConfig","Cosh","CropAndResizeProgram","imageShape","boxShape","cropSize","method","extrapolationValue","imageHeight","imageWidth","numBoxes","cropHeight","cropWidth","methodId","inputHeightFloat","inputWidthFloat","heightRatio","heightScale","inY","widthRatio","widthScale","inX","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","CumSumProgram","exclusive","reverse","val","idxString","getFinalCoord","cumsumConfig","Cumsum","permutation","permutedAxis","log2","prevResult","reverseTransposedResult","getUndoAxesPermutation","denseBincountConfig","DenseBincount","DepthToSpaceProgram","blockSize","getHeightCoordString","getWidthCoordString","getDepthCoordString","getOutputDepthSize","getInputSamplingString","depthToSpaceConfig","DepthToSpace","outputHeight","outputWidth","outputDepth","DepthwiseConv2DProgram","hasLeakyReluAlpha","channelMul","DepthwiseConvPacked2DProgram","texelsAcross","texelC","colIndex","nextTexelOffset","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","$dilations","DepthwiseConv2DDerFilterProgram","DepthwiseConv2DDerInputProgram","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","DiagProgram","diagConfig","Diag","flat","Dilation2DProgram","dilation2DConfig","Dilation2D","computeDilation2DInfo","einsumConfig","Einsum","equation","allDims","summedDims","idDims","decodeEinsumEquation","checkEinsumDimSizes","path","steps","getEinsumComputePath","nSteps","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","expandDims","dimsToExpand","getEinsumPermutation","isIdentityPermutation","elu","eluConfig","Elu","eluGradConfig","EluGrad","equal","equalConfig","Equal","erf","ERF_P","ERF_A1","ERF_A2","ERF_A3","ERF_A4","ERF_A5","erfConfig","Erf","EXP","expConfig","Exp","$dim","expandDimsConfig","ExpandDims","EXPM1","expm1Config","Expm1","FFTProgram","component","inverse","innerDim","exponentMultiplierSnippet","PI","resultDenominator","opString","fftImpl","inputSize","innerDimensionSize","input2D","complexOutputReshaped","fftConfig","FFT","FillProgram","inferDtype","fillConfig","Fill","FlipLeftRightProgram","flipLeftRightConfig","FlipLeftRight","FLOOR","floorConfig","Floor","floorDiv","floorDivConfig","FloorDiv","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","FromPixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","videoWidth","videoHeight","fromPixels2DContext","drawImage","tempPixelHandle","fusedConv2DConfig","FusedConv2D","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","shouldPackDepthwiseConv","GatherNDProgram","sliceDim","stridesType","strideString","gatherNdConfig","GatherNd","resultShape","prepareAndValidate","flattenIndices","flattenX","outValue","GatherProgram","currentCoords","gatherV2","batchDims","parsedAxis","indicesVals","axisDim","segment_util","collectGatherOpShapeInfo","indicesSize","outerSize","dimSize","gatherV2Config","GatherV2","greater","greaterConfig","Greater","greaterEqual","greaterEqualConfig","GreaterEqual","ifftConfig","IFFT","isFinite","isFiniteConfig","IsFinite","isInf","isInfConfig","IsInf","isNaNConfig","IsNan","less","lessConfig","Less","lessEqual","lessEqualConfig","LessEqual","linSpaceConfig","LinSpace","logConfig","Log","log1p","log1pConfig","Log1p","logicalAnd","logicalAndConfig","LogicalAnd","logicalNot","logicalNotConfig","LogicalNot","logicalOr","logicalOrConfig","LogicalOr","LRNProgram","radius","beta","rad","maxD","powOperator","basis","LRNPackedProgram","LRNConfig","LRN","depthRadius","LRNGradProgram","LRNGradConfig","LRNGrad","maxInputIsTransposed","maxInput","maxInputValues","maxOutShape","reshapedOutput","maxConfig","Max","maximum","maximumConfig","Maximum","maxPoolConfig","MaxPool","maxPoolProgram","maxPool3DConfig","MaxPool3D","MaxPool2DBackpropProgram","MaxPool3DBackpropProgram","maxPoolGrad3DConfig","MaxPool3DGrad","maxPool3dPositionsProgram","maxPool3dPositions","maxPoolBackpropProgram","maxPoolGradConfig","MaxPoolGrad","maxPoolPositionsProgram","maxPoolPositions","maxPoolBackPropProgram","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","indexes","poolOutput","maxPoolWithArgmaxImpl","meanConfig","Mean","meanInputIsTransposed","meanInput","meanInputValues","meanOutShape","meanImpl","minConfig","Min","minimum","minimumConfig","Minimum","MirrorPadProgram","paddings","mode","p","unpackedCoords","MirrorPadPackedProgram","cLimit","padSetup","mirrorPadConfig","MirrorPad","mod","modConfig","Mod","MultinomialProgram","numOutcomes","numSamples","realDiv","realDivConfig","RealDiv","SUB","sub","cpuSub","subConfig","Sub","softmax","logits","maxLogit","expandedShape","maxLogitsReshaped","sumExp","sumExpReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","seed","normalized","probs","NEG","negConfig","Neg","nonMaxSuppressionV3Impl","nonMaxSuppressionV3Config","NonMaxSuppressionV3","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","OneHotProgram","onValue","offValue","oneHotConfig","OneHot","zerosLike","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","packConfig","Pack","assertShapesMatch","expandedT","PadProgram","constantValue","PadPackedProgram","componentSetup","paddingArea","padV2","padV2Config","PadV2","pow","powConfig","Pow","prodConfig","Prod","range","rangeConfig","Range","reciprocal","reciprocalConfig","Reciprocal","relu","reluConfig","Relu","relu6","relu6Config","Relu6","ResizeBilinearProgram","newHeight","newWidth","alignCorners","halfPixelCenters","oldHeight","oldWidth","effectiveInSize","effectiveOutSize","sourceFracIndexRC","ResizeBilinearPackedProgram","resizeBilinearConfig","ResizeBilinear","images","ResizeBilinearBackpropProgram","dyShape","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","invHeightScale","invWidthScale","winHeight","winWidth","resizeBilinearGradConfig","ResizeBilinearGrad","ResizeNearestNeighborProgram","roundBase","ResizeNearestNeighborPackedProgram","resizeNearestNeighborConfig","ResizeNearestNeighbor","ResizeNearestNeigborBackpropProgram","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","ReverseProgram","inCoords","getInCoord","ReversePackedProgram","nextRow","inCoordsArray","channels1","getR","getG","getB","getA","reverseConfig","Reverse","$dims","RotateProgram","fillValue","fillSnippet","rotateWithOffsetConfig","RotateWithOffset","radians","center","centerX","centerY","getImageCenter","sin","roundConfig","Round","rsqrt","rsqrtConfig","Rsqrt","ScatterProgram","updateSize","indicesRank","updatesRank","summingDupeIndex","indicesString","indicesSnippet","updatesString","updatesSnippet","scatterNdConfig","ScatterNd","updates","numUpdates","calculateShapes","flattenShape","SelectProgram","cRank","cCoords","abCoords","cCoordVars","abCoordVars","selectConfig","Select","selu","SELU_SCALEALPHA","SELU_SCALE","seluConfig","Selu","SIGMOID","sigmoid","sigmoidConfig","Sigmoid","signConfig","Sign","sinConfig","Sin","sinh","sinhConfig","Sinh","softplus","softplusConfig","Softplus","spaceToBatchNDConfig","SpaceToBatchND","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapedPaddedX","paddedXT","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","sparseReshapeConfig","SparseReshape","$inputShape","$inputIndices","sparseSegmentMeanConfig","SparseSegmentMean","$data","$segmentIds","outputDataShape","sparseSegmentSumConfig","SparseSegmentSum","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","prepareSplitSize","sliceT","SQRT","sqrtConfig","Sqrt","square","squareConfig","Square","SQUARED_DIFFERENCE","squaredDifference","squaredDifferenceConfig","SquaredDifference","stepConfig","Step","StridedSliceProgram","inputDtype","newCoords","outputAxis","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$end","$strides","sliceInfo","resultReshaped","stringNGramsConfig","StringNGrams","$dataSplits","stringSplitConfig","StringSplit","$input","$delimiter","stringToHashBucketFastConfig","StringToHashBucketFast","tan","tanConfig","Tan","tanh","tanhConfig","Tanh","TileProgram","tile","buf","tileConfig","Tile","SwapProgram","MergeProgram","disposeIntermediateTensorInfoOrNull","roundUpToPow2","pow2","topKConfig","TopK","TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD","TOPK_K_CPU_HANDOFF_THRESHOLD","xIsPacked","x2D","kPow2","lastDimPow2","getInputs","runSwap","dir","inc","NEGATIVE_INFINITY","prevIndices","len","mergeProgram","prevValues","TransformProgram","interpolation","fillMode","interpolationModeId","fillModeId","transformConfig","Transform","transforms","uniqueConfig","Unique","unpackConfig","Unpack","SegmentOpProgram","segOpInfo","segOpType","numSegments","checkValueOutOfBounds","checkSegmentIdOutOfBounds","kernelConfigs","UnsortedSegmentSum","outputDType","segOpCompute","segOpComputeOptimalWindowSize","rangeInfo","tileInfo","kernelConfig","registerKernel"],"mappings":"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DAItB,IAAIogC,EAAwB,GACxB/8D,EAASu8B,EAAa,IACxBwgC,EAAwB,uCACM/8D,kEAMhC,IAAIg9D,EAA4B,GAC5Bh9D,EAASu8B,EAAa,IACxBygC,EAA4B,uCACEh9D,mDAMhCmB,KAAKtD,SAAW,2GAIVk/D,2GAKAC,2PASEF,eAAyBvgC,+DACmBugC,yEAI1BrgC,2lBAgBlBE,kDAGqBF,mBACS,IAA5BC,8aAiBFC,yBACqC,IAA5BD,obAeTC,yBACqC,IAA5BD,+eAeTC,6DC9CL,MCyEDsgC,GAAgC,CACpCvY,GACAI,GACAtjB,GACAE,GACAG,GACAG,GACAK,GACAQ,GACAS,GACAI,GACA2B,GACAG,GACAG,GACAG,GACAO,GACAJ,GACAO,GACA0C,GACAR,GACAmB,GACAI,GACAE,GACAW,GACAwB,GACAiB,GACAG,GACAa,GACAW,GACAI,GACAQ,GACAhY,GACA8Z,GACA0C,GACAE,GACAb,GACAkB,GACAE,GACAL,GACAS,GACAG,GACAsB,GACAW,GACAQ,GACAS,GACAkB,GACAE,GACAP,GACAU,GACAI,GACAG,GACAqB,GACAE,GACAG,GACAS,GACAG,GACAG,GACAG,GACAe,GACAI,GACAG,GACAG,GACAG,GACAI,GACAY,GACAE,GACAO,GACAmB,GACAG,GACAG,GACA3qB,GACA6qB,GACAtR,GACAyR,GACAG,GACAE,GACAxqB,GACA2qB,GACAG,GACAE,GACAK,GACAH,GACAM,GACAG,GACAG,GACAqB,GACAQ,GACAH,GACAO,GACAK,GACAK,GACAnB,GACAwB,GACAO,GACAG,GACAU,GACAG,GACAsB,GACAluB,GACAwuB,GACAG,GACAU,GACAK,GACAld,GACA6d,GACAK,GACAG,GACAU,GACAG,GACA90B,GACAg1B,GACAG,GACArf,GACAwa,GACAgF,GACAM,GACAH,GACA9xB,GACA8yB,GACAe,GACAK,GACAG,GACAa,GACAM,GACAQ,GACAG,GACAW,GACAY,GACAK,GACAI,GACAE,GACAE,GACAG,GACAxoB,GACAud,GACAoL,GACAE,GACAQ,GACAO,GACAI,GACAK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"}